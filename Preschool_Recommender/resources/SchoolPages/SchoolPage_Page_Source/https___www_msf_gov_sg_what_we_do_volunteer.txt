<html lang="en" class="hydrated"><head> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>
	MSF | Volunteer
</title> <link rel="icon" type="image/png" href="/ResourcePackages/Msf/assets/img/favIco.png"> <link rel="preconnect" href="https://fonts.googleapis.com"> <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin=""> <link href="https://fonts.googleapis.com/css2?family=Lexend:wght@300;400;500;600;700&amp;family=Open+Sans:wght@400;500;600;700&amp;display=swap" rel="stylesheet">  <link href="/ResourcePackages/Msf/assets/css/sgds.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/bootstrap-icons.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/all.min.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/bootstrap.min.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/sf-bootstrap-conflict.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/jquery-ui.min.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/swiper-bundle.min.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/search-result.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/main.css" rel="stylesheet"> <link href="/ResourcePackages/Msf/assets/css/custom-style.min.css" rel="stylesheet"> <meta property="og:title" content="MSF | Volunteer"><meta property="og:description" content="Our MSFCare Network connects like-minded volunteers with volunteering opportunities and updates from the MSF-Family and our partners."><meta property="og:url" content="https://www.msf.gov.sg/what-we-do/volunteer/home"><meta property="og:type" content="website"><meta property="og:site_name" content="Ministry of Social and Family Development"><style type="text/css" media="all">body {
height: auto;
}</style><link href="/ResourcePackages/Msf/assets/css/volunteer/vendors.css" media="all" rel="stylesheet" type="text/css"><link href="/ResourcePackages/Msf/assets/css/volunteer/volunteer-content.css" media="all" rel="stylesheet" type="text/css"><link href="/ResourcePackages/Msf/assets/css/volunteer/volunteer.css" media="all" rel="stylesheet" type="text/css"><link href="/ResourcePackages/Msf/assets/css/volunteer/volunteer-style.css" media="all" rel="stylesheet" type="text/css"><link href="/ResourcePackages/Msf/assets/css/volunteer/volunteer-style-new.css" media="all" rel="stylesheet" type="text/css"><link href="/ResourcePackages/Msf/assets/css/volunteer/volunteer-style-fix.css" media="all" rel="stylesheet" type="text/css"><style type="text/css" media="all">.image-text__image {
  align-self: flex-start;
  margin-top: 3rem !important;
}</style><script async="" src="https://buttons-config.sharethis.com/js/648140a26773dd0012e17a9b.js"></script><script src="https://www.youtube.com/iframe_api"></script><script async="" src="https://www.googletagmanager.com/gtm.js?id=G-7WBNTH91BT"></script><script async="" src="https://assets.wogaa.sg/snowplow/3.13.1/sp.js"></script><script type="text/javascript" id="www-widgetapi-script" src="https://www.youtube.com/s/player/3b96d06c/www-widgetapi.vflset/www-widgetapi.js" async=""></script><script type="text/javascript" src="https://www.youtube.com/iframe_api"></script><script type="text/javascript">
function lateLoadChatFile() {      
  setTimeout(() => {        
              const bodyTag = document.getElementsByTagName("body")[0];      
             // Create link element to import chat.css file and append it on the body element        
             let linkTag = document.createElement("link");
  linkTag.href = "https://webchat.vica.gov.sg/static/css/chat.css";         linkTag.type = "text/css";
  linkTag.rel = "stylesheet";       
  linkTag.referrerPolicy = "origin";      
  bodyTag.appendChild(linkTag);        
  // Create script element to import chat.js file and append it on the body element       
  let scriptTag = document.createElement("script");         scriptTag.src = "https://webchat.vica.gov.sg/static/js/chat.js";         scriptTag.type = "text/javascript";      
  scriptTag.referrerPolicy = "origin";         
  scriptTag.defer = true;         
  bodyTag.appendChild(scriptTag);      
}, 5000);  
}
</script><script type="text/javascript">
(function() {
  // add beta text 
  let timerId = setInterval(function(){
	if(!document.getElementsByClassName("sc-htpNat")[0]) return;
	
	clearInterval(timerId);
	document.getElementsByClassName("sc-htpNat")[0].addEventListener("click", changeText);
	document.getElementsByClassName("sc-EHOje")[0].addEventListener("click", changeText);
  }, 5000);
  function changeText() {
	const ele = $("#webchat-container p:contains('Ask MSF')");
	ele.html("");
	ele.append("Ask MSF <span style='font-size: 14px !important;position: relative;top: -9px;left: 5px;font-weight: lighter;'>beta</span>");
  }
})();
</script><link rel="canonical" href="https://www.msf.gov.sg/what-we-do/volunteer/home"><meta name="description" content="Our MSFCare Network connects like-minded volunteers with volunteering opportunities and updates from the MSF-Family and our partners."><script async="" src="https://assets.wogaa.sg/scripts/wogaa.js?url=https%3A%2F%2Fwww.msf.gov.sg%2Fwhat-we-do%2Fvolunteer"></script><meta http-equiv="origin-trial" content="AymqwRC7u88Y4JPvfIF2F37QKylC04248hLCdJAsh8xgOfe/dVJPV3XS3wLFca1ZMVOtnBfVjaCMTVudWM//5g4AAAB7eyJvcmlnaW4iOiJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjk1MTY3OTk5LCJpc1RoaXJkUGFydHkiOnRydWV9"><script type="module" src="https://assets.wogaa.sg/sentiments/sentiments.esm.js" async=""></script><script nomodule="" src="https://assets.wogaa.sg/sentiments/sentiments.js" async=""></script><style type="text/css">#st-2 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  backface-visibility: hidden;
  display: block;
  position: fixed;
  opacity: 1;
  text-align: left;
  top: 310px;
  z-index: 94034;
}
#st-2.st-left {
  left: 0px;
}
#st-2.st-hidden.st-left {
  left: -48px;
}
#st-2.st-hidden {
  width: 96px;
}
#st-2.st-preview {
  display: none!important;
  opacity: 0!important;
}
#st-2 > div {
  clear: left;
  float: left;
}
#st-2 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: 16px;
  height: 48px;
  line-height: 24px;
  margin-bottom: 0;
  opacity: 1;
  overflow: hidden;
  padding: 12px;
  position: relative;
  text-align: left;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
  width: 48px;
}
#st-2 .st-btn.st-first {
  border-top: none;
  border-top-right-radius: 4px;
}
#st-2 .st-btn.st-last {
  border-bottom: none;
  border-bottom-right-radius: 4px;
}
#st-2 .st-btn > svg {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  height: 24px;
  margin-left: 0;
  vertical-align: top;
  width: 24px;
}
#st-2 .st-btn > img {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  height: 24px;
  margin-left: 0;
  vertical-align: top;
  width: 24px;
}
#st-2 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  left: -35px;
  letter-spacing: 0.5px;
  opacity: 0;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
  filter: alpha(opacity=0);
}
#st-2 .st-btn.st-hide-label > span {
  display: none !important;
}
#st-2 .st-total {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  background: #fff;
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 18px;
  margin-right: 0;
  min-height: 34px;
  max-width: 80px;
  opacity: 1;
  padding: 4px 0;
  text-align: center;
  width: 48px;
}
#st-2 .st-total.st-hidden {
  display: none;
}
#st-2 .st-total > span {
  display: block;
  font-size: 18px;
  line-height: 21px;
  padding: 0;
}
#st-2 .st-total > span.st-shares {
  font-size: 11px;
  line-height: 11px;
}
#st-2 .st-toggle {
  left: -48px;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  background: #ccc;
  border-bottom-right-radius: 4px;
  color: white;
  cursor: pointer;
  font-size: 24px;
  line-height: 24px;
  position: relative;
  text-align: center;
  width: 48px;
}
#st-2.st-hidden .st-toggle {
  border-top-right-radius: 4px;
}
#st-2.st-left .st-toggle .st-left {
  display: inline-block;
}
#st-2.st-left.st-hidden .st-toggle .st-left {
  display: none;
}
#st-2.st-left .st-toggle .st-right {
  display: none;
}
#st-2.st-left.st-hidden .st-toggle .st-right {
  display: inline-block;
}#st-2:hover .st-toggle {
  left: 0;
}
#st-2.st-hidden:hover .st-toggle {
  left: 48px;
}
#st-2.st-toggleable:hover .st-btn.st-last {
  border-bottom-right-radius: 0;
}
#st-2.st-toggleable:hover .st-btn.st-last:hover {
  border-bottom-right-radius: 4px;
}
#st-2 .st-btn:hover {
  border-bottom-right-radius: 4px;
  border-top-right-radius: 4px;
}
#st-2.st-has-labels .st-btn:hover {
  width: 120px;
}
#st-2:not(.st-has-labels) .st-btn:hover {
  width: 62px;
}
#st-2 .st-btn.st-hide-label:hover {
  width: 62px;
}
#st-2 .st-btn:hover > svg {
  margin-left: 5px;
}
#st-2 .st-btn:hover > img {
  margin-left: 5px;
}
#st-2 .st-btn:hover > span {
  opacity: 1;
  display: inline-block;
  left: 0;
  filter: alpha(opacity=100);
}
@media (max-width: 1024px) {
  #st-2 .st-btn:hover > svg {
    margin-left: 0;
  }
  #st-2 .st-btn:hover > span {
    display: none;
  }
}@media (max-width: 1024px) {
  #st-2 {
  bottom: 0;
  display: none;
  left: 0;
  right: 0;
  top: auto;
  width: 100%;
}
#st-2.st-hidden {
  bottom: -48px;
  width: 100%;
}
#st-2.st-hidden.st-left {
  left: 0;
}
#st-2.st-hidden.st-right {
  right: 0;
}
#st-2 > div {
  -moz-flex: 1;
  -ms-flex: 1;
  -webkit-flex: 1;
  clear: none;
  flex: 1;
  float: none;
}
#st-2 .st-total {
  background: #fff;
  padding: 6px 8px;
}
#st-2 .st-btn {
  -moz-border-radius: 0 !important;
-webkit-border-radius: 0 !important;
border-radius: 0 !important;
  text-align: center;
  width: auto;
}
#st-2 .st-btn > span {
  display: none;
}
#st-2 .st-toggle {
  display: none;
}
}#st-2 .st-btn[data-network='facebook'] {
  background-color: #4267B2
}
#st-2 .st-btn[data-network='facebook'] img {
  filter: 
}
#st-2 .st-btn[data-network='facebook'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='linkedin'] {
  background-color: #0077b5
}
#st-2 .st-btn[data-network='linkedin'] img {
  filter: 
}
#st-2 .st-btn[data-network='linkedin'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='gmail'] {
  background-color: #D44638
}
#st-2 .st-btn[data-network='gmail'] img {
  filter: 
}
#st-2 .st-btn[data-network='gmail'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='copy'] {
  background-color: #14682B
}
#st-2 .st-btn[data-network='copy'] img {
  filter: 
}
#st-2 .st-btn[data-network='copy'] > span {
  color: #fff
}#st-2 .st-btn[data-network='snapchat'] > span {
  color: #333};
}#st-2 .st-btn[data-network='copy']:hover {
  width: max-content;
}</style></head> <body onload="lateLoadChatFile();"> 

<div id="webchat" app-id="msf-askmsf" app-name="Ask MSF" app-font-family="Arial" app-base-font-size="16" app-icon="/images/default-source/vica-logo/msf-logo_circle-1.png?sfvrsn=b4ab799d_3/MSF-Logo_circle-1.png" app-welcome-message="Have a question? Type to get quick answers." app-color="#DE7C00" app-foreground-color1="#FFFFFF" app-bot-response-trigger-event="true" app-quick-launch-event="welcome" app-enable-auto-complete="false" app-auto-complete-background-color="#FFEDD7" app-auto-complete-foreground-color="#2E2E2E" app-auto-complete-hover-color="#FFCA88" app-auto-complete-divider-color="#DE7C00"></div>


<div class="announcements-bar">
    <div class="container-fluid">
        <div class="row g-0 position-relative align-items-center">
            <div class="col">
                <div class="swiper announcementSwiper">
                    <div class="swiper-wrapper">
                            <div class="swiper-slide">
                                <p>Have a question about MSF? Find quick answers with our chatbot Ask MSF.<!--EndFragment--></p>
                            </div>
                                                                                                                    </div>
                </div>
            </div>
            <div class="col-auto align-self-start">
                <div class="announcements-close">
                    <button class="btn-close btn-ann-close btn-close-white" aria-label="Close"></button>
                </div>
            </div>
        </div>
        <div class="row g-0 position-relative">
            <div class="col-12 col-md-auto buttons-align">
                <div class="announcements-buttons">
                    <div class="announcements-swiper-button swiper-button-prev">
                        <em class="fa-solid fa-chevron-left"></em>
                    </div>
                    <div class="announcements-pagination"></div>
                    <div class="announcements-swiper-button swiper-button-next">
                        <em class="fa-solid fa-chevron-right"></em>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


 <sgds-masthead fluid="" class="sgds-masthead-class"></sgds-masthead> 
<div class="layout-subsite" id="strengthen">
    <div id="Content_T5901EA2B001_Col00" class="sf_colsIn" data-sf-element="Navigation" data-placeholder-label="Navigation">

<header>
    <nav class="sgds navbar navbar-expand-xl main-navbar">
        <div class="container-fluid">
            <a class="navbar-brand" href="/" aria-label="home page">
                <img src="/ResourcePackages/Msf/assets/img/msf-logo.png" alt="Ministry of Social and Family" width="140" height="69" title="MSF logo">
            </a>

            <button class="btn btn-nav-search px-24 ms-auto d-block d-xl-none" type="button" data-bs-toggle="collapse" data-bs-target="#searchbarCollapse" aria-expanded="false" aria-controls="searchbarCollapse" aria-label="search icon">
                <em class="fa-solid fa-search"></em>
            </button>

            <div class="collapse" id="searchbarCollapse">
                <div class="container-fluid p-0 px-12">
                    <div class="nav-searchbar">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search our website" id="navSearchBarSearchInput" data-search="navSearchBarSearchInput">
                            <button class="btn btn-search" type="button" id="navSearchBarBtnSearch" aria-label="search">
                                <div class="d-flex justify-content-center align-items-center">
                                    <span>Search</span>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-label="Menu">
                Menu
            </button>

            <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                <div class="offcanvas-header">
                    <img class="offcanvas-header-logo" src="/ResourcePackages/Msf/assets/img/msf-logo.png" alt="Ministry of Social and Family" width="140" height="69">
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>

                <div class="offcanvas-searchbar">
                    <div class="sgds form-group">
                        <div class="input-group">
                            <input type="text" class="form-control" id="defaultWith" aria-describedby="defaultWith" placeholder="Search our website">
                            <button class="btn btn-offcanvas-search" type="button">
                                <em class="fa-solid fa-search form-control-icon"></em>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="offcanvas-body">
                    <ul class="navbar-nav d-flex d-xl-none">
                        <li class="nav-item">
                            <a href="/" class="nav-link submenu-link" data-bs-dismiss="offcanvas" aria-current="page" aria-label="Home"><span>Home</span></a>
                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="#who-we-are-submenu" data-bs-toggle="collapse" aria-expanded="false" aria-label="Who We Are">
                                                <span class="nav-link-text"><span>Who We Are</span></span>
                                                <em class="fa-solid fa-chevron-right"></em>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="#what-we-do-submenu" data-bs-toggle="collapse" aria-expanded="false" aria-label="What We Do">
                                                <span class="nav-link-text"><span>What We Do</span></span>
                                                <em class="fa-solid fa-chevron-right"></em>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="#our-services-submenu" data-bs-toggle="collapse" aria-expanded="false" aria-label="Our Services">
                                                <span class="nav-link-text"><span>Our Services</span></span>
                                                <em class="fa-solid fa-chevron-right"></em>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="/media-room" aria-label="Media Room"><span class="nav-link-text"><span>Media Room</span></span></a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="#research-data-submenu" data-bs-toggle="collapse" aria-expanded="false" aria-label="Research &amp; Data">
                                                <span class="nav-link-text"><span>Research &amp; Data</span></span>
                                                <em class="fa-solid fa-chevron-right"></em>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="#join-us-submenu" data-bs-toggle="collapse" aria-expanded="false" aria-label="Join Us">
                                                <span class="nav-link-text"><span>Join Us</span></span>
                                                <em class="fa-solid fa-chevron-right"></em>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="/events" aria-label="Events"><span class="nav-link-text"><span>Events</span></span></a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link submenu-link" href="/AskMSF" aria-label="Ask MSF"><span class="nav-link-text"><span>Ask MSF</span></span></a>
                                        </li>
                    </ul>

                    <div class="d-block d-xl-none">
                                <div class="collapse collapse-horizontal submenu" id="who-we-are-submenu" data-bs-parent="#menu">
                                    <div class="card card-body border-0" style="width: 100vw">
                                        <a href="#who-we-are-submenu" class="submenu-content-back text-decoration-none" data-bs-toggle="collapse" aria-label="Main menu">
                                            <em class="fa-solid fa-chevron-left"></em>
                                            Main menu
                                        </a>
                                        <div class="submenu-content-header">
                                            <h6>Who We Are</h6>
                                        </div>
                                        <ul class="navbar-nav gap-10">
                                                <li class="nav-item">
                                                    <a href="/who-we-are/mission-values" class="nav-link sgds" aria-label="Mission &amp; Values"><span class="nav-link-text"><span>Mission &amp; Values</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/who-we-are/agencies-statutory-boards-councils" class="nav-link sgds" aria-label="Agencies, Statutory Boards &amp; Councils"><span class="nav-link-text"><span>Agencies, Statutory Boards &amp; Councils</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/who-we-are/senior-management-team" class="nav-link sgds" aria-label="Senior Management Team"><span class="nav-link-text"><span>Senior Management Team</span></span></a>
                                                </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="collapse collapse-horizontal submenu" id="what-we-do-submenu" data-bs-parent="#menu">
                                    <div class="card card-body border-0" style="width: 100vw">
                                        <a href="#what-we-do-submenu" class="submenu-content-back text-decoration-none" data-bs-toggle="collapse" aria-label="Main menu">
                                            <em class="fa-solid fa-chevron-left"></em>
                                            Main menu
                                        </a>
                                        <div class="submenu-content-header">
                                            <h6>What We Do</h6>
                                        </div>
                                        <ul class="navbar-nav gap-10">
                                                <li class="nav-item">
                                                    <a href="/what-we-do/help-those-in-need" class="nav-link sgds" aria-label="Help Those in Need"><span class="nav-link-text"><span>Help Those in Need</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/what-we-do/support-families-and-parents" class="nav-link sgds" aria-label="Support Families &amp; Parents"><span class="nav-link-text"><span>Support Families &amp; Parents</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/what-we-do/strengthen-the-social-service-sector" class="nav-link sgds" aria-label="Strengthen the Social Service Sector"><span class="nav-link-text"><span>Strengthen the Social Service Sector</span></span></a>
                                                </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="collapse collapse-horizontal submenu" id="our-services-submenu" data-bs-parent="#menu">
                                    <div class="card card-body border-0" style="width: 100vw">
                                        <a href="#our-services-submenu" class="submenu-content-back text-decoration-none" data-bs-toggle="collapse" aria-label="Main menu">
                                            <em class="fa-solid fa-chevron-left"></em>
                                            Main menu
                                        </a>
                                        <div class="submenu-content-header">
                                            <h6>Our Services</h6>
                                        </div>
                                        <ul class="navbar-nav gap-10">
                                                <li class="nav-item">
                                                    <a href="/our-services/directories" class="nav-link sgds" aria-label="Directories"><span class="nav-link-text"><span>Directories</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/our-services/e-services" class="nav-link sgds" aria-label="E-Services"><span class="nav-link-text"><span>E-Services</span></span></a>
                                                </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="collapse collapse-horizontal submenu" id="research-data-submenu" data-bs-parent="#menu">
                                    <div class="card card-body border-0" style="width: 100vw">
                                        <a href="#research-data-submenu" class="submenu-content-back text-decoration-none" data-bs-toggle="collapse" aria-label="Main menu">
                                            <em class="fa-solid fa-chevron-left"></em>
                                            Main menu
                                        </a>
                                        <div class="submenu-content-header">
                                            <h6>Research &amp; Data</h6>
                                        </div>
                                        <ul class="navbar-nav gap-10">
                                                <li class="nav-item">
                                                    <a href="/research-data/research-reports-data" class="nav-link sgds" aria-label="Research Report &amp; Data"><span class="nav-link-text"><span>Research Report &amp; Data</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/research-data/research-grants" class="nav-link sgds" aria-label="Research Grants"><span class="nav-link-text"><span>Research Grants</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/what-we-do/Research-Conferences-Forums-Networks" class="nav-link sgds" aria-label="Research Conferences, Forums &amp; Networks"><span class="nav-link-text"><span>Research Conferences, Forums &amp; Networks</span></span></a>
                                                </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="collapse collapse-horizontal submenu" id="join-us-submenu" data-bs-parent="#menu">
                                    <div class="card card-body border-0" style="width: 100vw">
                                        <a href="#join-us-submenu" class="submenu-content-back text-decoration-none" data-bs-toggle="collapse" aria-label="Main menu">
                                            <em class="fa-solid fa-chevron-left"></em>
                                            Main menu
                                        </a>
                                        <div class="submenu-content-header">
                                            <h6>Join Us</h6>
                                        </div>
                                        <ul class="navbar-nav gap-10">
                                                <li class="nav-item">
                                                    <a href="/join-us/volunteer-with-msfcare-network" class="nav-link sgds" aria-label="Volunteer with MSFCare Network"><span class="nav-link-text"><span>Volunteer with MSFCare Network</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/join-us/jobs-careers" class="nav-link sgds" aria-label="Jobs &amp; Careers"><span class="nav-link-text"><span>Jobs &amp; Careers</span></span></a>
                                                </li>
                                                <li class="nav-item">
                                                    <a href="/join-us/scholarships-internships" class="nav-link sgds" aria-label="Scholarships &amp; Internships"><span class="nav-link-text"><span>Scholarships &amp; Internships</span></span></a>
                                                </li>
                                        </ul>
                                    </div>
                                </div>
                    </div>

                    <ul class="navbar-nav justify-content-end flex-grow-1 d-none d-xl-flex">
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Who We Are">
                                                <span class="nav-link-text"><span>Who We Are</span></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/who-we-are/mission-values" aria-label="Mission &amp; Values">
                                                            Mission &amp; Values
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/who-we-are/agencies-statutory-boards-councils" aria-label="Agencies, Statutory Boards &amp; Councils">
                                                            Agencies, Statutory Boards &amp; Councils
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/who-we-are/senior-management-team" aria-label="Senior Management Team">
                                                            Senior Management Team
                                                        </a>
                                                    </li>
                                            </ul>
                                        </li>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="What We Do">
                                                <span class="nav-link-text"><span>What We Do</span></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/what-we-do/help-those-in-need" aria-label="Help Those in Need">
                                                            Help Those in Need
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/what-we-do/support-families-and-parents" aria-label="Support Families &amp; Parents">
                                                            Support Families &amp; Parents
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/what-we-do/strengthen-the-social-service-sector" aria-label="Strengthen the Social Service Sector">
                                                            Strengthen the Social Service Sector
                                                        </a>
                                                    </li>
                                            </ul>
                                        </li>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Our Services">
                                                <span class="nav-link-text"><span>Our Services</span></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/our-services/directories" aria-label="Directories">
                                                            Directories
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/our-services/e-services" aria-label="E-Services">
                                                            E-Services
                                                        </a>
                                                    </li>
                                            </ul>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link" href="/media-room" aria-label="Media Room"><span class="nav-link-text"><span>Media Room</span></span></a>
                                        </li>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Research &amp; Data">
                                                <span class="nav-link-text"><span>Research &amp; Data</span></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/research-data/research-reports-data" aria-label="Research Report &amp; Data">
                                                            Research Report &amp; Data
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/research-data/research-grants" aria-label="Research Grants">
                                                            Research Grants
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/what-we-do/Research-Conferences-Forums-Networks" aria-label="Research Conferences, Forums &amp; Networks">
                                                            Research Conferences, Forums &amp; Networks
                                                        </a>
                                                    </li>
                                            </ul>
                                        </li>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Join Us">
                                                <span class="nav-link-text"><span>Join Us</span></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/join-us/volunteer-with-msfcare-network" aria-label="Volunteer with MSFCare Network">
                                                            Volunteer with MSFCare Network
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/join-us/jobs-careers" aria-label="Jobs &amp; Careers">
                                                            Jobs &amp; Careers
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="/join-us/scholarships-internships" aria-label="Scholarships &amp; Internships">
                                                            Scholarships &amp; Internships
                                                        </a>
                                                    </li>
                                            </ul>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link" href="/events" aria-label="Events"><span class="nav-link-text"><span>Events</span></span></a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link" href="/AskMSF" aria-label="Ask MSF"><span class="nav-link-text"><span>Ask MSF</span></span></a>
                                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>
</header><div class="searchbar">
    <div class="container-fluid">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search our website" id="searchbarWidgetSearchInput" data-search="searchbarWidgetSearchInput">
            <button class="btn btn-search" type="button" id="searchbarWidgetBtnSearch" aria-label="Search">
                <span>
                    <em class="fa-solid fa-search fa-sm"></em>
                    Search
                </span>
            </button>
        </div>
    </div>
</div>

    </div>
    <div id="Content_T5901EA2B001_Col01" class="sf_colsIn" data-sf-element="Content" data-placeholder-label="Content">
<section class="volunteer-home"><div id="body-wrapper" bis_skin_checked="1"><div class="quick-link" bis_skin_checked="1"><nav class="navbar navbar-expand-lg"><button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler__text">Explore MSFCare Network</span>
				<span class="icn-nav-expand"></span><span class="icn-nav-collapse"></span></button><div class="collapse navbar-collapse" id="navbarNav" bis_skin_checked="1"><ul class="navbar-nav"><li class="nav-item active"><a class="nav-link" href="/what-we-do/volunteer/home" data-sf-ec-immutable="">Home
						</a>
 </li><li class="nav-item"><a class="nav-link" href="/what-we-do/volunteer/about-us" data-sf-ec-immutable="">About Us
						</a>
 </li><li class="nav-item"><a class="nav-link" href="/what-we-do/volunteer/personalise-your-volunteering" data-sf-ec-immutable="">Personalise Your Volunteering
						</a>
 </li><li class="nav-item"><a class="nav-link" href="/what-we-do/volunteer/find-causes" data-sf-ec-immutable="">Find Causes
						</a>
 </li><li class="nav-item"><a class="nav-link" href="/what-we-do/volunteer/our-stories" data-sf-ec-immutable="">Our Stories
						</a>
 </li><li class="nav-item"><a class="nav-link" href="/ycvolunteers" data-sf-ec-immutable="">Celebrating Volunteers
						</a>
 </li></ul></div></nav></div><div class="masthead wide-container" bis_skin_checked="1"><div class="masthead__box" bis_skin_checked="1"><div class="masthead__image" bis_skin_checked="1"><div class="masthead__image-container js-masthead-slide slick-initialized slick-slider" bis_skin_checked="1"><button class="slick-prev slick-arrow" aria-label="Previous" type="button" style="">Previous</button><div class="slick-list draggable"><div class="slick-track" style="opacity: 1; width: 1380px;"><div class="masthead__item slick-slide" data-slick-index="0" aria-hidden="true" tabindex="-1" bis_skin_checked="1" style="width: 276px; position: relative; left: 0px; top: 0px; z-index: 998; opacity: 0; transition: opacity 500ms linear 0s;"><img src="/ResourcePackages/Msf/assets/img/volunteer/Vulnerable-in-the-Community-Network-home.jpg" class="masthead__photo" alt="" data-sf-ec-immutable=""></div><div class="masthead__item slick-slide slick-current slick-active" data-slick-index="1" aria-hidden="false" tabindex="0" bis_skin_checked="1" style="width: 276px; position: relative; left: -276px; top: 0px; z-index: 999; opacity: 1;"><img src="/ResourcePackages/Msf/assets/img/volunteer/comlink-home.png" class="masthead__photo" alt="" data-sf-ec-immutable=""></div><div class="masthead__item slick-slide" data-slick-index="2" aria-hidden="true" tabindex="-1" bis_skin_checked="1" style="width: 276px; position: relative; left: -552px; top: 0px; z-index: 998; opacity: 0;"><img src="/ResourcePackages/Msf/assets/img/volunteer/peers-home.png" class="masthead__photo" alt="" data-sf-ec-immutable=""></div><div class="masthead__item slick-slide" data-slick-index="3" aria-hidden="true" tabindex="-1" bis_skin_checked="1" style="width: 276px; position: relative; left: -828px; top: 0px; z-index: 998; opacity: 0;"><img src="/ResourcePackages/Msf/assets/img/volunteer/rehabilitation-home.png" class="masthead__photo" alt="" data-sf-ec-immutable=""></div><div class="masthead__item slick-slide" data-slick-index="4" aria-hidden="true" tabindex="-1" bis_skin_checked="1" style="width: 276px; position: relative; left: -1104px; top: 0px; z-index: 998; opacity: 0;"><img src="/ResourcePackages/Msf/assets/img/volunteer/image-carousel-2.jpg" class="masthead__photo" alt="" data-sf-ec-immutable=""></div></div></div><button class="slick-next slick-arrow" aria-label="Next" type="button" style="">Next</button></div><div class="masthead__frame" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/frame-1.png" alt="" data-sf-ec-immutable=""><br></div></div><div class="masthead__content" bis_skin_checked="1"><div class="masthead__box-logo" bis_skin_checked="1"><div class="masthead__logo-top" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-msf-masthead.png" alt="" data-sf-ec-immutable=""></div><div class="masthead__logo-bottom" bis_skin_checked="1"><div bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-msf-volunteer.png" alt="" data-sf-ec-immutable=""></div><div style="margin-left:30px;" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-sg-together.png" alt="" width="153" data-sf-ec-immutable=""></div></div></div><div class="masthead__title" bis_skin_checked="1">Because You Care</div><div class="masthead__text" bis_skin_checked="1">If your heart beats for helping those in need and bettering the lives of families, you’ve come to the right place.<br><br>Volunteer with us to nurture and build lives together.
                    </div><div class="masthead__link" bis_skin_checked="1"><a href="/what-we-do/volunteer/about-us" data-sf-ec-immutable=""><span>Learn more about us</span><span class="icn-circle-right"></span></a>
 </div></div></div><div class="masthead__button" bis_skin_checked="1"><a href="/what-we-do/volunteer/personalise-your-volunteering"><button class="masthead__cta" type="button"><div class="masthead__button-title" bis_skin_checked="1"><span class="icn-programmes-finder"></span><span>Personalise Your Volunteering</span>
					</div><div class="masthead__button-text" bis_skin_checked="1">Not sure how to <br data-sf-ec-immutable="">start volunteering?
					</div><span class="icn-arrow-top-left"></span></button></a>
 </div><div class="masthead__button-sticky" bis_skin_checked="1"><a id="myRedirect" href="/what-we-do/volunteer/personalise-your-volunteering" target="_blank" data-sf-ec-immutable=""><button class="masthead__cta" type="button"><div class="masthead__button-title" bis_skin_checked="1"><span class="icn-programmes-finder"></span><span>Personalise Your Volunteering</span>
					</div></button></a>
 </div></div><div class="brand-video" bis_skin_checked="1"><div class="brand-video__container js-video-cover-container" bis_skin_checked="1"><div class="brand-video__line" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/divider-video.png" alt="" data-sf-ec-immutable=""></div><div class="brand-video__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/explore.png" alt="" data-sf-ec-immutable=""></div><div class="brand-video__background js-video-background" data-video="ftSszbLMQ74" bis_skin_checked="1"><iframe class="video-media__player" id="ftSszbLMQ74" frameborder="0" allowfullscreen="1" title="MSFCare Network - Volunteering. It's a Work of Heart" width="640" height="360" src="https://www.youtube.com/embed/ftSszbLMQ74?autoplay=1&amp;mute=1&amp;playsinline=1&amp;loop=1&amp;modestbranding=1&amp;playlist=ftSszbLMQ74&amp;disablekb=1&amp;fs=0&amp;showinfo=0&amp;controls=0&amp;iv_load_policy=3&amp;enablejsapi=1&amp;widgetid=1" data-gtm-yt-inspected-1_19="true" data-gtm-yt-inspected-32011255_20="true" data-gtm-yt-inspected-18="true" data-gtm-yt-inspected-15="true" data-gtm-yt-inspected-6="true"></iframe><div class="brand-video__background-mobile" bis_skin_checked="1"></div><br></div><div class="brand-video__content wide-container" bis_skin_checked="1"><div class="brand-video__title" bis_skin_checked="1">Volunteering. It’s a Work of Heart
                    </div><div class="brand-video__text" data-bs-toggle="modal" data-bs-target="#modalVideo" bis_skin_checked="1"><span>Watch the video</span><span class="icn-play"></span></div></div><div class="brand-video__overlay" bis_skin_checked="1"><br></div></div><div class="modal brand-video__modal fade" id="modalVideo" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display:none;z-index:1100;" bis_skin_checked="1"><div class="modal-dialog modal-lg modal-dialog-centered" bis_skin_checked="1"><div class="modal-content" bis_skin_checked="1"><div class="modal-video__container" bis_skin_checked="1"><button type="button" class="modal-video__close close" data-bs-dismiss="modal" aria-label="Close"><span aria-hidden="true" class="icn-close"></span></button><div class="overlay-video__player" id="ftSszbLMQ74_modal" bis_skin_checked="1"></div></div></div></div></div></div><div class="ways-difference-with-check js-ways-difference wide-container ways-difference-with-check__home is-home-page" data-url-api="http://localhost:8081/get-card-listing2" data-image-path="~/ResourcePackages/Msf/assets/img/volunteer/" data-causes-url="/what-we-do/volunteer/find-causes" bis_skin_checked="1"><div class="ways-difference-with-check__heading" bis_skin_checked="1">Ways You Can Make a Difference
            </div><div class="ways-difference-with-check__title" bis_skin_checked="1">Select your preferred cause(s).
            </div><label class="ways-difference-with-check__title-box" data-bs-toggle="collapse" data-bs-target="#multiCollapse" aria-expanded="false"><div class="ways-difference-with-check__title-mb" bis_skin_checked="1">Select your cause
			</div><input type="checkbox" id="select-check" class="select-checkbox"><div class="select-click" bis_skin_checked="1"></div></label>
 <div class="ways-difference-with-check__items js-ways-difference-select collapse multi-collapse" id="multiCollapse" bis_skin_checked="1"><label class="ways-difference-with-check__item-wrap"><input type="checkbox" id="checkbox-1-1" value="give" class="regular-checkbox js-btn-checkbox"><div class="ways-difference-with-check__item" bis_skin_checked="1"><img class="ways-difference-with-check__image" src="/ResourcePackages/Msf/assets/img/volunteer/gec.png" alt="" data-sf-ec-immutable=""><div class="ways-difference-with-check__desc" bis_skin_checked="1">Giving Every Child a Good Start
					</div></div><div class="control-me" bis_skin_checked="1"></div></label>
 <label class="ways-difference-with-check__item-wrap">
				<input type="checkbox" id="checkbox-1-2" value="transform" class="regular-checkbox js-btn-checkbox"><div class="ways-difference-with-check__item" bis_skin_checked="1"><img class="ways-difference-with-check__image" src="/ResourcePackages/Msf/assets/img/volunteer/tlta.png" alt="" data-sf-ec-immutable=""><div class="ways-difference-with-check__desc" bis_skin_checked="1">Transforming Lives of Those At R​isk
					</div></div><div class="control-me" bis_skin_checked="1"></div></label>
 <label class="ways-difference-with-check__item-wrap">
				<input type="checkbox" id="checkbox-1-3" value="help" class="regular-checkbox js-btn-checkbox"><div class="ways-difference-with-check__item" bis_skin_checked="1"><img class="ways-difference-with-check__image" src="/ResourcePackages/Msf/assets/img/volunteer/htn.png" alt="" data-sf-ec-immutable=""><div class="ways-difference-with-check__desc" bis_skin_checked="1">Helping Those <br>In Need
					</div></div><div class="control-me" bis_skin_checked="1"></div></label>
 <label class="ways-difference-with-check__item-wrap">
				<input type="checkbox" id="checkbox-1-4" value="strength" class="regular-checkbox js-btn-checkbox"><div class="ways-difference-with-check__item" bis_skin_checked="1"><img class="ways-difference-with-check__image" src="/ResourcePackages/Msf/assets/img/volunteer/sf.png" alt="" data-sf-ec-immutable=""><div class="ways-difference-with-check__desc" bis_skin_checked="1">Strengthening Families
					</div></div><div class="control-me" bis_skin_checked="1"></div></label>
 <label class="ways-difference-with-check__item-wrap">
				<input type="checkbox" id="checkbox-1-5" value="build" class="regular-checkbox js-btn-checkbox"><div class="ways-difference-with-check__item" bis_skin_checked="1"><img class="ways-difference-with-check__image" src="/ResourcePackages/Msf/assets/img/volunteer/bis.png" alt="" data-sf-ec-immutable=""><div class="ways-difference-with-check__desc" bis_skin_checked="1">Building an Inclusive and Fair Society
					</div></div><div class="control-me" bis_skin_checked="1"></div></label>
 <div class="ways-difference-with-check__select js-show-all" bis_skin_checked="1">Select all causes
                </div></div></div><div class="wide-container mb-component-lg" bis_skin_checked="1"><div class="search-personal js-search-personal mb-component search-personal__home is-url-parameter" data-image-path="~/ResourcePackages/Msf/assets/img/volunteer/" data-url-api="http://localhost/get-card-listing" data-programme-finder-url="/what-we-do/volunteer/personalise-your-volunteering" bis_skin_checked="1"><div class="search-personal__left" bis_skin_checked="1"><h3 class="search-personal__title-inside"><span style="font-size:30px;">Personalise your volunteering</span>
 </h3><div class="search-personal__top" bis_skin_checked="1"><div class="select2-search" bis_skin_checked="1"><div class="select2-search__item" bis_skin_checked="1"><span>I am born in
								<span class="select2-search__item-years">
									<div class="option-select2 filter-item-select-container js-filter-item-select-container" data-jqp-component="select-search" data-type="year" bis_skin_checked="1"><select class="js-filter-item-select property-search__dropdown select2-hidden-accessible" data-placeholder="year of birth" data-select2-id="1" tabindex="-1" aria-hidden="true"><optgroup class="complex-search__dropdown-group" aria-explore="true"><option value="2009" data-text="2009" data-select2-id="3">2009
												</option>
												<option value="2008" data-text="2008">2008
												</option>
												<option value="2007" data-text="2007">2007
												</option>
												<option value="2006" data-text="2006">2006
												</option>
												<option value="2005" data-text="2005">2005
												</option>
												<option value="2004" data-text="2004">2004
												</option>
												<option value="2003" data-text="2003">2003
												</option>
												<option value="2002" data-text="2002">2002
												</option>
												<option value="2001" data-text="2001">2001
												</option>
												<option value="2000" data-text="2000">2000
												</option>
												<option value="1999" data-text="1999">1999
												</option>
												<option value="1998" data-text="1998">1998
												</option>
												<option value="1997" data-text="1997">1997
												</option>
												<option value="1996" data-text="1996">1996
												</option>
												<option value="1995" data-text="1995">1995
												</option>
												<option value="1994" data-text="1994">1994
												</option>
												<option value="1993" data-text="1993">1993
												</option>
												<option value="1992" data-text="1992">1992
												</option>
												<option value="1991" data-text="1991">1991
												</option>
												<option value="1990" data-text="1990">1990
												</option>
												<option value="1989" data-text="1989">1989
												</option>
												<option value="1988" data-text="1988">1988
												</option>
												<option value="1987" data-text="1987">1987
												</option>
												<option value="1986" data-text="1986">1986
												</option>
												<option value="1985" data-text="1985">1985
												</option>
												<option value="1984" data-text="1984">1984
												</option>
												<option value="1983" data-text="1983">1983
												</option>
												<option value="1982" data-text="1982">1982
												</option>
												<option value="1981" data-text="1981">1981
												</option>
												<option value="1980" data-text="1980">1980
												</option>
												<option value="1979" data-text="1979">1979
												</option>
												<option value="1978" data-text="1978">1978
												</option>
												<option value="1977" data-text="1977">1977
												</option>
												<option value="1976" data-text="1976">1976
												</option>
												<option value="1975" data-text="1975">1975
												</option>
												<option value="1974" data-text="1974">1974
												</option>
												<option value="1973" data-text="1973">1973
												</option>
												<option value="1972" data-text="1972">1972
												</option>
												<option value="1971" data-text="1971">1971
												</option>
												<option value="1970" data-text="1970">1970
												</option>
												<option value="1969" data-text="1969">1969
												</option>
												<option value="1968" data-text="1968">1968
												</option>
												<option value="1967" data-text="1967">1967
												</option>
												<option value="1966" data-text="1966">1966
												</option>
												<option value="1965" data-text="1965">1965
												</option>
												<option value="1964" data-text="1964">1964
												</option>
												<option value="1963" data-text="1963">1963
												</option>
												<option value="1962" data-text="1962">1962
												</option>
												<option value="1961" data-text="1961">1961
												</option>
												<option value="1960" data-text="1960">1960
												</option>
												<option value="1959" data-text="1959">1959
												</option>
												<option value="1958" data-text="1958">1958
												</option>
												<option value="1957" data-text="1957">1957
												</option>
												<option value="1956" data-text="1956">1956
												</option>
												<option value="1955" data-text="1955">1955
												</option>
												<option value="1954" data-text="1954">1954
												</option>
												<option value="1953" data-text="1953">1953
												</option>
												<option value="1952" data-text="1952">1952
												</option>
												<option value="1951" data-text="1951">1951
												</option>
												<option value="1950" data-text="1950">1950
												</option>
												<option value="1949" data-text="1949">1949
												</option>
												<option value="1948" data-text="1948">1948
												</option>
												<option value="1947" data-text="1947">1947
												</option>
												<option value="1946" data-text="1946">1946
												</option>
												<option value="1945" data-text="1945">1945
												</option>
												<option value="1944" data-text="1944">1944
												</option>
												<option value="1943" data-text="1943">1943
												</option>
												<option value="1942" data-text="1942">1942
												</option>
												<option value="1941" data-text="1941">1941
												</option>
												<option value="1940" data-text="1940">1940
												</option>
												<option value="1939" data-text="1939">1939
												</option>
												<option value="1938" data-text="1938">1938
												</option>
												<option value="1937" data-text="1937">1937
												</option>
												<option value="1936" data-text="1936">1936
												</option>
												<option value="1935" data-text="1935">1935
												</option>
												<option value="1934" data-text="1934">1934
												</option>
												<option value="1933" data-text="1933">1933
												</option>
												<option value="1932" data-text="1932">1932
												</option>
												<option value="1931" data-text="1931">1931
												</option>
												<option value="1930" data-text="1930">1930
												</option>
												<option value="1929" data-text="1929">1929
												</option>
												<option value="1928" data-text="1928">1928
												</option>
												<option value="1927" data-text="1927">1927
												</option>
												<option value="1926" data-text="1926">1926
												</option>
												<option value="1925" data-text="1925">1925
												</option>
												<option value="1924" data-text="1924">1924
												</option>
												<option value="1923" data-text="1923">1923
												</option>
											</optgroup>
										</select><span class="select2 select2-container select2-container--default" dir="ltr" data-select2-id="1" style="width: 100%;"><span class="selection"><span class="select2-selection select2-selection--single is-arrow-shown js-select2-selection" role="combobox" aria-haspopup="true" aria-expanded="false" tabindex="-1" aria-disabled="false" aria-labelledby="select2-jsj7-container"><span class="select2-selection__rendered" id="select2-jsj7-container" role="textbox" aria-readonly="true"><span class="select2-selection__placeholder"><span>
                <span class="select2-selection__count">year of birth</span>
              </span></span></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span></span></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>
										
										<div class="container-dropdown js-container-dropdown" bis_skin_checked="1"><div class="dropdown-box js-dropdown-box" bis_skin_checked="1"></div></div></div></span> .
                                </span>
 <span class="select2-search__item-cause">
								I care about
								<span class="select2-search__item-select2">
									<span>
										<div class="option-select2 filter-item-select-container js-filter-item-select-container" data-jqp-component="select-search" data-type="cause" bis_skin_checked="1"><select class="js-filter-item-select property-search__dropdown select2-hidden-accessible" data-placeholder="these causes" multiple="" data-entity-name="cause" data-entity-name-plural="causes" data-select2-id="4" tabindex="-1" aria-hidden="true"><optgroup class="complex-search__dropdown-group" aria-explore="true"><option value="all" data-text="Any cause">Any cause
													</option>
													<option value="low" data-text="Lower-income children/families">Lower-income
														children/families
													</option>
													<option value="youth" data-text="Youth-in-need">Youth-in-need
													</option>
													<option value="helping" data-text="Helping abused/neglected children and adults">Helping abused/neglected
														children and adults
													</option>
													<option value="family" data-text="Family unity/bonding">Family unity/bonding
													</option>
													<option value="person" data-text="Persons with Disabilities/Special needs">Persons with
														Disabilities/Special
														needs
													</option>
												</optgroup>
											</select><span class="select2 select2-container select2-container--default" dir="ltr" data-select2-id="2" style="width: 1px;"><span class="selection"><span class="select2-selection select2-selection--multiple is-arrow-shown" role="combobox" aria-haspopup="true" aria-expanded="false" tabindex="-1" aria-disabled="false"><ul class="select2-selection__rendered"><li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" placeholder="these causes" readonly="readonly" style="width: 132.688px;"><span class="show-text js-show-text">these causes</span></li></ul></span></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>
											
											<div class="container-dropdown js-container-dropdown" bis_skin_checked="1"><div class="dropdown-box js-dropdown-box" bis_skin_checked="1"></div></div></div></span>.</span>
 </span>
 </div><div class="select2-search__item" bis_skin_checked="1">I would like to help through
                                <span class="select2-search__item-select2">
								<span>
									<div class="option-select2 filter-item-select-container js-filter-item-select-container" data-jqp-component="select-search" data-type="way" bis_skin_checked="1"><select class="js-filter-item-select property-search__dropdown select2-hidden-accessible" data-placeholder="these ways" multiple="" data-entity-name="way" data-entity-name-plural="ways" data-select2-id="6" tabindex="-1" aria-hidden="true"><optgroup class="complex-search__dropdown-group" aria-explore="true"><option value="all" data-text="Any way">Any way
												</option>
												<option value="bef" data-text="Befriending">Befriending
												</option>
												<option value="out" data-text="Outreach">Outreach
												</option>
												<option value="coach" data-text="Coaching &amp; Mentorship">Coaching &amp; Mentorship
												</option>
												<option value="design" data-text="Design &amp; Creative Development">Design &amp; Creative
													Development
												</option>
												<option value="photo" data-text="Photography &amp; Videography">Photography &amp;
													Videography
												</option>
												<option value="event" data-text="Event/Programme Support">Event/Programme Support
												</option>
												<option value="bil" data-text="Bilingual/Dialect Speaking">Bilingual/Dialect Speaking
												</option>
												<option value="lang" data-text="Language Translation">Language Translation
												</option>
												<option value="parent" data-text="Parenting">Parenting
												</option>
											</optgroup>
										</select><span class="select2 select2-container select2-container--default" dir="ltr" data-select2-id="3" style="width: 1px;"><span class="selection"><span class="select2-selection select2-selection--multiple is-arrow-shown" role="combobox" aria-haspopup="true" aria-expanded="false" tabindex="-1" aria-disabled="false"><ul class="select2-selection__rendered"><li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" placeholder="these ways" readonly="readonly" style="width: 115.875px;"><span class="show-text js-show-text">these ways</span></li></ul></span></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>
										
										<div class="container-dropdown js-container-dropdown" bis_skin_checked="1"><div class="dropdown-box js-dropdown-box" bis_skin_checked="1"></div></div></div></span>.</span>
 </div></div></div><div class="search-personal__bottom" bis_skin_checked="1"><div class="search-personal__button" bis_skin_checked="1"><button class="cta-button js-btn-search" type="button"><span class="cta-button__icon icn-search"></span><span class="cta-button__text">Personalise now</span>
						</button></div><div class="search-personal__cta" bis_skin_checked="1"><button class="cta-text js-show-all-programmes" type="button"><span class="cta-text__icon icn-reset"></span><span>Show all programmes</span>
						</button></div></div></div><div class="search-personal__right" bis_skin_checked="1"><div class="search-personal__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/image-search.png" alt="Personal image" data-sf-ec-immutable=""></div></div></div></div><div class="carousel" bis_skin_checked="1"><div class="carousel__box wide-container" bis_skin_checked="1"><div class="carousel__box-frame" bis_skin_checked="1"><div bis_skin_checked="1"></div><div class="carousel__frame-wrapper" bis_skin_checked="1"><div class="carousel__frame" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/frame-2.png" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__title" bis_skin_checked="1" style="top: 77px;">Our Stories</div><div class="carousel__container js-carousel slick-initialized slick-slider slick-dotted" bis_skin_checked="1"><button class="carousel__button carousel__button-previous slick-arrow slick-disabled" type="button" aria-disabled="true" style=""><span class="icn-arrow-left"></span></button><div class="slick-list draggable"><div class="slick-track" style="opacity: 1; width: 4386px;"><div class="carousel__item slick-slide slick-current slick-active" data-slick-index="0" aria-hidden="false" tabindex="0" role="tabpanel" id="slick-slide10" aria-describedby="slick-slide-control10" bis_skin_checked="1" style="width: 731px; position: relative; left: 0px; top: 0px; z-index: 999; opacity: 1;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Meet Samantha Claire Bernard, a friend to rough sleepers and the homeless.
                                    <br><br>Samantha shares how her first outreach with ‘Night Missions’ was an eye-opening experience. Learn how she found joy through befriending the homeless and rough sleepers.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.facebook.com/MSFSingapore/posts/281385220690636" target="_blank" tabindex="0" data-sf-ec-immutable=""><span>Check out her story</span>
									<span class="icn-circle-right"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/samantha.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__item slick-slide" data-slick-index="1" aria-hidden="true" tabindex="-1" role="tabpanel" id="slick-slide11" aria-describedby="slick-slide-control11" bis_skin_checked="1" style="width: 731px; position: relative; left: -731px; top: 0px; z-index: 998; opacity: 0;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Say hi to Evelyn Lee, who helps families hit by COVID-19. <br><br>When COVID-19 cases rose and more families became affected, Evelyn knew she had to play her part. Watch how she brought relief by volunteering at the
                                    Social Service Office @ Ang Mo Kio.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.facebook.com/MSFSingapore/videos/4277143465635731/" target="_blank" tabindex="-1" data-sf-ec-immutable=""><span>Check out her story</span>
									<span class="icn-play"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/evelyn.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__item slick-slide" data-slick-index="2" aria-hidden="true" tabindex="-1" role="tabpanel" id="slick-slide12" aria-describedby="slick-slide-control12" bis_skin_checked="1" style="width: 731px; position: relative; left: -1462px; top: 0px; z-index: 998; opacity: 0;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Meet Crystal Choy, who helps older folks through tech.
                                    <br><br>Crystal learnt more about the challenges faced by older residents who were not digitally fluent, when she volunteered at the Social Services Office @ Bukit Merah. Learn how she stepped forward to help with
                                    COVID-19 Support Grant applications.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.facebook.com/155387247827735/photos/bc.Abo16pscscuH0DiwzjLKKqMCN90LXDKtgugHUzzoa9FitoB416pcyZihxkqg99n4Eq4m6NAJyIPlq55S_nnvHeTQz_J_fR-6NcFCWBLYvQoz5ewcRv3n-KEgZ3pni977WdWbzt6MyxYIFCWV-PlyCZwsf99gTI7W-oGwxVa8MYb6nA/3355706631129098/?opaqueCursor=AbpKbQAT41-6ra34GqbSyikSICj3J4acrqjCxOUkXRQHB36ECtmDZ_YiokEffm34qYmpYms2ipkjZeAWXRXVH4-P9V2d7d-otSH4pQMkFGLaUzeiXO_fd4tdU6ct6vp--oR5ciycOa_Nff0E3BdeNDdVRbQo7YvlZHBKQtt6VAjudP5s4cX0KM2dOVX0Xy8WWu58XAixpWRV3Og-OhTcE9xzbhcc49XBHOuiv0OE9gHx9lbYHm9ipWYYRt44hLg1Et64Y4uJyUXSRT9CN8RzVFS_btRHY3vbbQAvHY4jb4sEznuyW3ja1nFns5eD0qcVYSfrYeUPiOiECISkohA0QYbQuYef9Im6bGwSdKvhUfCSB0gfYHpVkuz8xu2gkA819NnZPBkgurEShUrHBR_29BkC8TP0S58H4exgTHOfKO03-MKhxwl9ZtVMmI1PTlPFw-7nun2z7AUnoA7Cv4VUD8ddfzDUg8CsNHLBpUP_5NlDrnMYcjM8LhC-C-J8sXtok4y2ucxpWY8I3Kmy8WWQkYL1jnmlSFJTNBUbc-35IJDV0I0v3v_T5zku6gNSiARuchht3vMoyhuiD1agVS4tNaYdVP4u1enZXUw6iR6nUrW7BA" target="_blank" tabindex="-1" data-sf-ec-immutable=""><span>Let’s meet her</span>
									<span class="icn-circle-right"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/crystal.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__item slick-slide" data-slick-index="3" aria-hidden="true" tabindex="-1" role="tabpanel" id="slick-slide13" aria-describedby="slick-slide-control13" bis_skin_checked="1" style="width: 731px; position: relative; left: -2193px; top: 0px; z-index: 998; opacity: 0;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Say hi to Shawn Dominic Wong, a KidSTART volunteer.
                                    <br><br>One of his favourite moments was helping a family “spark joy” with a clutter-free home, so the children could have a better environment to learn and grow.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.kidstart.sg/be-a-volunteer/" target="_blank" tabindex="-1" data-sf-ec-immutable=""><span>Learn More</span>
									<span class="icn-play"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/shawn.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__item slick-slide" data-slick-index="4" aria-hidden="true" tabindex="-1" role="tabpanel" id="slick-slide14" aria-describedby="slick-slide-control14" bis_skin_checked="1" style="width: 731px; position: relative; left: -2924px; top: 0px; z-index: 998; opacity: 0;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Meet Charlene and Fiona, big sisters to lower-income kids. <br><br>Despite their busy day jobs, our ComLink volunteers find time to provide care and support to a single mum and her young children.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.facebook.com/MSFSingapore/posts/237402701755555" target="_blank" tabindex="-1" data-sf-ec-immutable=""><span>Check out their story</span>
									<span class="icn-circle-right"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/charlenefiona.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div><div class="carousel__item slick-slide" data-slick-index="5" aria-hidden="true" tabindex="-1" role="tabpanel" id="slick-slide15" aria-describedby="slick-slide-control15" bis_skin_checked="1" style="width: 731px; position: relative; left: -3655px; top: 0px; z-index: 998; opacity: 0;"><div class="carousel__wrapper" bis_skin_checked="1"><div class="carousel__content" bis_skin_checked="1"><div class="carousel__text" bis_skin_checked="1">Say hello to foster parents Mdm Sarimah Binte Amat and Mr Appathi Bin Ahmad.
                                    <br><br>Foster mother Mdm Sarimah brings foster families in her neighbourhood together for friendship and support. Find out what inspires her to do so.
                                </div><div class="carousel__link" bis_skin_checked="1"><a href="https://www.facebook.com/permalink.php?story_fbid=4680103158689432&amp;id=155387247827735&amp;__cft__%5b0%5d=AZV4InZzYU8sBAxwmtQusAP5VZ9zI7dO8NzpGwuICRzU9w7IEuRt9b0A9iP6AOHuIHTgCn8gGEva0nNoHJRMb2G6EeLTi7JZxppSip_ltOJsI0vvMDpWfKT3YdP63clvM5Y&amp;__tn__=%2cO%2cP-R" target="_blank" tabindex="-1" data-sf-ec-immutable=""><span>Let’s meet her</span>
									<span class="icn-circle-right"></span></a>
 </div></div><div class="carousel__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/sarimah.png" class="carousel__photo" alt="" data-sf-ec-immutable=""></div></div></div></div></div><button class="carousel__button carousel__button-next slick-arrow" type="button" aria-disabled="false" style=""><span class="icn-arrow-right"></span></button><ul class="slick-dots" role="tablist" style=""><li class="slick-active" role="presentation"><button type="button" role="tab" id="slick-slide-control10" aria-controls="slick-slide10" aria-label="1 of 6" tabindex="0" aria-selected="true">1</button></li><li role="presentation"><button type="button" role="tab" id="slick-slide-control11" aria-controls="slick-slide11" aria-label="2 of 6" tabindex="-1">2</button></li><li role="presentation"><button type="button" role="tab" id="slick-slide-control12" aria-controls="slick-slide12" aria-label="3 of 6" tabindex="-1">3</button></li><li role="presentation"><button type="button" role="tab" id="slick-slide-control13" aria-controls="slick-slide13" aria-label="4 of 6" tabindex="-1">4</button></li><li role="presentation"><button type="button" role="tab" id="slick-slide-control14" aria-controls="slick-slide14" aria-label="5 of 6" tabindex="-1">5</button></li><li role="presentation"><button type="button" role="tab" id="slick-slide-control15" aria-controls="slick-slide15" aria-label="6 of 6" tabindex="-1">6</button></li></ul></div><div class="carousel__button-box" bis_skin_checked="1"><br></div></div></div><div class="mb-component-lg" bis_skin_checked="1"><div class="image-text wide-container" bis_skin_checked="1"><div class="image-text__box" bis_skin_checked="1"><div class="image-text__image" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/celebrate-volunteers.png" class="image-text__photo" alt="" data-sf-ec-immutable=""><div class="image-text__frame" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/frame-1.png" alt="" data-sf-ec-immutable=""></div></div><div class="image-text__content" bis_skin_checked="1"><div class="image-text__title" bis_skin_checked="1">Celebrating Our Volunteers
                        </div><div class="image-text__text" bis_skin_checked="1">Our MSF Volunteer and Partner Awards honour the passion and dedication of our volunteers and partners. Find out more about those who join hands with us to nurture and build lives together.
                        </div><div class="image-text__link" bis_skin_checked="1"><a href="/events/msf-volunteer-and-partner-awards-2024" target="_blank" data-sf-ec-immutable=""><span>Meet our winners</span><span class="icn-circle-right"></span></a>
 </div></div></div></div></div><div class="divider" bis_skin_checked="1"></div><div class="page-footer" bis_skin_checked="1"><div class="footer__top wide-container" bis_skin_checked="1"><div class="footer__image" bis_skin_checked="1"><div class="col-12 logo-0" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-msf-care.png" alt="" data-sf-ec-immutable=""></div><div class="col-12 logo-1" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-sg-care.png" alt="" data-sf-ec-immutable=""></div><div class="col-12 logo-2" bis_skin_checked="1"><img src="/ResourcePackages/Msf/assets/img/volunteer/logo-sg-together.png" alt="" data-sf-ec-immutable=""></div></div><div class="footer__top-content" bis_skin_checked="1"><div class="footer__top-mail" bis_skin_checked="1"><span>Have feedback/questions? Email us at</span>
 <span>
						<a href="mailto:MSFcarenetwork@msf.gov.sg" target="_blank">MSFCareNetwork@msf.gov.sg</a>
					</span>
 </div></div></div></div></div></section>














    </div>
</div> <div class="sharethis-inline-share-buttons"></div> 


<footer class="sgds footer">
    <section class="footer-top">
        <div class="container-fluid">
            <div class="row footer-header">
                <div class="footer-title">
                    Ministry of Social and Family Development
                </div>
            </div>

            <div class="row footer-contact-links">
                <div class="col-sm-12">
                    <div class="d-flex flex-column flex-lg-row gap-20 gap-lg-0 justify-content-lg-end">
                        <div class="d-flex justify-content-lg-end">
                            <ul class="d-flex flex-column flex-lg-row gap-lg-40 contact-links">
                                        <li><a class="" href="/contact-us-feedback" aria-label="Contact Us / Feedback">Contact Us / Feedback</a></li>
                                        <li><a class="not-first-page" href="/faqs" aria-label="FAQs">FAQs</a></li>
                            </ul>
                        </div>
                        <div class="d-flex align-items-lg-center justify-content-lg-end">
                            <ul class="d-flex social-links">
                                <li>
                                    <a href="https://www.facebook.com/MSFSingapore/" aria-label="facebook">
                                        <em class="fa-brands fa-square-facebook"></em>
                                    </a>
                                </li>
                                <li>
                                    <a href="https://www.instagram.com/msfcares/" aria-label="instagram">
                                        <em class="fa-brands fa-instagram"></em>
                                    </a>
                                </li>
                                <li>
                                    <a href="https://t.me/msfcares" aria-label="telegram">
                                        <em class="fa-brands fa-telegram"></em>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="footer-bottom">
        <div class="container-fluid">
            <hr class="footer-divider">
            <div class="row footer-mandatory-links">
                <div class="col-12 col-lg-8 col-xl-9">
                    <ul class="footer-nav-list">
                                <li class="footer-nav-item">
                                    <a class="footer-nav-links " href="/report-vulnerability" rel="noopener" aria-label="Report Vulnerability

">Report Vulnerability

</a>
                                </li>
                                <li class="footer-nav-item">
                                    <a class="footer-nav-links not-first-page" href="/privacy-statement" rel="noopener" aria-label="Privacy Statement">Privacy Statement</a>
                                </li>
                                <li class="footer-nav-item">
                                    <a class="footer-nav-links not-first-page" href="/terms-of-use" rel="noopener" aria-label="Terms of Use&nbsp;">Terms of Use&nbsp;</a>
                                </li>
                                <li class="footer-nav-item">
                                    <a class="footer-nav-links not-first-page" href="/sitemap" rel="noopener" aria-label="Sitemap">Sitemap</a>
                                </li>
                                <li class="footer-nav-item">
                                    <a class="footer-nav-links not-first-page" href="/accessibility-statement" rel="noopener" aria-label="Accessibility Statement">Accessibility Statement</a>
                                </li>
                    </ul>
                </div>
                <div class="col-12 col-lg footer-copyrights">
                    <div class="d-flex justify-content-lg-end text-lg-end">
                        © 2024 Government of Singapore<br>
                        Last updated 07 Mar 2024
                    </div>
                </div>
            </div>
        </div>
    </section>
</footer>



 <div class="accessibility-sidebar"> <div class="btn-group-vertical btn-group-sm" role="group" aria-label="Accessibility Sidebar"> <button type="button" class="btn btn-accessibility btn-notice" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-custom-class="custom-tooltip" title="" aria-label="Show/Hide Notice" data-bs-original-title="Show/Hide Notice"> <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M10 0C8.02219 0 6.08879 0.58649 4.4443 1.6853C2.79981 2.78412 1.51809 4.3459 0.761209 6.17317C0.00433284 8.00043 -0.193701 10.0111 0.192152 11.9509C0.578004 13.8907 1.53041 15.6725 2.92894 17.0711C4.32746 18.4696 6.10929 19.422 8.0491 19.8079C9.98891 20.1937 11.9996 19.9957 13.8268 19.2388C15.6541 18.4819 17.2159 17.2002 18.3147 15.5557C19.4135 13.9112 20 11.9778 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7363 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0ZM10 18C8.41775 18 6.87104 17.5308 5.55544 16.6518C4.23985 15.7727 3.21447 14.5233 2.60897 13.0615C2.00347 11.5997 1.84504 9.99113 2.15372 8.43928C2.4624 6.88743 3.22433 5.46197 4.34315 4.34315C5.46197 3.22433 6.88743 2.4624 8.43928 2.15372C9.99113 1.84504 11.5997 2.00346 13.0615 2.60896C14.5233 3.21447 15.7727 4.23984 16.6518 5.55544C17.5308 6.87103 18 8.41775 18 10C18 12.1217 17.1572 14.1566 15.6569 15.6569C14.1566 17.1571 12.1217 18 10 18Z"></path> <path d="M10 7C10.5523 7 11 6.55228 11 6C11 5.44772 10.5523 5 10 5C9.44772 5 9 5.44772 9 6C9 6.55228 9.44772 7 10 7Z"></path> <path d="M10 8C9.73478 8 9.48043 8.10536 9.29289 8.29289C9.10536 8.48043 9 8.73478 9 9V14C9 14.2652 9.10536 14.5196 9.29289 14.7071C9.48043 14.8946 9.73478 15 10 15C10.2652 15 10.5196 14.8946 10.7071 14.7071C10.8946 14.5196 11 14.2652 11 14V9C11 8.73478 10.8946 8.48043 10.7071 8.29289C10.5196 8.10536 10.2652 8 10 8Z"></path> </svg> </button> <button type="button" class="btn btn-accessibility btn-font-bigger" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-custom-class="custom-tooltip" title="" aria-label="Increase Font Size" data-bs-original-title="Increase Font Size">
                    A+
                </button> <button type="button" class="btn btn-accessibility btn-font-smaller" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-custom-class="custom-tooltip" title="" aria-label="Decrease Font Size" data-bs-original-title="Decrease Font Size">
                    A−
                </button> <button type="button" class="btn btn-accessibility btn-contrast" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-custom-class="custom-tooltip" title="" aria-label="Toggle Colour Contrast" data-bs-original-title="Toggle Colour Contrast"> <em class="fa-solid fa-circle-half-stroke"></em> </button> </div> </div> <div class="back-to-top"> <button class="btn-back-top" aria-label="back to top"> <svg width="16" height="8" viewBox="0 0 16 8" fill="none" xmlns="http://www.w3.org/2000/svg"> <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4826 7.76568C14.8297 8.07811 15.3925 8.07811 15.7396 7.76568C16.0868 7.45326 16.0868 6.94673 15.7396 6.63432L8.62853 0.23424C8.2814 -0.0780799 7.71859 -0.0780799 7.37146 0.23424L0.260266 6.63432C-0.0867557 6.94673 -0.0867557 7.45326 0.260266 7.76567C0.607466 8.07811 1.17031 8.07811 1.51751 7.76567L8 3L14.4826 7.76568Z"></path> </svg> <span>Top</span> </button> </div> <script src="/ResourcePackages/Msf/assets/js/jquery.min.js" type="text/javascript"></script> <script src="/ResourcePackages/Msf/assets/js/jquery-ui.min.js" type="text/javascript"></script> <script src="/ResourcePackages/Msf/assets/js/swiper-bundle.min.js" type="text/javascript"></script> <script src="/ResourcePackages/Msf/assets/js/bootstrap.min.js" type="text/javascript"></script> <script src="/ResourcePackages/Msf/assets/js/default-passive-events.js" type="text/javascript"></script> <script src="/ResourcePackages/Msf/assets/js/search-result.js" type="text/javascript"></script> <script src="https://assets.wogaa.sg/scripts/wogaa.js"></script> <script type="text/javascript" src="/ResourcePackages/Msf/assets/js/sharethis.js#property=648140a26773dd0012e17a9b&amp;product=inline-share-buttons&amp;source=platform" async="async"></script> <script>
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window, document, 'script', 'dataLayer', 'G-7WBNTH91BT');
            </script> <!-- Global site tag (gtag.js) - Google Analytics --> <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-7WBNTH91BT"></script> <script>
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());

              gtag('config', 'G-7WBNTH91BT');
            </script> <script type="module" src="https://cdn.jsdelivr.net/npm/@govtechsg/sgds-web-component/Masthead/index.js"></script> <script src="/ResourcePackages/Msf/assets/js/main.min.js" type="text/javascript"></script> <script type="text/javascript">
/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */
!(function (n) {
	"function" == typeof define && define.amd
		? define(["jquery"], n)
		: "object" == typeof module && module.exports
		? (module.exports = function (e, t) {
				return (
					void 0 === t &&
						(t =
							"undefined" != typeof window
								? require("jquery")
								: require("jquery")(e)),
					n(t),
					t
				);
		  })
		: n(jQuery);
})(function (d) {
	var e = (function () {
			if (d && d.fn && d.fn.select2 && d.fn.select2.amd)
				var e = d.fn.select2.amd;
			var t, n, i, h, o, s, f, g, m, v, y, _, r, a, w, l;
			function b(e, t) {
				return r.call(e, t);
			}
			function c(e, t) {
				var n,
					i,
					r,
					o,
					s,
					a,
					l,
					c,
					u,
					d,
					p,
					h = t && t.split("/"),
					f = y.map,
					g = (f && f["*"]) || {};
				if (e) {
					for (
						s = (e = e.split("/")).length - 1,
							y.nodeIdCompat &&
								w.test(e[s]) &&
								(e[s] = e[s].replace(w, "")),
							"." === e[0].charAt(0) &&
								h &&
								(e = h.slice(0, h.length - 1).concat(e)),
							u = 0;
						u < e.length;
						u++
					)
						if ("." === (p = e[u])) e.splice(u, 1), --u;
						else if (".." === p) {
							if (
								0 === u ||
								(1 === u && ".." === e[2]) ||
								".." === e[u - 1]
							)
								continue;
							0 < u && (e.splice(u - 1, 2), (u -= 2));
						}
					e = e.join("/");
				}
				if ((h || g) && f) {
					for (u = (n = e.split("/")).length; 0 < u; --u) {
						if (((i = n.slice(0, u).join("/")), h))
							for (d = h.length; 0 < d; --d)
								if (
									(r =
										(r = f[h.slice(0, d).join("/")]) &&
										r[i])
								) {
									(o = r), (a = u);
									break;
								}
						if (o) break;
						!l && g && g[i] && ((l = g[i]), (c = u));
					}
					!o && l && ((o = l), (a = c)),
						o && (n.splice(0, a, o), (e = n.join("/")));
				}
				return e;
			}
			function A(t, n) {
				return function () {
					var e = a.call(arguments, 0);
					return (
						"string" != typeof e[0] &&
							1 === e.length &&
							e.push(null),
						s.apply(h, e.concat([t, n]))
					);
				};
			}
			function x(t) {
				return function (e) {
					m[t] = e;
				};
			}
			function D(e) {
				if (b(v, e)) {
					var t = v[e];
					delete v[e], (_[e] = !0), o.apply(h, t);
				}
				if (!b(m, e) && !b(_, e)) throw new Error("No " + e);
				return m[e];
			}
			function u(e) {
				var t,
					n = e ? e.indexOf("!") : -1;
				return (
					-1 < n &&
						((t = e.substring(0, n)),
						(e = e.substring(n + 1, e.length))),
					[t, e]
				);
			}
			function S(e) {
				return e ? u(e) : [];
			}
			return (
				(e && e.requirejs) ||
					(e ? (n = e) : (e = {}),
					(m = {}),
					(v = {}),
					(y = {}),
					(_ = {}),
					(r = Object.prototype.hasOwnProperty),
					(a = [].slice),
					(w = /\.js$/),
					(f = function (e, t) {
						var n,
							i,
							r = u(e),
							o = r[0],
							s = t[1];
						return (
							(e = r[1]),
							o && (n = D((o = c(o, s)))),
							o
								? (e =
										n && n.normalize
											? n.normalize(
													e,
													((i = s),
													function (e) {
														return c(e, i);
													})
											  )
											: c(e, s))
								: ((o = (r = u((e = c(e, s))))[0]),
								  (e = r[1]),
								  o && (n = D(o))),
							{ f: o ? o + "!" + e : e, n: e, pr: o, p: n }
						);
					}),
					(g = {
						require: function (e) {
							return A(e);
						},
						exports: function (e) {
							var t = m[e];
							return void 0 !== t ? t : (m[e] = {});
						},
						module: function (e) {
							return {
								id: e,
								uri: "",
								exports: m[e],
								config:
									((t = e),
									function () {
										return (
											(y && y.config && y.config[t]) || {}
										);
									}),
							};
							var t;
						},
					}),
					(o = function (e, t, n, i) {
						var r,
							o,
							s,
							a,
							l,
							c,
							u,
							d = [],
							p = typeof n;
						if (
							((c = S((i = i || e))),
							"undefined" == p || "function" == p)
						) {
							for (
								t =
									!t.length && n.length
										? ["require", "exports", "module"]
										: t,
									l = 0;
								l < t.length;
								l += 1
							)
								if ("require" === (o = (a = f(t[l], c)).f))
									d[l] = g.require(e);
								else if ("exports" === o)
									(d[l] = g.exports(e)), (u = !0);
								else if ("module" === o) r = d[l] = g.module(e);
								else if (b(m, o) || b(v, o) || b(_, o))
									d[l] = D(o);
								else {
									if (!a.p)
										throw new Error(e + " missing " + o);
									a.p.load(a.n, A(i, !0), x(o), {}),
										(d[l] = m[o]);
								}
							(s = n ? n.apply(m[e], d) : void 0),
								e &&
									(r && r.exports !== h && r.exports !== m[e]
										? (m[e] = r.exports)
										: (s === h && u) || (m[e] = s));
						} else e && (m[e] = n);
					}),
					(t =
						n =
						s =
							function (e, t, n, i, r) {
								if ("string" == typeof e)
									return g[e] ? g[e](t) : D(f(e, S(t)).f);
								if (!e.splice) {
									if (
										((y = e).deps && s(y.deps, y.callback),
										!t)
									)
										return;
									t.splice
										? ((e = t), (t = n), (n = null))
										: (e = h);
								}
								return (
									(t = t || function () {}),
									"function" == typeof n &&
										((n = i), (i = r)),
									i
										? o(h, e, t, n)
										: setTimeout(function () {
												o(h, e, t, n);
										  }, 4),
									s
								);
							}),
					(s.config = function (e) {
						return s(e);
					}),
					(t._defined = m),
					((i = function (e, t, n) {
						if ("string" != typeof e)
							throw new Error(
								"See almond README: incorrect module build, no module name"
							);
						t.splice || ((n = t), (t = [])),
							b(m, e) || b(v, e) || (v[e] = [e, t, n]);
					}).amd = { jQuery: !0 }),
					(e.requirejs = t),
					(e.require = n),
					(e.define = i)),
				e.define("almond", function () {}),
				e.define("jquery", [], function () {
					var e = d || $;
					return (
						null == e &&
							console &&
							console.error &&
							console.error(
								"Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."
							),
						e
					);
				}),
				e.define("select2/utils", ["jquery"], function (o) {
					var r = {};
					function u(e) {
						var t = e.prototype,
							n = [];
						for (var i in t) {
							"function" == typeof t[i] &&
								"constructor" !== i &&
								n.push(i);
						}
						return n;
					}
					(r.Extend = function (e, t) {
						var n = {}.hasOwnProperty;
						function i() {
							this.constructor = e;
						}
						for (var r in t) n.call(t, r) && (e[r] = t[r]);
						return (
							(i.prototype = t.prototype),
							(e.prototype = new i()),
							(e.__super__ = t.prototype),
							e
						);
					}),
						(r.Decorate = function (i, r) {
							var e = u(r),
								t = u(i);
							function o() {
								var e = Array.prototype.unshift,
									t = r.prototype.constructor.length,
									n = i.prototype.constructor;
								0 < t &&
									(e.call(arguments, i.prototype.constructor),
									(n = r.prototype.constructor)),
									n.apply(this, arguments);
							}
							(r.displayName = i.displayName),
								(o.prototype = new (function () {
									this.constructor = o;
								})());
							for (var n = 0; n < t.length; n++) {
								var s = t[n];
								o.prototype[s] = i.prototype[s];
							}
							function a(e) {
								var t = function () {};
								e in o.prototype && (t = o.prototype[e]);
								var n = r.prototype[e];
								return function () {
									return (
										Array.prototype.unshift.call(
											arguments,
											t
										),
										n.apply(this, arguments)
									);
								};
							}
							for (var l = 0; l < e.length; l++) {
								var c = e[l];
								o.prototype[c] = a(c);
							}
							return o;
						});
					function e() {
						this.listeners = {};
					}
					(e.prototype.on = function (e, t) {
						(this.listeners = this.listeners || {}),
							e in this.listeners
								? this.listeners[e].push(t)
								: (this.listeners[e] = [t]);
					}),
						(e.prototype.trigger = function (e) {
							var t = Array.prototype.slice,
								n = t.call(arguments, 1);
							(this.listeners = this.listeners || {}),
								null == n && (n = []),
								0 === n.length && n.push({}),
								(n[0]._type = e) in this.listeners &&
									this.invoke(
										this.listeners[e],
										t.call(arguments, 1)
									),
								"*" in this.listeners &&
									this.invoke(this.listeners["*"], arguments);
						}),
						(e.prototype.invoke = function (e, t) {
							for (var n = 0, i = e.length; n < i; n++)
								e[n].apply(this, t);
						}),
						(r.Observable = e),
						(r.generateChars = function (e) {
							for (var t = "", n = 0; n < e; n++) {
								t += Math.floor(36 * Math.random()).toString(
									36
								);
							}
							return t;
						}),
						(r.bind = function (e, t) {
							return function () {
								e.apply(t, arguments);
							};
						}),
						(r._convertData = function (e) {
							for (var t in e) {
								var n = t.split("-"),
									i = e;
								if (1 !== n.length) {
									for (var r = 0; r < n.length; r++) {
										var o = n[r];
										(o =
											o.substring(0, 1).toLowerCase() +
											o.substring(1)) in i || (i[o] = {}),
											r == n.length - 1 && (i[o] = e[t]),
											(i = i[o]);
									}
									delete e[t];
								}
							}
							return e;
						}),
						(r.hasScroll = function (e, t) {
							var n = o(t),
								i = t.style.overflowX,
								r = t.style.overflowY;
							return (
								(i !== r ||
									("hidden" !== r && "visible" !== r)) &&
								("scroll" === i ||
									"scroll" === r ||
									n.innerHeight() < t.scrollHeight ||
									n.innerWidth() < t.scrollWidth)
							);
						}),
						(r.escapeMarkup = function (e) {
							var t = {
								"\\": "&#92;",
								"&": "&amp;",
								"<": "&lt;",
								">": "&gt;",
								'"': "&quot;",
								"'": "&#39;",
								"/": "&#47;",
							};
							return "string" != typeof e
								? e
								: String(e).replace(
										/[&<>"'\/\\]/g,
										function (e) {
											return t[e];
										}
								  );
						}),
						(r.appendMany = function (e, t) {
							if ("1.7" === o.fn.jquery.substr(0, 3)) {
								var n = o();
								o.map(t, function (e) {
									n = n.add(e);
								}),
									(t = n);
							}
							e.append(t);
						}),
						(r.__cache = {});
					var n = 0;
					return (
						(r.GetUniqueElementId = function (e) {
							var t = e.getAttribute("data-select2-id");
							return (
								null == t &&
									(e.id
										? ((t = e.id),
										  e.setAttribute("data-select2-id", t))
										: (e.setAttribute(
												"data-select2-id",
												++n
										  ),
										  (t = n.toString()))),
								t
							);
						}),
						(r.StoreData = function (e, t, n) {
							var i = r.GetUniqueElementId(e);
							r.__cache[i] || (r.__cache[i] = {}),
								(r.__cache[i][t] = n);
						}),
						(r.GetData = function (e, t) {
							var n = r.GetUniqueElementId(e);
							return t
								? r.__cache[n] && null != r.__cache[n][t]
									? r.__cache[n][t]
									: o(e).data(t)
								: r.__cache[n];
						}),
						(r.RemoveData = function (e) {
							var t = r.GetUniqueElementId(e);
							null != r.__cache[t] && delete r.__cache[t],
								e.removeAttribute("data-select2-id");
						}),
						r
					);
				}),
				e.define(
					"select2/results",
					["jquery", "./utils"],
					function (h, f) {
						function i(e, t, n) {
							(this.$element = e),
								(this.data = n),
								(this.options = t),
								i.__super__.constructor.call(this);
						}
						return (
							f.Extend(i, f.Observable),
							(i.prototype.render = function () {
								var e = h(
									'<ul class="select2-results__options" role="listbox"></ul>'
								);
								return (
									this.options.get("multiple") &&
										e.attr("aria-multiselectable", "true"),
									(this.$results = e)
								);
							}),
							(i.prototype.clear = function () {
								this.$results.empty();
							}),
							(i.prototype.displayMessage = function (e) {
								var t = this.options.get("escapeMarkup");
								this.clear(), this.hideLoading();
								var n = h(
										'<li role="alert" aria-live="assertive" class="select2-results__option"></li>'
									),
									i = this.options
										.get("translations")
										.get(e.message);
								n.append(t(i(e.args))),
									(n[0].className +=
										" select2-results__message"),
									this.$results.append(n);
							}),
							(i.prototype.hideMessages = function () {
								this.$results
									.find(".select2-results__message")
									.remove();
							}),
							(i.prototype.append = function (e) {
								this.hideLoading();
								var t = [];
								if (
									null != e.results &&
									0 !== e.results.length
								) {
									e.results = this.sort(e.results);
									for (var n = 0; n < e.results.length; n++) {
										var i = e.results[n],
											r = this.option(i);
										t.push(r);
									}
									this.$results.append(t);
								} else
									0 === this.$results.children().length &&
										this.trigger("results:message", {
											message: "noResults",
										});
							}),
							(i.prototype.position = function (e, t) {
								t.find(".select2-results").append(e);
							}),
							(i.prototype.sort = function (e) {
								return this.options.get("sorter")(e);
							}),
							(i.prototype.highlightFirstItem = function () {
								var e = this.$results.find(
										".select2-results__option[aria-selected]"
									),
									t = e.filter("[aria-selected=true]");
								0 < t.length
									? t.first().trigger("mouseenter")
									: e.first().trigger("mouseenter"),
									this.ensureHighlightVisible();
							}),
							(i.prototype.setClasses = function () {
								var t = this;
								this.data.current(function (e) {
									var i = h.map(e, function (e) {
										return e.id.toString();
									});
									t.$results
										.find(
											".select2-results__option[aria-selected]"
										)
										.each(function () {
											var e = h(this),
												t = f.GetData(this, "data"),
												n = "" + t.id;
											(null != t.element &&
												t.element.selected) ||
											(null == t.element &&
												-1 < h.inArray(n, i))
												? e.attr(
														"aria-selected",
														"true"
												  )
												: e.attr(
														"aria-selected",
														"false"
												  );
										});
								});
							}),
							(i.prototype.showLoading = function (e) {
								this.hideLoading();
								var t = {
										disabled: !0,
										loading: !0,
										text: this.options
											.get("translations")
											.get("searching")(e),
									},
									n = this.option(t);
								(n.className += " loading-results"),
									this.$results.prepend(n);
							}),
							(i.prototype.hideLoading = function () {
								this.$results.find(".loading-results").remove();
							}),
							(i.prototype.option = function (e) {
								var t = document.createElement("li");
								t.className = "select2-results__option";
								var n = {
										role: "option",
										"aria-selected": "false",
									},
									i =
										window.Element.prototype.matches ||
										window.Element.prototype
											.msMatchesSelector ||
										window.Element.prototype
											.webkitMatchesSelector;
								for (var r in (((null != e.element &&
									i.call(e.element, ":disabled")) ||
									(null == e.element && e.disabled)) &&
									(delete n["aria-selected"],
									(n["aria-disabled"] = "true")),
								null == e.id && delete n["aria-selected"],
								null != e._resultId && (t.id = e._resultId),
								e.title && (t.title = e.title),
								e.children &&
									((n.role = "group"),
									(n["aria-label"] = e.text),
									delete n["aria-selected"]),
								n)) {
									var o = n[r];
									t.setAttribute(r, o);
								}
								if (e.children) {
									var s = h(t),
										a = document.createElement("strong");
									a.className = "select2-results__group";
									h(a);
									this.template(e, a);
									for (
										var l = [], c = 0;
										c < e.children.length;
										c++
									) {
										var u = e.children[c],
											d = this.option(u);
										l.push(d);
									}
									var p = h("<ul></ul>", {
										class: "select2-results__options select2-results__options--nested",
									});
									p.append(l), s.append(a), s.append(p);
								} else this.template(e, t);
								return f.StoreData(t, "data", e), t;
							}),
							(i.prototype.bind = function (t, e) {
								var l = this,
									n = t.id + "-results";
								this.$results.attr("id", n),
									t.on("results:all", function (e) {
										l.clear(),
											l.append(e.data),
											t.isOpen() &&
												(l.setClasses(),
												l.highlightFirstItem());
									}),
									t.on("results:append", function (e) {
										l.append(e.data),
											t.isOpen() && l.setClasses();
									}),
									t.on("query", function (e) {
										l.hideMessages(), l.showLoading(e);
									}),
									t.on("select", function () {
										t.isOpen() &&
											(l.setClasses(),
											l.options.get(
												"scrollAfterSelect"
											) && l.highlightFirstItem());
									}),
									t.on("unselect", function () {
										t.isOpen() &&
											(l.setClasses(),
											l.options.get(
												"scrollAfterSelect"
											) && l.highlightFirstItem());
									}),
									t.on("open", function () {
										l.$results.attr(
											"aria-expanded",
											"true"
										),
											l.$results.attr(
												"aria-hidden",
												"false"
											),
											l.setClasses(),
											l.ensureHighlightVisible();
									}),
									t.on("close", function () {
										l.$results.attr(
											"aria-expanded",
											"false"
										),
											l.$results.attr(
												"aria-hidden",
												"true"
											),
											l.$results.removeAttr(
												"aria-activedescendant"
											);
									}),
									t.on("results:toggle", function () {
										var e = l.getHighlightedResults();
										0 !== e.length && e.trigger("mouseup");
									}),
									t.on("results:select", function () {
										var e = l.getHighlightedResults();
										if (0 !== e.length) {
											var t = f.GetData(e[0], "data");
											"true" == e.attr("aria-selected")
												? l.trigger("close", {})
												: l.trigger("select", {
														data: t,
												  });
										}
									}),
									t.on("results:previous", function () {
										var e = l.getHighlightedResults(),
											t =
												l.$results.find(
													"[aria-selected]"
												),
											n = t.index(e);
										if (!(n <= 0)) {
											var i = n - 1;
											0 === e.length && (i = 0);
											var r = t.eq(i);
											r.trigger("mouseenter");
											var o = l.$results.offset().top,
												s = r.offset().top,
												a =
													l.$results.scrollTop() +
													(s - o);
											0 === i
												? l.$results.scrollTop(0)
												: s - o < 0 &&
												  l.$results.scrollTop(a);
										}
									}),
									t.on("results:next", function () {
										var e = l.getHighlightedResults(),
											t =
												l.$results.find(
													"[aria-selected]"
												),
											n = t.index(e) + 1;
										if (!(n >= t.length)) {
											var i = t.eq(n);
											i.trigger("mouseenter");
											var r =
													l.$results.offset().top +
													l.$results.outerHeight(!1),
												o =
													i.offset().top +
													i.outerHeight(!1),
												s =
													l.$results.scrollTop() +
													o -
													r;
											0 === n
												? l.$results.scrollTop(0)
												: r < o &&
												  l.$results.scrollTop(s);
										}
									}),
									t.on("results:focus", function (e) {
										e.element.addClass(
											"select2-results__option--highlighted"
										);
									}),
									t.on("results:message", function (e) {
										l.displayMessage(e);
									}),
									h.fn.mousewheel &&
										this.$results.on(
											"mousewheel",
											function (e) {
												var t = l.$results.scrollTop(),
													n =
														l.$results.get(0)
															.scrollHeight -
														t +
														e.deltaY,
													i =
														0 < e.deltaY &&
														t - e.deltaY <= 0,
													r =
														e.deltaY < 0 &&
														n <=
															l.$results.height();
												i
													? (l.$results.scrollTop(0),
													  e.preventDefault(),
													  e.stopPropagation())
													: r &&
													  (l.$results.scrollTop(
															l.$results.get(0)
																.scrollHeight -
																l.$results.height()
													  ),
													  e.preventDefault(),
													  e.stopPropagation());
											}
										),
									this.$results.on(
										"mouseup",
										".select2-results__option[aria-selected]",
										function (e) {
											var t = h(this),
												n = f.GetData(this, "data");
											"true" !== t.attr("aria-selected")
												? l.trigger("select", {
														originalEvent: e,
														data: n,
												  })
												: l.options.get("multiple")
												? l.trigger("unselect", {
														originalEvent: e,
														data: n,
												  })
												: l.trigger("close", {});
										}
									),
									this.$results.on(
										"mouseenter",
										".select2-results__option[aria-selected]",
										function (e) {
											var t = f.GetData(this, "data");
											l
												.getHighlightedResults()
												.removeClass(
													"select2-results__option--highlighted"
												),
												l.trigger("results:focus", {
													data: t,
													element: h(this),
												});
										}
									);
							}),
							(i.prototype.getHighlightedResults = function () {
								return this.$results.find(
									".select2-results__option--highlighted"
								);
							}),
							(i.prototype.destroy = function () {
								this.$results.remove();
							}),
							(i.prototype.ensureHighlightVisible = function () {
								var e = this.getHighlightedResults();
								if (0 !== e.length) {
									var t = this.$results
											.find("[aria-selected]")
											.index(e),
										n = this.$results.offset().top,
										i = e.offset().top,
										r = this.$results.scrollTop() + (i - n),
										o = i - n;
									(r -= 2 * e.outerHeight(!1)),
										t <= 2
											? this.$results.scrollTop(0)
											: (o >
													this.$results.outerHeight() ||
													o < 0) &&
											  this.$results.scrollTop(r);
								}
							}),
							(i.prototype.template = function (e, t) {
								var n = this.options.get("templateResult"),
									i = this.options.get("escapeMarkup"),
									r = n(e, t);
								null == r
									? (t.style.display = "none")
									: "string" == typeof r
									? (t.innerHTML = i(r))
									: h(t).append(r);
							}),
							i
						);
					}
				),
				e.define("select2/keys", [], function () {
					return {
						BACKSPACE: 8,
						TAB: 9,
						ENTER: 13,
						SHIFT: 16,
						CTRL: 17,
						ALT: 18,
						ESC: 27,
						SPACE: 32,
						PAGE_UP: 33,
						PAGE_DOWN: 34,
						END: 35,
						HOME: 36,
						LEFT: 37,
						UP: 38,
						RIGHT: 39,
						DOWN: 40,
						DELETE: 46,
					};
				}),
				e.define(
					"select2/selection/base",
					["jquery", "../utils", "../keys"],
					function (n, i, r) {
						function o(e, t) {
							(this.$element = e),
								(this.options = t),
								o.__super__.constructor.call(this);
						}
						return (
							i.Extend(o, i.Observable),
							(o.prototype.render = function () {
								var e = n(
									'<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>'
								);
								return (
									(this._tabindex = 0),
									null !=
									i.GetData(this.$element[0], "old-tabindex")
										? (this._tabindex = i.GetData(
												this.$element[0],
												"old-tabindex"
										  ))
										: null !=
												this.$element.attr(
													"tabindex"
												) &&
										  (this._tabindex =
												this.$element.attr("tabindex")),
									e.attr(
										"title",
										this.$element.attr("title")
									),
									e.attr("tabindex", this._tabindex),
									e.attr("aria-disabled", "false"),
									(this.$selection = e)
								);
							}),
							(o.prototype.bind = function (e, t) {
								var n = this,
									i = e.id + "-results";
								(this.container = e),
									this.$selection.on("focus", function (e) {
										n.trigger("focus", e);
									}),
									this.$selection.on("blur", function (e) {
										n._handleBlur(e);
									}),
									this.$selection.on("keydown", function (e) {
										n.trigger("keypress", e),
											e.which === r.SPACE &&
												e.preventDefault();
									}),
									e.on("results:focus", function (e) {
										n.$selection.attr(
											"aria-activedescendant",
											e.data._resultId
										);
									}),
									e.on("selection:update", function (e) {
										n.update(e.data);
									}),
									e.on("open", function () {
										n.$selection.attr(
											"aria-expanded",
											"true"
										),
											n.$selection.attr("aria-owns", i),
											n._attachCloseHandler(e);
									}),
									e.on("close", function () {
										n.$selection.attr(
											"aria-expanded",
											"false"
										),
											n.$selection.removeAttr(
												"aria-activedescendant"
											),
											n.$selection.removeAttr(
												"aria-owns"
											),
											n.$selection.trigger("focus"),
											n._detachCloseHandler(e);
									}),
									e.on("enable", function () {
										n.$selection.attr(
											"tabindex",
											n._tabindex
										),
											n.$selection.attr(
												"aria-disabled",
												"false"
											);
									}),
									e.on("disable", function () {
										n.$selection.attr("tabindex", "-1"),
											n.$selection.attr(
												"aria-disabled",
												"true"
											);
									});
							}),
							(o.prototype._handleBlur = function (e) {
								var t = this;
								window.setTimeout(function () {
									document.activeElement == t.$selection[0] ||
										n.contains(
											t.$selection[0],
											document.activeElement
										) ||
										t.trigger("blur", e);
								}, 1);
							}),
							(o.prototype._attachCloseHandler = function (e) {
								n(document.body).on(
									"mousedown.select2." + e.id,
									function (e) {
										var t = n(e.target).closest(".select2");
										n(
											".select2.select2-container--open"
										).each(function () {
											this != t[0] &&
												i
													.GetData(this, "element")
													.select2("close");
										});
									}
								);
							}),
							(o.prototype._detachCloseHandler = function (e) {
								n(document.body).off(
									"mousedown.select2." + e.id
								);
							}),
							(o.prototype.position = function (e, t) {
								t.find(".selection").append(e);
							}),
							(o.prototype.destroy = function () {
								this._detachCloseHandler(this.container);
							}),
							(o.prototype.update = function (e) {
								throw new Error(
									"The `update` method must be defined in child classes."
								);
							}),
							(o.prototype.isEnabled = function () {
								return !this.isDisabled();
							}),
							(o.prototype.isDisabled = function () {
								return this.options.get("disabled");
							}),
							o
						);
					}
				),
				e.define(
					"select2/selection/single",
					["jquery", "./base", "../utils", "../keys"],
					function (e, t, n, i) {
						function r() {
							r.__super__.constructor.apply(this, arguments);
						}
						return (
							n.Extend(r, t),
							(r.prototype.render = function () {
								var e = r.__super__.render.call(this);
								return (
									e.addClass("select2-selection--single"),
									e.html(
										'<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'
									),
									e
								);
							}),
							(r.prototype.bind = function (t, e) {
								var n = this;
								r.__super__.bind.apply(this, arguments);
								var i = t.id + "-container";
								this.$selection
									.find(".select2-selection__rendered")
									.attr("id", i)
									.attr("role", "textbox")
									.attr("aria-readonly", "true"),
									this.$selection.attr("aria-labelledby", i),
									this.$selection.on(
										"mousedown",
										function (e) {
											1 === e.which &&
												n.trigger("toggle", {
													originalEvent: e,
												});
										}
									),
									this.$selection.on(
										"focus",
										function (e) {}
									),
									this.$selection.on("blur", function (e) {}),
									t.on("focus", function (e) {
										t.isOpen() ||
											n.$selection.trigger("focus");
									});
							}),
							(r.prototype.clear = function () {
								var e = this.$selection.find(
									".select2-selection__rendered"
								);
								e.empty(), e.removeAttr("title");
							}),
							(r.prototype.display = function (e, t) {
								var n = this.options.get("templateSelection");
								return this.options.get("escapeMarkup")(
									n(e, t)
								);
							}),
							(r.prototype.selectionContainer = function () {
								return e("<span></span>");
							}),
							(r.prototype.update = function (e) {
								if (0 !== e.length) {
									var t = e[0],
										n = this.$selection.find(
											".select2-selection__rendered"
										),
										i = this.display(t, n);
									n.empty().append(i);
									var r = t.title || t.text;
									r
										? n.attr("title", r)
										: n.removeAttr("title");
								} else this.clear();
							}),
							r
						);
					}
				),
				e.define(
					"select2/selection/multiple",
					["jquery", "./base", "../utils"],
					function (r, e, l) {
						function n(e, t) {
							n.__super__.constructor.apply(this, arguments);
						}
						return (
							l.Extend(n, e),
							(n.prototype.render = function () {
								var e = n.__super__.render.call(this);
								return (
									e.addClass("select2-selection--multiple"),
									e.html(
										'<ul class="select2-selection__rendered"></ul>'
									),
									e
								);
							}),
							(n.prototype.bind = function (e, t) {
								var i = this;
								n.__super__.bind.apply(this, arguments),
									this.$selection.on("click", function (e) {
										i.trigger("toggle", {
											originalEvent: e,
										});
									}),
									this.$selection.on(
										"click",
										".select2-selection__choice__remove",
										function (e) {
											if (!i.isDisabled()) {
												var t = r(this).parent(),
													n = l.GetData(t[0], "data");
												i.trigger("unselect", {
													originalEvent: e,
													data: n,
												});
											}
										}
									);
							}),
							(n.prototype.clear = function () {
								var e = this.$selection.find(
									".select2-selection__rendered"
								);
								e.empty(), e.removeAttr("title");
							}),
							(n.prototype.display = function (e, t) {
								var n = this.options.get("templateSelection");
								return this.options.get("escapeMarkup")(
									n(e, t)
								);
							}),
							(n.prototype.selectionContainer = function () {
								return r(
									'<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>'
								);
							}),
							(n.prototype.update = function (e) {
								if ((this.clear(), 0 !== e.length)) {
									for (var t = [], n = 0; n < e.length; n++) {
										var i = e[n],
											r = this.selectionContainer(),
											o = this.display(i, r);
										r.append(o);
										var s = i.title || i.text;
										s && r.attr("title", s),
											l.StoreData(r[0], "data", i),
											t.push(r);
									}
									var a = this.$selection.find(
										".select2-selection__rendered"
									);
									l.appendMany(a, t);
								}
							}),
							n
						);
					}
				),
				e.define(
					"select2/selection/placeholder",
					["../utils"],
					function (e) {
						function t(e, t, n) {
							(this.placeholder = this.normalizePlaceholder(
								n.get("placeholder")
							)),
								e.call(this, t, n);
						}
						return (
							(t.prototype.normalizePlaceholder = function (
								e,
								t
							) {
								return (
									"string" == typeof t &&
										(t = { id: "", text: t }),
									t
								);
							}),
							(t.prototype.createPlaceholder = function (e, t) {
								var n = this.selectionContainer();
								return (
									n.html(this.display(t)),
									n
										.addClass(
											"select2-selection__placeholder"
										)
										.removeClass(
											"select2-selection__choice"
										),
									n
								);
							}),
							(t.prototype.update = function (e, t) {
								var n =
									1 == t.length &&
									t[0].id != this.placeholder.id;
								if (1 < t.length || n) return e.call(this, t);
								this.clear();
								var i = this.createPlaceholder(
									this.placeholder
								);
								this.$selection
									.find(".select2-selection__rendered")
									.append(i);
							}),
							t
						);
					}
				),
				e.define(
					"select2/selection/allowClear",
					["jquery", "../keys", "../utils"],
					function (r, i, a) {
						function e() {}
						return (
							(e.prototype.bind = function (e, t, n) {
								var i = this;
								e.call(this, t, n),
									null == this.placeholder &&
										this.options.get("debug") &&
										window.console &&
										console.error &&
										console.error(
											"Select2: The `allowClear` option should be used in combination with the `placeholder` option."
										),
									this.$selection.on(
										"mousedown",
										".select2-selection__clear",
										function (e) {
											i._handleClear(e);
										}
									),
									t.on("keypress", function (e) {
										i._handleKeyboardClear(e, t);
									});
							}),
							(e.prototype._handleClear = function (e, t) {
								if (!this.isDisabled()) {
									var n = this.$selection.find(
										".select2-selection__clear"
									);
									if (0 !== n.length) {
										t.stopPropagation();
										var i = a.GetData(n[0], "data"),
											r = this.$element.val();
										this.$element.val(this.placeholder.id);
										var o = { data: i };
										if (
											(this.trigger("clear", o),
											o.prevented)
										)
											this.$element.val(r);
										else {
											for (var s = 0; s < i.length; s++)
												if (
													((o = { data: i[s] }),
													this.trigger("unselect", o),
													o.prevented)
												)
													return void this.$element.val(
														r
													);
											this.$element
												.trigger("input")
												.trigger("change"),
												this.trigger("toggle", {});
										}
									}
								}
							}),
							(e.prototype._handleKeyboardClear = function (
								e,
								t,
								n
							) {
								n.isOpen() ||
									(t.which != i.DELETE &&
										t.which != i.BACKSPACE) ||
									this._handleClear(t);
							}),
							(e.prototype.update = function (e, t) {
								if (
									(e.call(this, t),
									!(
										0 <
											this.$selection.find(
												".select2-selection__placeholder"
											).length || 0 === t.length
									))
								) {
									var n = this.options
											.get("translations")
											.get("removeAllItems"),
										i = r(
											'<span class="select2-selection__clear" title="' +
												n() +
												'">&times;</span>'
										);
									a.StoreData(i[0], "data", t),
										this.$selection
											.find(
												".select2-selection__rendered"
											)
											.prepend(i);
								}
							}),
							e
						);
					}
				),
				e.define(
					"select2/selection/search",
					["jquery", "../utils", "../keys"],
					function (i, a, l) {
						function e(e, t, n) {
							e.call(this, t, n);
						}
						return (
							(e.prototype.render = function (e) {
								var t = i(
									'<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>'
								);
								(this.$searchContainer = t),
									(this.$search = t.find("input"));
								var n = e.call(this);
								return this._transferTabIndex(), n;
							}),
							(e.prototype.bind = function (e, t, n) {
								var i = this,
									r = t.id + "-results";
								e.call(this, t, n),
									t.on("open", function () {
										i.$search.attr("aria-controls", r),
											i.$search.trigger("focus");
									}),
									t.on("close", function () {
										i.$search.val(""),
											i.$search.removeAttr(
												"aria-controls"
											),
											i.$search.removeAttr(
												"aria-activedescendant"
											),
											i.$search.trigger("focus");
									}),
									t.on("enable", function () {
										i.$search.prop("disabled", !1),
											i._transferTabIndex();
									}),
									t.on("disable", function () {
										i.$search.prop("disabled", !0);
									}),
									t.on("focus", function (e) {
										i.$search.trigger("focus");
									}),
									t.on("results:focus", function (e) {
										e.data._resultId
											? i.$search.attr(
													"aria-activedescendant",
													e.data._resultId
											  )
											: i.$search.removeAttr(
													"aria-activedescendant"
											  );
									}),
									this.$selection.on(
										"focusin",
										".select2-search--inline",
										function (e) {
											i.trigger("focus", e);
										}
									),
									this.$selection.on(
										"focusout",
										".select2-search--inline",
										function (e) {
											i._handleBlur(e);
										}
									),
									this.$selection.on(
										"keydown",
										".select2-search--inline",
										function (e) {
											if (
												(e.stopPropagation(),
												i.trigger("keypress", e),
												(i._keyUpPrevented =
													e.isDefaultPrevented()),
												e.which === l.BACKSPACE &&
													"" === i.$search.val())
											) {
												var t = i.$searchContainer.prev(
													".select2-selection__choice"
												);
												if (0 < t.length) {
													var n = a.GetData(
														t[0],
														"data"
													);
													i.searchRemoveChoice(n),
														e.preventDefault();
												}
											}
										}
									),
									this.$selection.on(
										"click",
										".select2-search--inline",
										function (e) {
											i.$search.val() &&
												e.stopPropagation();
										}
									);
								var o = document.documentMode,
									s = o && o <= 11;
								this.$selection.on(
									"input.searchcheck",
									".select2-search--inline",
									function (e) {
										s
											? i.$selection.off(
													"input.search input.searchcheck"
											  )
											: i.$selection.off("keyup.search");
									}
								),
									this.$selection.on(
										"keyup.search input.search",
										".select2-search--inline",
										function (e) {
											if (s && "input" === e.type)
												i.$selection.off(
													"input.search input.searchcheck"
												);
											else {
												var t = e.which;
												t != l.SHIFT &&
													t != l.CTRL &&
													t != l.ALT &&
													t != l.TAB &&
													i.handleSearch(e);
											}
										}
									);
							}),
							(e.prototype._transferTabIndex = function (e) {
								this.$search.attr(
									"tabindex",
									this.$selection.attr("tabindex")
								),
									this.$selection.attr("tabindex", "-1");
							}),
							(e.prototype.createPlaceholder = function (e, t) {
								this.$search.attr("placeholder", t.text);
							}),
							(e.prototype.update = function (e, t) {
								var n =
									this.$search[0] == document.activeElement;
								this.$search.attr("placeholder", ""),
									e.call(this, t),
									this.$selection
										.find(".select2-selection__rendered")
										.append(this.$searchContainer),
									this.resizeSearch(),
									n && this.$search.trigger("focus");
							}),
							(e.prototype.handleSearch = function () {
								if (
									(this.resizeSearch(), !this._keyUpPrevented)
								) {
									var e = this.$search.val();
									this.trigger("query", { term: e });
								}
								this._keyUpPrevented = !1;
							}),
							(e.prototype.searchRemoveChoice = function (e, t) {
								this.trigger("unselect", { data: t }),
									this.$search.val(t.text),
									this.handleSearch();
							}),
							(e.prototype.resizeSearch = function () {
								this.$search.css("width", "25px");
								var e = "";
								"" !== this.$search.attr("placeholder")
									? (e = this.$selection
											.find(
												".select2-selection__rendered"
											)
											.width())
									: (e =
											0.75 *
												(this.$search.val().length +
													1) +
											"em");
								this.$search.css("width", e);
							}),
							e
						);
					}
				),
				e.define(
					"select2/selection/eventRelay",
					["jquery"],
					function (s) {
						function e() {}
						return (
							(e.prototype.bind = function (e, t, n) {
								var i = this,
									r = [
										"open",
										"opening",
										"close",
										"closing",
										"select",
										"selecting",
										"unselect",
										"unselecting",
										"clear",
										"clearing",
									],
									o = [
										"opening",
										"closing",
										"selecting",
										"unselecting",
										"clearing",
									];
								e.call(this, t, n),
									t.on("*", function (e, t) {
										if (-1 !== s.inArray(e, r)) {
											t = t || {};
											var n = s.Event("select2:" + e, {
												params: t,
											});
											i.$element.trigger(n),
												-1 !== s.inArray(e, o) &&
													(t.prevented =
														n.isDefaultPrevented());
										}
									});
							}),
							e
						);
					}
				),
				e.define(
					"select2/translation",
					["jquery", "require"],
					function (t, n) {
						function i(e) {
							this.dict = e || {};
						}
						return (
							(i.prototype.all = function () {
								return this.dict;
							}),
							(i.prototype.get = function (e) {
								return this.dict[e];
							}),
							(i.prototype.extend = function (e) {
								this.dict = t.extend({}, e.all(), this.dict);
							}),
							(i._cache = {}),
							(i.loadPath = function (e) {
								if (!(e in i._cache)) {
									var t = n(e);
									i._cache[e] = t;
								}
								return new i(i._cache[e]);
							}),
							i
						);
					}
				),
				e.define("select2/diacritics", [], function () {
					return {
						"Ⓐ": "A",
						Ａ: "A",
						À: "A",
						Á: "A",
						Â: "A",
						Ầ: "A",
						Ấ: "A",
						Ẫ: "A",
						Ẩ: "A",
						Ã: "A",
						Ā: "A",
						Ă: "A",
						Ằ: "A",
						Ắ: "A",
						Ẵ: "A",
						Ẳ: "A",
						Ȧ: "A",
						Ǡ: "A",
						Ä: "A",
						Ǟ: "A",
						Ả: "A",
						Å: "A",
						Ǻ: "A",
						Ǎ: "A",
						Ȁ: "A",
						Ȃ: "A",
						Ạ: "A",
						Ậ: "A",
						Ặ: "A",
						Ḁ: "A",
						Ą: "A",
						Ⱥ: "A",
						Ɐ: "A",
						Ꜳ: "AA",
						Æ: "AE",
						Ǽ: "AE",
						Ǣ: "AE",
						Ꜵ: "AO",
						Ꜷ: "AU",
						Ꜹ: "AV",
						Ꜻ: "AV",
						Ꜽ: "AY",
						"Ⓑ": "B",
						Ｂ: "B",
						Ḃ: "B",
						Ḅ: "B",
						Ḇ: "B",
						Ƀ: "B",
						Ƃ: "B",
						Ɓ: "B",
						"Ⓒ": "C",
						Ｃ: "C",
						Ć: "C",
						Ĉ: "C",
						Ċ: "C",
						Č: "C",
						Ç: "C",
						Ḉ: "C",
						Ƈ: "C",
						Ȼ: "C",
						Ꜿ: "C",
						"Ⓓ": "D",
						Ｄ: "D",
						Ḋ: "D",
						Ď: "D",
						Ḍ: "D",
						Ḑ: "D",
						Ḓ: "D",
						Ḏ: "D",
						Đ: "D",
						Ƌ: "D",
						Ɗ: "D",
						Ɖ: "D",
						Ꝺ: "D",
						Ǳ: "DZ",
						Ǆ: "DZ",
						ǲ: "Dz",
						ǅ: "Dz",
						"Ⓔ": "E",
						Ｅ: "E",
						È: "E",
						É: "E",
						Ê: "E",
						Ề: "E",
						Ế: "E",
						Ễ: "E",
						Ể: "E",
						Ẽ: "E",
						Ē: "E",
						Ḕ: "E",
						Ḗ: "E",
						Ĕ: "E",
						Ė: "E",
						Ë: "E",
						Ẻ: "E",
						Ě: "E",
						Ȅ: "E",
						Ȇ: "E",
						Ẹ: "E",
						Ệ: "E",
						Ȩ: "E",
						Ḝ: "E",
						Ę: "E",
						Ḙ: "E",
						Ḛ: "E",
						Ɛ: "E",
						Ǝ: "E",
						"Ⓕ": "F",
						Ｆ: "F",
						Ḟ: "F",
						Ƒ: "F",
						Ꝼ: "F",
						"Ⓖ": "G",
						Ｇ: "G",
						Ǵ: "G",
						Ĝ: "G",
						Ḡ: "G",
						Ğ: "G",
						Ġ: "G",
						Ǧ: "G",
						Ģ: "G",
						Ǥ: "G",
						Ɠ: "G",
						Ꞡ: "G",
						Ᵹ: "G",
						Ꝿ: "G",
						"Ⓗ": "H",
						Ｈ: "H",
						Ĥ: "H",
						Ḣ: "H",
						Ḧ: "H",
						Ȟ: "H",
						Ḥ: "H",
						Ḩ: "H",
						Ḫ: "H",
						Ħ: "H",
						Ⱨ: "H",
						Ⱶ: "H",
						Ɥ: "H",
						"Ⓘ": "I",
						Ｉ: "I",
						Ì: "I",
						Í: "I",
						Î: "I",
						Ĩ: "I",
						Ī: "I",
						Ĭ: "I",
						İ: "I",
						Ï: "I",
						Ḯ: "I",
						Ỉ: "I",
						Ǐ: "I",
						Ȉ: "I",
						Ȋ: "I",
						Ị: "I",
						Į: "I",
						Ḭ: "I",
						Ɨ: "I",
						"Ⓙ": "J",
						Ｊ: "J",
						Ĵ: "J",
						Ɉ: "J",
						"Ⓚ": "K",
						Ｋ: "K",
						Ḱ: "K",
						Ǩ: "K",
						Ḳ: "K",
						Ķ: "K",
						Ḵ: "K",
						Ƙ: "K",
						Ⱪ: "K",
						Ꝁ: "K",
						Ꝃ: "K",
						Ꝅ: "K",
						Ꞣ: "K",
						"Ⓛ": "L",
						Ｌ: "L",
						Ŀ: "L",
						Ĺ: "L",
						Ľ: "L",
						Ḷ: "L",
						Ḹ: "L",
						Ļ: "L",
						Ḽ: "L",
						Ḻ: "L",
						Ł: "L",
						Ƚ: "L",
						Ɫ: "L",
						Ⱡ: "L",
						Ꝉ: "L",
						Ꝇ: "L",
						Ꞁ: "L",
						Ǉ: "LJ",
						ǈ: "Lj",
						"Ⓜ": "M",
						Ｍ: "M",
						Ḿ: "M",
						Ṁ: "M",
						Ṃ: "M",
						Ɱ: "M",
						Ɯ: "M",
						"Ⓝ": "N",
						Ｎ: "N",
						Ǹ: "N",
						Ń: "N",
						Ñ: "N",
						Ṅ: "N",
						Ň: "N",
						Ṇ: "N",
						Ņ: "N",
						Ṋ: "N",
						Ṉ: "N",
						Ƞ: "N",
						Ɲ: "N",
						Ꞑ: "N",
						Ꞥ: "N",
						Ǌ: "NJ",
						ǋ: "Nj",
						"Ⓞ": "O",
						Ｏ: "O",
						Ò: "O",
						Ó: "O",
						Ô: "O",
						Ồ: "O",
						Ố: "O",
						Ỗ: "O",
						Ổ: "O",
						Õ: "O",
						Ṍ: "O",
						Ȭ: "O",
						Ṏ: "O",
						Ō: "O",
						Ṑ: "O",
						Ṓ: "O",
						Ŏ: "O",
						Ȯ: "O",
						Ȱ: "O",
						Ö: "O",
						Ȫ: "O",
						Ỏ: "O",
						Ő: "O",
						Ǒ: "O",
						Ȍ: "O",
						Ȏ: "O",
						Ơ: "O",
						Ờ: "O",
						Ớ: "O",
						Ỡ: "O",
						Ở: "O",
						Ợ: "O",
						Ọ: "O",
						Ộ: "O",
						Ǫ: "O",
						Ǭ: "O",
						Ø: "O",
						Ǿ: "O",
						Ɔ: "O",
						Ɵ: "O",
						Ꝋ: "O",
						Ꝍ: "O",
						Œ: "OE",
						Ƣ: "OI",
						Ꝏ: "OO",
						Ȣ: "OU",
						"Ⓟ": "P",
						Ｐ: "P",
						Ṕ: "P",
						Ṗ: "P",
						Ƥ: "P",
						Ᵽ: "P",
						Ꝑ: "P",
						Ꝓ: "P",
						Ꝕ: "P",
						"Ⓠ": "Q",
						Ｑ: "Q",
						Ꝗ: "Q",
						Ꝙ: "Q",
						Ɋ: "Q",
						"Ⓡ": "R",
						Ｒ: "R",
						Ŕ: "R",
						Ṙ: "R",
						Ř: "R",
						Ȑ: "R",
						Ȓ: "R",
						Ṛ: "R",
						Ṝ: "R",
						Ŗ: "R",
						Ṟ: "R",
						Ɍ: "R",
						Ɽ: "R",
						Ꝛ: "R",
						Ꞧ: "R",
						Ꞃ: "R",
						"Ⓢ": "S",
						Ｓ: "S",
						ẞ: "S",
						Ś: "S",
						Ṥ: "S",
						Ŝ: "S",
						Ṡ: "S",
						Š: "S",
						Ṧ: "S",
						Ṣ: "S",
						Ṩ: "S",
						Ș: "S",
						Ş: "S",
						Ȿ: "S",
						Ꞩ: "S",
						Ꞅ: "S",
						"Ⓣ": "T",
						Ｔ: "T",
						Ṫ: "T",
						Ť: "T",
						Ṭ: "T",
						Ț: "T",
						Ţ: "T",
						Ṱ: "T",
						Ṯ: "T",
						Ŧ: "T",
						Ƭ: "T",
						Ʈ: "T",
						Ⱦ: "T",
						Ꞇ: "T",
						Ꜩ: "TZ",
						"Ⓤ": "U",
						Ｕ: "U",
						Ù: "U",
						Ú: "U",
						Û: "U",
						Ũ: "U",
						Ṹ: "U",
						Ū: "U",
						Ṻ: "U",
						Ŭ: "U",
						Ü: "U",
						Ǜ: "U",
						Ǘ: "U",
						Ǖ: "U",
						Ǚ: "U",
						Ủ: "U",
						Ů: "U",
						Ű: "U",
						Ǔ: "U",
						Ȕ: "U",
						Ȗ: "U",
						Ư: "U",
						Ừ: "U",
						Ứ: "U",
						Ữ: "U",
						Ử: "U",
						Ự: "U",
						Ụ: "U",
						Ṳ: "U",
						Ų: "U",
						Ṷ: "U",
						Ṵ: "U",
						Ʉ: "U",
						"Ⓥ": "V",
						Ｖ: "V",
						Ṽ: "V",
						Ṿ: "V",
						Ʋ: "V",
						Ꝟ: "V",
						Ʌ: "V",
						Ꝡ: "VY",
						"Ⓦ": "W",
						Ｗ: "W",
						Ẁ: "W",
						Ẃ: "W",
						Ŵ: "W",
						Ẇ: "W",
						Ẅ: "W",
						Ẉ: "W",
						Ⱳ: "W",
						"Ⓧ": "X",
						Ｘ: "X",
						Ẋ: "X",
						Ẍ: "X",
						"Ⓨ": "Y",
						Ｙ: "Y",
						Ỳ: "Y",
						Ý: "Y",
						Ŷ: "Y",
						Ỹ: "Y",
						Ȳ: "Y",
						Ẏ: "Y",
						Ÿ: "Y",
						Ỷ: "Y",
						Ỵ: "Y",
						Ƴ: "Y",
						Ɏ: "Y",
						Ỿ: "Y",
						"Ⓩ": "Z",
						Ｚ: "Z",
						Ź: "Z",
						Ẑ: "Z",
						Ż: "Z",
						Ž: "Z",
						Ẓ: "Z",
						Ẕ: "Z",
						Ƶ: "Z",
						Ȥ: "Z",
						Ɀ: "Z",
						Ⱬ: "Z",
						Ꝣ: "Z",
						"ⓐ": "a",
						ａ: "a",
						ẚ: "a",
						à: "a",
						á: "a",
						â: "a",
						ầ: "a",
						ấ: "a",
						ẫ: "a",
						ẩ: "a",
						ã: "a",
						ā: "a",
						ă: "a",
						ằ: "a",
						ắ: "a",
						ẵ: "a",
						ẳ: "a",
						ȧ: "a",
						ǡ: "a",
						ä: "a",
						ǟ: "a",
						ả: "a",
						å: "a",
						ǻ: "a",
						ǎ: "a",
						ȁ: "a",
						ȃ: "a",
						ạ: "a",
						ậ: "a",
						ặ: "a",
						ḁ: "a",
						ą: "a",
						ⱥ: "a",
						ɐ: "a",
						ꜳ: "aa",
						æ: "ae",
						ǽ: "ae",
						ǣ: "ae",
						ꜵ: "ao",
						ꜷ: "au",
						ꜹ: "av",
						ꜻ: "av",
						ꜽ: "ay",
						"ⓑ": "b",
						ｂ: "b",
						ḃ: "b",
						ḅ: "b",
						ḇ: "b",
						ƀ: "b",
						ƃ: "b",
						ɓ: "b",
						"ⓒ": "c",
						ｃ: "c",
						ć: "c",
						ĉ: "c",
						ċ: "c",
						č: "c",
						ç: "c",
						ḉ: "c",
						ƈ: "c",
						ȼ: "c",
						ꜿ: "c",
						ↄ: "c",
						"ⓓ": "d",
						ｄ: "d",
						ḋ: "d",
						ď: "d",
						ḍ: "d",
						ḑ: "d",
						ḓ: "d",
						ḏ: "d",
						đ: "d",
						ƌ: "d",
						ɖ: "d",
						ɗ: "d",
						ꝺ: "d",
						ǳ: "dz",
						ǆ: "dz",
						"ⓔ": "e",
						ｅ: "e",
						è: "e",
						é: "e",
						ê: "e",
						ề: "e",
						ế: "e",
						ễ: "e",
						ể: "e",
						ẽ: "e",
						ē: "e",
						ḕ: "e",
						ḗ: "e",
						ĕ: "e",
						ė: "e",
						ë: "e",
						ẻ: "e",
						ě: "e",
						ȅ: "e",
						ȇ: "e",
						ẹ: "e",
						ệ: "e",
						ȩ: "e",
						ḝ: "e",
						ę: "e",
						ḙ: "e",
						ḛ: "e",
						ɇ: "e",
						ɛ: "e",
						ǝ: "e",
						"ⓕ": "f",
						ｆ: "f",
						ḟ: "f",
						ƒ: "f",
						ꝼ: "f",
						"ⓖ": "g",
						ｇ: "g",
						ǵ: "g",
						ĝ: "g",
						ḡ: "g",
						ğ: "g",
						ġ: "g",
						ǧ: "g",
						ģ: "g",
						ǥ: "g",
						ɠ: "g",
						ꞡ: "g",
						ᵹ: "g",
						ꝿ: "g",
						"ⓗ": "h",
						ｈ: "h",
						ĥ: "h",
						ḣ: "h",
						ḧ: "h",
						ȟ: "h",
						ḥ: "h",
						ḩ: "h",
						ḫ: "h",
						ẖ: "h",
						ħ: "h",
						ⱨ: "h",
						ⱶ: "h",
						ɥ: "h",
						ƕ: "hv",
						"ⓘ": "i",
						ｉ: "i",
						ì: "i",
						í: "i",
						î: "i",
						ĩ: "i",
						ī: "i",
						ĭ: "i",
						ï: "i",
						ḯ: "i",
						ỉ: "i",
						ǐ: "i",
						ȉ: "i",
						ȋ: "i",
						ị: "i",
						į: "i",
						ḭ: "i",
						ɨ: "i",
						ı: "i",
						"ⓙ": "j",
						ｊ: "j",
						ĵ: "j",
						ǰ: "j",
						ɉ: "j",
						"ⓚ": "k",
						ｋ: "k",
						ḱ: "k",
						ǩ: "k",
						ḳ: "k",
						ķ: "k",
						ḵ: "k",
						ƙ: "k",
						ⱪ: "k",
						ꝁ: "k",
						ꝃ: "k",
						ꝅ: "k",
						ꞣ: "k",
						"ⓛ": "l",
						ｌ: "l",
						ŀ: "l",
						ĺ: "l",
						ľ: "l",
						ḷ: "l",
						ḹ: "l",
						ļ: "l",
						ḽ: "l",
						ḻ: "l",
						ſ: "l",
						ł: "l",
						ƚ: "l",
						ɫ: "l",
						ⱡ: "l",
						ꝉ: "l",
						ꞁ: "l",
						ꝇ: "l",
						ǉ: "lj",
						"ⓜ": "m",
						ｍ: "m",
						ḿ: "m",
						ṁ: "m",
						ṃ: "m",
						ɱ: "m",
						ɯ: "m",
						"ⓝ": "n",
						ｎ: "n",
						ǹ: "n",
						ń: "n",
						ñ: "n",
						ṅ: "n",
						ň: "n",
						ṇ: "n",
						ņ: "n",
						ṋ: "n",
						ṉ: "n",
						ƞ: "n",
						ɲ: "n",
						ŉ: "n",
						ꞑ: "n",
						ꞥ: "n",
						ǌ: "nj",
						"ⓞ": "o",
						ｏ: "o",
						ò: "o",
						ó: "o",
						ô: "o",
						ồ: "o",
						ố: "o",
						ỗ: "o",
						ổ: "o",
						õ: "o",
						ṍ: "o",
						ȭ: "o",
						ṏ: "o",
						ō: "o",
						ṑ: "o",
						ṓ: "o",
						ŏ: "o",
						ȯ: "o",
						ȱ: "o",
						ö: "o",
						ȫ: "o",
						ỏ: "o",
						ő: "o",
						ǒ: "o",
						ȍ: "o",
						ȏ: "o",
						ơ: "o",
						ờ: "o",
						ớ: "o",
						ỡ: "o",
						ở: "o",
						ợ: "o",
						ọ: "o",
						ộ: "o",
						ǫ: "o",
						ǭ: "o",
						ø: "o",
						ǿ: "o",
						ɔ: "o",
						ꝋ: "o",
						ꝍ: "o",
						ɵ: "o",
						œ: "oe",
						ƣ: "oi",
						ȣ: "ou",
						ꝏ: "oo",
						"ⓟ": "p",
						ｐ: "p",
						ṕ: "p",
						ṗ: "p",
						ƥ: "p",
						ᵽ: "p",
						ꝑ: "p",
						ꝓ: "p",
						ꝕ: "p",
						"ⓠ": "q",
						ｑ: "q",
						ɋ: "q",
						ꝗ: "q",
						ꝙ: "q",
						"ⓡ": "r",
						ｒ: "r",
						ŕ: "r",
						ṙ: "r",
						ř: "r",
						ȑ: "r",
						ȓ: "r",
						ṛ: "r",
						ṝ: "r",
						ŗ: "r",
						ṟ: "r",
						ɍ: "r",
						ɽ: "r",
						ꝛ: "r",
						ꞧ: "r",
						ꞃ: "r",
						"ⓢ": "s",
						ｓ: "s",
						ß: "s",
						ś: "s",
						ṥ: "s",
						ŝ: "s",
						ṡ: "s",
						š: "s",
						ṧ: "s",
						ṣ: "s",
						ṩ: "s",
						ș: "s",
						ş: "s",
						ȿ: "s",
						ꞩ: "s",
						ꞅ: "s",
						ẛ: "s",
						"ⓣ": "t",
						ｔ: "t",
						ṫ: "t",
						ẗ: "t",
						ť: "t",
						ṭ: "t",
						ț: "t",
						ţ: "t",
						ṱ: "t",
						ṯ: "t",
						ŧ: "t",
						ƭ: "t",
						ʈ: "t",
						ⱦ: "t",
						ꞇ: "t",
						ꜩ: "tz",
						"ⓤ": "u",
						ｕ: "u",
						ù: "u",
						ú: "u",
						û: "u",
						ũ: "u",
						ṹ: "u",
						ū: "u",
						ṻ: "u",
						ŭ: "u",
						ü: "u",
						ǜ: "u",
						ǘ: "u",
						ǖ: "u",
						ǚ: "u",
						ủ: "u",
						ů: "u",
						ű: "u",
						ǔ: "u",
						ȕ: "u",
						ȗ: "u",
						ư: "u",
						ừ: "u",
						ứ: "u",
						ữ: "u",
						ử: "u",
						ự: "u",
						ụ: "u",
						ṳ: "u",
						ų: "u",
						ṷ: "u",
						ṵ: "u",
						ʉ: "u",
						"ⓥ": "v",
						ｖ: "v",
						ṽ: "v",
						ṿ: "v",
						ʋ: "v",
						ꝟ: "v",
						ʌ: "v",
						ꝡ: "vy",
						"ⓦ": "w",
						ｗ: "w",
						ẁ: "w",
						ẃ: "w",
						ŵ: "w",
						ẇ: "w",
						ẅ: "w",
						ẘ: "w",
						ẉ: "w",
						ⱳ: "w",
						"ⓧ": "x",
						ｘ: "x",
						ẋ: "x",
						ẍ: "x",
						"ⓨ": "y",
						ｙ: "y",
						ỳ: "y",
						ý: "y",
						ŷ: "y",
						ỹ: "y",
						ȳ: "y",
						ẏ: "y",
						ÿ: "y",
						ỷ: "y",
						ẙ: "y",
						ỵ: "y",
						ƴ: "y",
						ɏ: "y",
						ỿ: "y",
						"ⓩ": "z",
						ｚ: "z",
						ź: "z",
						ẑ: "z",
						ż: "z",
						ž: "z",
						ẓ: "z",
						ẕ: "z",
						ƶ: "z",
						ȥ: "z",
						ɀ: "z",
						ⱬ: "z",
						ꝣ: "z",
						Ά: "Α",
						Έ: "Ε",
						Ή: "Η",
						Ί: "Ι",
						Ϊ: "Ι",
						Ό: "Ο",
						Ύ: "Υ",
						Ϋ: "Υ",
						Ώ: "Ω",
						ά: "α",
						έ: "ε",
						ή: "η",
						ί: "ι",
						ϊ: "ι",
						ΐ: "ι",
						ό: "ο",
						ύ: "υ",
						ϋ: "υ",
						ΰ: "υ",
						ώ: "ω",
						ς: "σ",
						"’": "'",
					};
				}),
				e.define("select2/data/base", ["../utils"], function (i) {
					function n(e, t) {
						n.__super__.constructor.call(this);
					}
					return (
						i.Extend(n, i.Observable),
						(n.prototype.current = function (e) {
							throw new Error(
								"The `current` method must be defined in child classes."
							);
						}),
						(n.prototype.query = function (e, t) {
							throw new Error(
								"The `query` method must be defined in child classes."
							);
						}),
						(n.prototype.bind = function (e, t) {}),
						(n.prototype.destroy = function () {}),
						(n.prototype.generateResultId = function (e, t) {
							var n = e.id + "-result-";
							return (
								(n += i.generateChars(4)),
								null != t.id
									? (n += "-" + t.id.toString())
									: (n += "-" + i.generateChars(4)),
								n
							);
						}),
						n
					);
				}),
				e.define(
					"select2/data/select",
					["./base", "../utils", "jquery"],
					function (e, a, l) {
						function n(e, t) {
							(this.$element = e),
								(this.options = t),
								n.__super__.constructor.call(this);
						}
						return (
							a.Extend(n, e),
							(n.prototype.current = function (e) {
								var n = [],
									i = this;
								this.$element
									.find(":selected")
									.each(function () {
										var e = l(this),
											t = i.item(e);
										n.push(t);
									}),
									e(n);
							}),
							(n.prototype.select = function (r) {
								var o = this;
								if (
									((r.selected = !0),
									l(r.element).is("option"))
								)
									return (
										(r.element.selected = !0),
										void this.$element
											.trigger("input")
											.trigger("change")
									);
								if (this.$element.prop("multiple"))
									this.current(function (e) {
										var t = [];
										(r = [r]).push.apply(r, e);
										for (var n = 0; n < r.length; n++) {
											var i = r[n].id;
											-1 === l.inArray(i, t) && t.push(i);
										}
										o.$element.val(t),
											o.$element
												.trigger("input")
												.trigger("change");
									});
								else {
									var e = r.id;
									this.$element.val(e),
										this.$element
											.trigger("input")
											.trigger("change");
								}
							}),
							(n.prototype.unselect = function (r) {
								var o = this;
								if (this.$element.prop("multiple")) {
									if (
										((r.selected = !1),
										l(r.element).is("option"))
									)
										return (
											(r.element.selected = !1),
											void this.$element
												.trigger("input")
												.trigger("change")
										);
									this.current(function (e) {
										for (
											var t = [], n = 0;
											n < e.length;
											n++
										) {
											var i = e[n].id;
											i !== r.id &&
												-1 === l.inArray(i, t) &&
												t.push(i);
										}
										o.$element.val(t),
											o.$element
												.trigger("input")
												.trigger("change");
									});
								}
							}),
							(n.prototype.bind = function (e, t) {
								var n = this;
								(this.container = e).on("select", function (e) {
									n.select(e.data);
								}),
									e.on("unselect", function (e) {
										n.unselect(e.data);
									});
							}),
							(n.prototype.destroy = function () {
								this.$element.find("*").each(function () {
									a.RemoveData(this);
								});
							}),
							(n.prototype.query = function (i, e) {
								var r = [],
									o = this;
								this.$element.children().each(function () {
									var e = l(this);
									if (e.is("option") || e.is("optgroup")) {
										var t = o.item(e),
											n = o.matches(i, t);
										null !== n && r.push(n);
									}
								}),
									e({ results: r });
							}),
							(n.prototype.addOptions = function (e) {
								a.appendMany(this.$element, e);
							}),
							(n.prototype.option = function (e) {
								var t;
								e.children
									? ((t =
											document.createElement(
												"optgroup"
											)).label = e.text)
									: void 0 !==
									  (t = document.createElement("option"))
											.textContent
									? (t.textContent = e.text)
									: (t.innerText = e.text),
									void 0 !== e.id && (t.value = e.id),
									e.disabled && (t.disabled = !0),
									e.selected && (t.selected = !0),
									e.title && (t.title = e.title);
								var n = l(t),
									i = this._normalizeItem(e);
								return (
									(i.element = t),
									a.StoreData(t, "data", i),
									n
								);
							}),
							(n.prototype.item = function (e) {
								var t = {};
								if (null != (t = a.GetData(e[0], "data")))
									return t;
								if (e.is("option"))
									t = {
										id: e.val(),
										text: e.text(),
										disabled: e.prop("disabled"),
										selected: e.prop("selected"),
										title: e.prop("title"),
									};
								else if (e.is("optgroup")) {
									t = {
										text: e.prop("label"),
										children: [],
										title: e.prop("title"),
									};
									for (
										var n = e.children("option"),
											i = [],
											r = 0;
										r < n.length;
										r++
									) {
										var o = l(n[r]),
											s = this.item(o);
										i.push(s);
									}
									t.children = i;
								}
								return (
									((t = this._normalizeItem(t)).element =
										e[0]),
									a.StoreData(e[0], "data", t),
									t
								);
							}),
							(n.prototype._normalizeItem = function (e) {
								e !== Object(e) && (e = { id: e, text: e });
								return (
									null !=
										(e = l.extend({}, { text: "" }, e))
											.id && (e.id = e.id.toString()),
									null != e.text &&
										(e.text = e.text.toString()),
									null == e._resultId &&
										e.id &&
										null != this.container &&
										(e._resultId = this.generateResultId(
											this.container,
											e
										)),
									l.extend(
										{},
										{ selected: !1, disabled: !1 },
										e
									)
								);
							}),
							(n.prototype.matches = function (e, t) {
								return this.options.get("matcher")(e, t);
							}),
							n
						);
					}
				),
				e.define(
					"select2/data/array",
					["./select", "../utils", "jquery"],
					function (e, f, g) {
						function i(e, t) {
							(this._dataToConvert = t.get("data") || []),
								i.__super__.constructor.call(this, e, t);
						}
						return (
							f.Extend(i, e),
							(i.prototype.bind = function (e, t) {
								i.__super__.bind.call(this, e, t),
									this.addOptions(
										this.convertToOptions(
											this._dataToConvert
										)
									);
							}),
							(i.prototype.select = function (n) {
								var e = this.$element
									.find("option")
									.filter(function (e, t) {
										return t.value == n.id.toString();
									});
								0 === e.length &&
									((e = this.option(n)), this.addOptions(e)),
									i.__super__.select.call(this, n);
							}),
							(i.prototype.convertToOptions = function (e) {
								var t = this,
									n = this.$element.find("option"),
									i = n
										.map(function () {
											return t.item(g(this)).id;
										})
										.get(),
									r = [];
								function o(e) {
									return function () {
										return g(this).val() == e.id;
									};
								}
								for (var s = 0; s < e.length; s++) {
									var a = this._normalizeItem(e[s]);
									if (0 <= g.inArray(a.id, i)) {
										var l = n.filter(o(a)),
											c = this.item(l),
											u = g.extend(!0, {}, a, c),
											d = this.option(u);
										l.replaceWith(d);
									} else {
										var p = this.option(a);
										if (a.children) {
											var h = this.convertToOptions(
												a.children
											);
											f.appendMany(p, h);
										}
										r.push(p);
									}
								}
								return r;
							}),
							i
						);
					}
				),
				e.define(
					"select2/data/ajax",
					["./array", "../utils", "jquery"],
					function (e, t, o) {
						function n(e, t) {
							(this.ajaxOptions = this._applyDefaults(
								t.get("ajax")
							)),
								null != this.ajaxOptions.processResults &&
									(this.processResults =
										this.ajaxOptions.processResults),
								n.__super__.constructor.call(this, e, t);
						}
						return (
							t.Extend(n, e),
							(n.prototype._applyDefaults = function (e) {
								var t = {
									data: function (e) {
										return o.extend({}, e, { q: e.term });
									},
									transport: function (e, t, n) {
										var i = o.ajax(e);
										return i.then(t), i.fail(n), i;
									},
								};
								return o.extend({}, t, e, !0);
							}),
							(n.prototype.processResults = function (e) {
								return e;
							}),
							(n.prototype.query = function (n, i) {
								var r = this;
								null != this._request &&
									(o.isFunction(this._request.abort) &&
										this._request.abort(),
									(this._request = null));
								var t = o.extend(
									{ type: "GET" },
									this.ajaxOptions
								);
								function e() {
									var e = t.transport(
										t,
										function (e) {
											var t = r.processResults(e, n);
											r.options.get("debug") &&
												window.console &&
												console.error &&
												((t &&
													t.results &&
													o.isArray(t.results)) ||
													console.error(
														"Select2: The AJAX results did not return an array in the `results` key of the response."
													)),
												i(t);
										},
										function () {
											("status" in e &&
												(0 === e.status ||
													"0" === e.status)) ||
												r.trigger("results:message", {
													message: "errorLoading",
												});
										}
									);
									r._request = e;
								}
								"function" == typeof t.url &&
									(t.url = t.url.call(this.$element, n)),
									"function" == typeof t.data &&
										(t.data = t.data.call(
											this.$element,
											n
										)),
									this.ajaxOptions.delay && null != n.term
										? (this._queryTimeout &&
												window.clearTimeout(
													this._queryTimeout
												),
										  (this._queryTimeout =
												window.setTimeout(
													e,
													this.ajaxOptions.delay
												)))
										: e();
							}),
							n
						);
					}
				),
				e.define("select2/data/tags", ["jquery"], function (u) {
					function e(e, t, n) {
						var i = n.get("tags"),
							r = n.get("createTag");
						void 0 !== r && (this.createTag = r);
						var o = n.get("insertTag");
						if (
							(void 0 !== o && (this.insertTag = o),
							e.call(this, t, n),
							u.isArray(i))
						)
							for (var s = 0; s < i.length; s++) {
								var a = i[s],
									l = this._normalizeItem(a),
									c = this.option(l);
								this.$element.append(c);
							}
					}
					return (
						(e.prototype.query = function (e, c, u) {
							var d = this;
							this._removeOldTags(),
								null != c.term && null == c.page
									? e.call(this, c, function e(t, n) {
											for (
												var i = t.results, r = 0;
												r < i.length;
												r++
											) {
												var o = i[r],
													s =
														null != o.children &&
														!e(
															{
																results:
																	o.children,
															},
															!0
														);
												if (
													(
														o.text || ""
													).toUpperCase() ===
														(
															c.term || ""
														).toUpperCase() ||
													s
												)
													return (
														!n &&
														((t.data = i),
														void u(t))
													);
											}
											if (n) return !0;
											var a = d.createTag(c);
											if (null != a) {
												var l = d.option(a);
												l.attr("data-select2-tag", !0),
													d.addOptions([l]),
													d.insertTag(i, a);
											}
											(t.results = i), u(t);
									  })
									: e.call(this, c, u);
						}),
						(e.prototype.createTag = function (e, t) {
							var n = u.trim(t.term);
							return "" === n ? null : { id: n, text: n };
						}),
						(e.prototype.insertTag = function (e, t, n) {
							t.unshift(n);
						}),
						(e.prototype._removeOldTags = function (e) {
							this.$element
								.find("option[data-select2-tag]")
								.each(function () {
									this.selected || u(this).remove();
								});
						}),
						e
					);
				}),
				e.define("select2/data/tokenizer", ["jquery"], function (d) {
					function e(e, t, n) {
						var i = n.get("tokenizer");
						void 0 !== i && (this.tokenizer = i),
							e.call(this, t, n);
					}
					return (
						(e.prototype.bind = function (e, t, n) {
							e.call(this, t, n),
								(this.$search =
									t.dropdown.$search ||
									t.selection.$search ||
									n.find(".select2-search__field"));
						}),
						(e.prototype.query = function (e, t, n) {
							var r = this;
							t.term = t.term || "";
							var i = this.tokenizer(
								t,
								this.options,
								function (e) {
									var t,
										n = r._normalizeItem(e);
									if (
										!r.$element
											.find("option")
											.filter(function () {
												return d(this).val() === n.id;
											}).length
									) {
										var i = r.option(n);
										i.attr("data-select2-tag", !0),
											r._removeOldTags(),
											r.addOptions([i]);
									}
									(t = n), r.trigger("select", { data: t });
								}
							);
							i.term !== t.term &&
								(this.$search.length &&
									(this.$search.val(i.term),
									this.$search.trigger("focus")),
								(t.term = i.term)),
								e.call(this, t, n);
						}),
						(e.prototype.tokenizer = function (e, t, n, i) {
							for (
								var r = n.get("tokenSeparators") || [],
									o = t.term,
									s = 0,
									a =
										this.createTag ||
										function (e) {
											return { id: e.term, text: e.term };
										};
								s < o.length;

							) {
								var l = o[s];
								if (-1 !== d.inArray(l, r)) {
									var c = o.substr(0, s),
										u = a(d.extend({}, t, { term: c }));
									null != u
										? (i(u),
										  (o = o.substr(s + 1) || ""),
										  (s = 0))
										: s++;
								} else s++;
							}
							return { term: o };
						}),
						e
					);
				}),
				e.define("select2/data/minimumInputLength", [], function () {
					function e(e, t, n) {
						(this.minimumInputLength = n.get("minimumInputLength")),
							e.call(this, t, n);
					}
					return (
						(e.prototype.query = function (e, t, n) {
							(t.term = t.term || ""),
								t.term.length < this.minimumInputLength
									? this.trigger("results:message", {
											message: "inputTooShort",
											args: {
												minimum:
													this.minimumInputLength,
												input: t.term,
												params: t,
											},
									  })
									: e.call(this, t, n);
						}),
						e
					);
				}),
				e.define("select2/data/maximumInputLength", [], function () {
					function e(e, t, n) {
						(this.maximumInputLength = n.get("maximumInputLength")),
							e.call(this, t, n);
					}
					return (
						(e.prototype.query = function (e, t, n) {
							(t.term = t.term || ""),
								0 < this.maximumInputLength &&
								t.term.length > this.maximumInputLength
									? this.trigger("results:message", {
											message: "inputTooLong",
											args: {
												maximum:
													this.maximumInputLength,
												input: t.term,
												params: t,
											},
									  })
									: e.call(this, t, n);
						}),
						e
					);
				}),
				e.define(
					"select2/data/maximumSelectionLength",
					[],
					function () {
						function e(e, t, n) {
							(this.maximumSelectionLength = n.get(
								"maximumSelectionLength"
							)),
								e.call(this, t, n);
						}
						return (
							(e.prototype.bind = function (e, t, n) {
								var i = this;
								e.call(this, t, n),
									t.on("select", function () {
										i._checkIfMaximumSelected();
									});
							}),
							(e.prototype.query = function (e, t, n) {
								var i = this;
								this._checkIfMaximumSelected(function () {
									e.call(i, t, n);
								});
							}),
							(e.prototype._checkIfMaximumSelected = function (
								e,
								n
							) {
								var i = this;
								this.current(function (e) {
									var t = null != e ? e.length : 0;
									0 < i.maximumSelectionLength &&
									t >= i.maximumSelectionLength
										? i.trigger("results:message", {
												message: "maximumSelected",
												args: {
													maximum:
														i.maximumSelectionLength,
												},
										  })
										: n && n();
								});
							}),
							e
						);
					}
				),
				e.define(
					"select2/dropdown",
					["jquery", "./utils"],
					function (t, e) {
						function n(e, t) {
							(this.$element = e),
								(this.options = t),
								n.__super__.constructor.call(this);
						}
						return (
							e.Extend(n, e.Observable),
							(n.prototype.render = function () {
								var e = t(
									'<span class="select2-dropdown"><span class="select2-results"></span></span>'
								);
								return (
									e.attr("dir", this.options.get("dir")),
									(this.$dropdown = e)
								);
							}),
							(n.prototype.bind = function () {}),
							(n.prototype.position = function (e, t) {}),
							(n.prototype.destroy = function () {
								this.$dropdown.remove();
							}),
							n
						);
					}
				),
				e.define(
					"select2/dropdown/search",
					["jquery", "../utils"],
					function (o, e) {
						function t() {}
						return (
							(t.prototype.render = function (e) {
								var t = e.call(this),
									n = o(
										'<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>'
									);
								return (
									(this.$searchContainer = n),
									(this.$search = n.find("input")),
									t.prepend(n),
									t
								);
							}),
							(t.prototype.bind = function (e, t, n) {
								var i = this,
									r = t.id + "-results";
								e.call(this, t, n),
									this.$search.on("keydown", function (e) {
										i.trigger("keypress", e),
											(i._keyUpPrevented =
												e.isDefaultPrevented());
									}),
									this.$search.on("input", function (e) {
										o(this).off("keyup");
									}),
									this.$search.on(
										"keyup input",
										function (e) {
											i.handleSearch(e);
										}
									),
									t.on("open", function () {
										i.$search.attr("tabindex", 0),
											i.$search.attr("aria-controls", r),
											i.$search.trigger("focus"),
											window.setTimeout(function () {
												i.$search.trigger("focus");
											}, 0);
									}),
									t.on("close", function () {
										i.$search.attr("tabindex", -1),
											i.$search.removeAttr(
												"aria-controls"
											),
											i.$search.removeAttr(
												"aria-activedescendant"
											),
											i.$search.val(""),
											i.$search.trigger("blur");
									}),
									t.on("focus", function () {
										t.isOpen() ||
											i.$search.trigger("focus");
									}),
									t.on("results:all", function (e) {
										(null != e.query.term &&
											"" !== e.query.term) ||
											(i.showSearch(e)
												? i.$searchContainer.removeClass(
														"select2-search--hide"
												  )
												: i.$searchContainer.addClass(
														"select2-search--hide"
												  ));
									}),
									t.on("results:focus", function (e) {
										e.data._resultId
											? i.$search.attr(
													"aria-activedescendant",
													e.data._resultId
											  )
											: i.$search.removeAttr(
													"aria-activedescendant"
											  );
									});
							}),
							(t.prototype.handleSearch = function (e) {
								if (!this._keyUpPrevented) {
									var t = this.$search.val();
									this.trigger("query", { term: t });
								}
								this._keyUpPrevented = !1;
							}),
							(t.prototype.showSearch = function (e, t) {
								return !0;
							}),
							t
						);
					}
				),
				e.define("select2/dropdown/hidePlaceholder", [], function () {
					function e(e, t, n, i) {
						(this.placeholder = this.normalizePlaceholder(
							n.get("placeholder")
						)),
							e.call(this, t, n, i);
					}
					return (
						(e.prototype.append = function (e, t) {
							(t.results = this.removePlaceholder(t.results)),
								e.call(this, t);
						}),
						(e.prototype.normalizePlaceholder = function (e, t) {
							return (
								"string" == typeof t &&
									(t = { id: "", text: t }),
								t
							);
						}),
						(e.prototype.removePlaceholder = function (e, t) {
							for (
								var n = t.slice(0), i = t.length - 1;
								0 <= i;
								i--
							) {
								var r = t[i];
								this.placeholder.id === r.id && n.splice(i, 1);
							}
							return n;
						}),
						e
					);
				}),
				e.define(
					"select2/dropdown/infiniteScroll",
					["jquery"],
					function (n) {
						function e(e, t, n, i) {
							(this.lastParams = {}),
								e.call(this, t, n, i),
								(this.$loadingMore = this.createLoadingMore()),
								(this.loading = !1);
						}
						return (
							(e.prototype.append = function (e, t) {
								this.$loadingMore.remove(),
									(this.loading = !1),
									e.call(this, t),
									this.showLoadingMore(t) &&
										(this.$results.append(
											this.$loadingMore
										),
										this.loadMoreIfNeeded());
							}),
							(e.prototype.bind = function (e, t, n) {
								var i = this;
								e.call(this, t, n),
									t.on("query", function (e) {
										(i.lastParams = e), (i.loading = !0);
									}),
									t.on("query:append", function (e) {
										(i.lastParams = e), (i.loading = !0);
									}),
									this.$results.on(
										"scroll",
										this.loadMoreIfNeeded.bind(this)
									);
							}),
							(e.prototype.loadMoreIfNeeded = function () {
								var e = n.contains(
									document.documentElement,
									this.$loadingMore[0]
								);
								if (!this.loading && e) {
									var t =
										this.$results.offset().top +
										this.$results.outerHeight(!1);
									this.$loadingMore.offset().top +
										this.$loadingMore.outerHeight(!1) <=
										t + 50 && this.loadMore();
								}
							}),
							(e.prototype.loadMore = function () {
								this.loading = !0;
								var e = n.extend(
									{},
									{ page: 1 },
									this.lastParams
								);
								e.page++, this.trigger("query:append", e);
							}),
							(e.prototype.showLoadingMore = function (e, t) {
								return t.pagination && t.pagination.more;
							}),
							(e.prototype.createLoadingMore = function () {
								var e = n(
										'<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'
									),
									t = this.options
										.get("translations")
										.get("loadingMore");
								return e.html(t(this.lastParams)), e;
							}),
							e
						);
					}
				),
				e.define(
					"select2/dropdown/attachBody",
					["jquery", "../utils"],
					function (f, a) {
						function e(e, t, n) {
							(this.$dropdownParent = f(
								n.get("dropdownParent") || document.body
							)),
								e.call(this, t, n);
						}
						return (
							(e.prototype.bind = function (e, t, n) {
								var i = this;
								e.call(this, t, n),
									t.on("open", function () {
										i._showDropdown(),
											i._attachPositioningHandler(t),
											i._bindContainerResultHandlers(t);
									}),
									t.on("close", function () {
										i._hideDropdown(),
											i._detachPositioningHandler(t);
									}),
									this.$dropdownContainer.on(
										"mousedown",
										function (e) {
											e.stopPropagation();
										}
									);
							}),
							(e.prototype.destroy = function (e) {
								e.call(this), this.$dropdownContainer.remove();
							}),
							(e.prototype.position = function (e, t, n) {
								t.attr("class", n.attr("class")),
									t.removeClass("select2"),
									t.addClass("select2-container--open"),
									t.css({
										position: "absolute",
										top: -999999,
									}),
									(this.$container = n);
							}),
							(e.prototype.render = function (e) {
								var t = f("<span></span>"),
									n = e.call(this);
								return (
									t.append(n), (this.$dropdownContainer = t)
								);
							}),
							(e.prototype._hideDropdown = function (e) {
								this.$dropdownContainer.detach();
							}),
							(e.prototype._bindContainerResultHandlers =
								function (e, t) {
									if (!this._containerResultsHandlersBound) {
										var n = this;
										t.on("results:all", function () {
											n._positionDropdown(),
												n._resizeDropdown();
										}),
											t.on("results:append", function () {
												n._positionDropdown(),
													n._resizeDropdown();
											}),
											t.on(
												"results:message",
												function () {
													n._positionDropdown(),
														n._resizeDropdown();
												}
											),
											t.on("select", function () {
												n._positionDropdown(),
													n._resizeDropdown();
											}),
											t.on("unselect", function () {
												n._positionDropdown(),
													n._resizeDropdown();
											}),
											(this._containerResultsHandlersBound =
												!0);
									}
								}),
							(e.prototype._attachPositioningHandler = function (
								e,
								t
							) {
								var n = this,
									i = "scroll.select2." + t.id,
									r = "resize.select2." + t.id,
									o = "orientationchange.select2." + t.id,
									s = this.$container
										.parents()
										.filter(a.hasScroll);
								s.each(function () {
									a.StoreData(
										this,
										"select2-scroll-position",
										{
											x: f(this).scrollLeft(),
											y: f(this).scrollTop(),
										}
									);
								}),
									s.on(i, function (e) {
										var t = a.GetData(
											this,
											"select2-scroll-position"
										);
										f(this).scrollTop(t.y);
									}),
									f(window).on(
										i + " " + r + " " + o,
										function (e) {
											n._positionDropdown(),
												n._resizeDropdown();
										}
									);
							}),
							(e.prototype._detachPositioningHandler = function (
								e,
								t
							) {
								var n = "scroll.select2." + t.id,
									i = "resize.select2." + t.id,
									r = "orientationchange.select2." + t.id;
								this.$container
									.parents()
									.filter(a.hasScroll)
									.off(n),
									f(window).off(n + " " + i + " " + r);
							}),
							(e.prototype._positionDropdown = function () {
								var e = f(window),
									t = this.$dropdown.hasClass(
										"select2-dropdown--above"
									),
									n = this.$dropdown.hasClass(
										"select2-dropdown--below"
									),
									i = null,
									r = this.$container.offset();
								r.bottom =
									r.top + this.$container.outerHeight(!1);
								var o = {
									height: this.$container.outerHeight(!1),
								};
								(o.top = r.top), (o.bottom = r.top + o.height);
								var s = this.$dropdown.outerHeight(!1),
									a = e.scrollTop(),
									l = e.scrollTop() + e.height(),
									c = a < r.top - s,
									u = l > r.bottom + s,
									d = { left: r.left, top: o.bottom },
									p = this.$dropdownParent;
								"static" === p.css("position") &&
									(p = p.offsetParent());
								var h = { top: 0, left: 0 };
								(f.contains(document.body, p[0]) ||
									p[0].isConnected) &&
									(h = p.offset()),
									(d.top -= h.top),
									(d.left -= h.left),
									t || n || (i = "below"),
									u || !c || t
										? !c && u && t && (i = "below")
										: (i = "above"),
									("above" == i || (t && "below" !== i)) &&
										(d.top = o.top - h.top - s),
									null != i &&
										(this.$dropdown
											.removeClass(
												"select2-dropdown--below select2-dropdown--above"
											)
											.addClass("select2-dropdown--" + i),
										this.$container
											.removeClass(
												"select2-container--below select2-container--above"
											)
											.addClass(
												"select2-container--" + i
											)),
									this.$dropdownContainer.css(d);
							}),
							(e.prototype._resizeDropdown = function () {
								var e = {
									width:
										this.$container.outerWidth(!1) + "px",
								};
								this.options.get("dropdownAutoWidth") &&
									((e.minWidth = e.width),
									(e.position = "relative"),
									(e.width = "auto")),
									this.$dropdown.css(e);
							}),
							(e.prototype._showDropdown = function (e) {
								this.$dropdownContainer.appendTo(
									this.$dropdownParent
								),
									this._positionDropdown(),
									this._resizeDropdown();
							}),
							e
						);
					}
				),
				e.define(
					"select2/dropdown/minimumResultsForSearch",
					[],
					function () {
						function e(e, t, n, i) {
							(this.minimumResultsForSearch = n.get(
								"minimumResultsForSearch"
							)),
								this.minimumResultsForSearch < 0 &&
									(this.minimumResultsForSearch = 1 / 0),
								e.call(this, t, n, i);
						}
						return (
							(e.prototype.showSearch = function (e, t) {
								return (
									!(
										(function e(t) {
											for (
												var n = 0, i = 0;
												i < t.length;
												i++
											) {
												var r = t[i];
												r.children
													? (n += e(r.children))
													: n++;
											}
											return n;
										})(t.data.results) <
										this.minimumResultsForSearch
									) && e.call(this, t)
								);
							}),
							e
						);
					}
				),
				e.define(
					"select2/dropdown/selectOnClose",
					["../utils"],
					function (o) {
						function e() {}
						return (
							(e.prototype.bind = function (e, t, n) {
								var i = this;
								e.call(this, t, n),
									t.on("close", function (e) {
										i._handleSelectOnClose(e);
									});
							}),
							(e.prototype._handleSelectOnClose = function (
								e,
								t
							) {
								if (t && null != t.originalSelect2Event) {
									var n = t.originalSelect2Event;
									if (
										"select" === n._type ||
										"unselect" === n._type
									)
										return;
								}
								var i = this.getHighlightedResults();
								if (!(i.length < 1)) {
									var r = o.GetData(i[0], "data");
									(null != r.element && r.element.selected) ||
										(null == r.element && r.selected) ||
										this.trigger("select", { data: r });
								}
							}),
							e
						);
					}
				),
				e.define("select2/dropdown/closeOnSelect", [], function () {
					function e() {}
					return (
						(e.prototype.bind = function (e, t, n) {
							var i = this;
							e.call(this, t, n),
								t.on("select", function (e) {
									i._selectTriggered(e);
								}),
								t.on("unselect", function (e) {
									i._selectTriggered(e);
								});
						}),
						(e.prototype._selectTriggered = function (e, t) {
							var n = t.originalEvent;
							(n && (n.ctrlKey || n.metaKey)) ||
								this.trigger("close", {
									originalEvent: n,
									originalSelect2Event: t,
								});
						}),
						e
					);
				}),
				e.define("select2/i18n/en", [], function () {
					return {
						errorLoading: function () {
							return "The results could not be loaded.";
						},
						inputTooLong: function (e) {
							var t = e.input.length - e.maximum,
								n = "Please delete " + t + " character";
							return 1 != t && (n += "s"), n;
						},
						inputTooShort: function (e) {
							return (
								"Please enter " +
								(e.minimum - e.input.length) +
								" or more characters"
							);
						},
						loadingMore: function () {
							return "Loading more results…";
						},
						maximumSelected: function (e) {
							var t =
								"You can only select " + e.maximum + " item";
							return 1 != e.maximum && (t += "s"), t;
						},
						noResults: function () {
							return "No results found";
						},
						searching: function () {
							return "Searching…";
						},
						removeAllItems: function () {
							return "Remove all items";
						},
					};
				}),
				e.define(
					"select2/defaults",
					[
						"jquery",
						"require",
						"./results",
						"./selection/single",
						"./selection/multiple",
						"./selection/placeholder",
						"./selection/allowClear",
						"./selection/search",
						"./selection/eventRelay",
						"./utils",
						"./translation",
						"./diacritics",
						"./data/select",
						"./data/array",
						"./data/ajax",
						"./data/tags",
						"./data/tokenizer",
						"./data/minimumInputLength",
						"./data/maximumInputLength",
						"./data/maximumSelectionLength",
						"./dropdown",
						"./dropdown/search",
						"./dropdown/hidePlaceholder",
						"./dropdown/infiniteScroll",
						"./dropdown/attachBody",
						"./dropdown/minimumResultsForSearch",
						"./dropdown/selectOnClose",
						"./dropdown/closeOnSelect",
						"./i18n/en",
					],
					function (
						c,
						u,
						d,
						p,
						h,
						f,
						g,
						m,
						v,
						y,
						s,
						t,
						_,
						w,
						$,
						b,
						A,
						x,
						D,
						S,
						C,
						E,
						O,
						T,
						q,
						j,
						L,
						I,
						e
					) {
						function n() {
							this.reset();
						}
						return (
							(n.prototype.apply = function (e) {
								if (
									null ==
									(e = c.extend(!0, {}, this.defaults, e))
										.dataAdapter
								) {
									if (
										(null != e.ajax
											? (e.dataAdapter = $)
											: null != e.data
											? (e.dataAdapter = w)
											: (e.dataAdapter = _),
										0 < e.minimumInputLength &&
											(e.dataAdapter = y.Decorate(
												e.dataAdapter,
												x
											)),
										0 < e.maximumInputLength &&
											(e.dataAdapter = y.Decorate(
												e.dataAdapter,
												D
											)),
										0 < e.maximumSelectionLength &&
											(e.dataAdapter = y.Decorate(
												e.dataAdapter,
												S
											)),
										e.tags &&
											(e.dataAdapter = y.Decorate(
												e.dataAdapter,
												b
											)),
										(null == e.tokenSeparators &&
											null == e.tokenizer) ||
											(e.dataAdapter = y.Decorate(
												e.dataAdapter,
												A
											)),
										null != e.query)
									) {
										var t = u(e.amdBase + "compat/query");
										e.dataAdapter = y.Decorate(
											e.dataAdapter,
											t
										);
									}
									if (null != e.initSelection) {
										var n = u(
											e.amdBase + "compat/initSelection"
										);
										e.dataAdapter = y.Decorate(
											e.dataAdapter,
											n
										);
									}
								}
								if (
									(null == e.resultsAdapter &&
										((e.resultsAdapter = d),
										null != e.ajax &&
											(e.resultsAdapter = y.Decorate(
												e.resultsAdapter,
												T
											)),
										null != e.placeholder &&
											(e.resultsAdapter = y.Decorate(
												e.resultsAdapter,
												O
											)),
										e.selectOnClose &&
											(e.resultsAdapter = y.Decorate(
												e.resultsAdapter,
												L
											))),
									null == e.dropdownAdapter)
								) {
									if (e.multiple) e.dropdownAdapter = C;
									else {
										var i = y.Decorate(C, E);
										e.dropdownAdapter = i;
									}
									if (
										(0 !== e.minimumResultsForSearch &&
											(e.dropdownAdapter = y.Decorate(
												e.dropdownAdapter,
												j
											)),
										e.closeOnSelect &&
											(e.dropdownAdapter = y.Decorate(
												e.dropdownAdapter,
												I
											)),
										null != e.dropdownCssClass ||
											null != e.dropdownCss ||
											null != e.adaptDropdownCssClass)
									) {
										var r = u(
											e.amdBase + "compat/dropdownCss"
										);
										e.dropdownAdapter = y.Decorate(
											e.dropdownAdapter,
											r
										);
									}
									e.dropdownAdapter = y.Decorate(
										e.dropdownAdapter,
										q
									);
								}
								if (null == e.selectionAdapter) {
									if (
										(e.multiple
											? (e.selectionAdapter = h)
											: (e.selectionAdapter = p),
										null != e.placeholder &&
											(e.selectionAdapter = y.Decorate(
												e.selectionAdapter,
												f
											)),
										e.allowClear &&
											(e.selectionAdapter = y.Decorate(
												e.selectionAdapter,
												g
											)),
										e.multiple &&
											(e.selectionAdapter = y.Decorate(
												e.selectionAdapter,
												m
											)),
										null != e.containerCssClass ||
											null != e.containerCss ||
											null != e.adaptContainerCssClass)
									) {
										var o = u(
											e.amdBase + "compat/containerCss"
										);
										e.selectionAdapter = y.Decorate(
											e.selectionAdapter,
											o
										);
									}
									e.selectionAdapter = y.Decorate(
										e.selectionAdapter,
										v
									);
								}
								(e.language = this._resolveLanguage(
									e.language
								)),
									e.language.push("en");
								for (
									var s = [], a = 0;
									a < e.language.length;
									a++
								) {
									var l = e.language[a];
									-1 === s.indexOf(l) && s.push(l);
								}
								return (
									(e.language = s),
									(e.translations = this._processTranslations(
										e.language,
										e.debug
									)),
									e
								);
							}),
							(n.prototype.reset = function () {
								function a(e) {
									return e.replace(
										/[^\u0000-\u007E]/g,
										function (e) {
											return t[e] || e;
										}
									);
								}
								this.defaults = {
									amdBase: "./",
									amdLanguageBase: "./i18n/",
									closeOnSelect: !0,
									debug: !1,
									dropdownAutoWidth: !1,
									escapeMarkup: y.escapeMarkup,
									language: {},
									matcher: function e(t, n) {
										if ("" === c.trim(t.term)) return n;
										if (
											n.children &&
											0 < n.children.length
										) {
											for (
												var i = c.extend(!0, {}, n),
													r = n.children.length - 1;
												0 <= r;
												r--
											)
												null == e(t, n.children[r]) &&
													i.children.splice(r, 1);
											return 0 < i.children.length
												? i
												: e(t, i);
										}
										var o = a(n.text).toUpperCase(),
											s = a(t.term).toUpperCase();
										return -1 < o.indexOf(s) ? n : null;
									},
									minimumInputLength: 0,
									maximumInputLength: 0,
									maximumSelectionLength: 0,
									minimumResultsForSearch: 0,
									selectOnClose: !1,
									scrollAfterSelect: !1,
									sorter: function (e) {
										return e;
									},
									templateResult: function (e) {
										return e.text;
									},
									templateSelection: function (e) {
										return e.text;
									},
									theme: "default",
									width: "resolve",
								};
							}),
							(n.prototype.applyFromElement = function (e, t) {
								var n = e.language,
									i = this.defaults.language,
									r = t.prop("lang"),
									o = t.closest("[lang]").prop("lang"),
									s = Array.prototype.concat.call(
										this._resolveLanguage(r),
										this._resolveLanguage(n),
										this._resolveLanguage(i),
										this._resolveLanguage(o)
									);
								return (e.language = s), e;
							}),
							(n.prototype._resolveLanguage = function (e) {
								if (!e) return [];
								if (c.isEmptyObject(e)) return [];
								if (c.isPlainObject(e)) return [e];
								var t;
								t = c.isArray(e) ? e : [e];
								for (var n = [], i = 0; i < t.length; i++)
									if (
										(n.push(t[i]),
										"string" == typeof t[i] &&
											0 < t[i].indexOf("-"))
									) {
										var r = t[i].split("-")[0];
										n.push(r);
									}
								return n;
							}),
							(n.prototype._processTranslations = function (
								e,
								t
							) {
								for (
									var n = new s(), i = 0;
									i < e.length;
									i++
								) {
									var r = new s(),
										o = e[i];
									if ("string" == typeof o)
										try {
											r = s.loadPath(o);
										} catch (e) {
											try {
												(o =
													this.defaults
														.amdLanguageBase + o),
													(r = s.loadPath(o));
											} catch (e) {
												t &&
													window.console &&
													console.warn &&
													console.warn(
														'Select2: The language file for "' +
															o +
															'" could not be automatically loaded. A fallback will be used instead.'
													);
											}
										}
									else r = c.isPlainObject(o) ? new s(o) : o;
									n.extend(r);
								}
								return n;
							}),
							(n.prototype.set = function (e, t) {
								var n = {};
								n[c.camelCase(e)] = t;
								var i = y._convertData(n);
								c.extend(!0, this.defaults, i);
							}),
							new n()
						);
					}
				),
				e.define(
					"select2/options",
					["require", "jquery", "./defaults", "./utils"],
					function (i, d, r, p) {
						function e(e, t) {
							if (
								((this.options = e),
								null != t && this.fromElement(t),
								null != t &&
									(this.options = r.applyFromElement(
										this.options,
										t
									)),
								(this.options = r.apply(this.options)),
								t && t.is("input"))
							) {
								var n = i(
									this.get("amdBase") + "compat/inputData"
								);
								this.options.dataAdapter = p.Decorate(
									this.options.dataAdapter,
									n
								);
							}
						}
						return (
							(e.prototype.fromElement = function (e) {
								var t = ["select2"];
								null == this.options.multiple &&
									(this.options.multiple =
										e.prop("multiple")),
									null == this.options.disabled &&
										(this.options.disabled =
											e.prop("disabled")),
									null == this.options.dir &&
										(e.prop("dir")
											? (this.options.dir = e.prop("dir"))
											: e.closest("[dir]").prop("dir")
											? (this.options.dir = e
													.closest("[dir]")
													.prop("dir"))
											: (this.options.dir = "ltr")),
									e.prop("disabled", this.options.disabled),
									e.prop("multiple", this.options.multiple),
									p.GetData(e[0], "select2Tags") &&
										(this.options.debug &&
											window.console &&
											console.warn &&
											console.warn(
												'Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'
											),
										p.StoreData(
											e[0],
											"data",
											p.GetData(e[0], "select2Tags")
										),
										p.StoreData(e[0], "tags", !0)),
									p.GetData(e[0], "ajaxUrl") &&
										(this.options.debug &&
											window.console &&
											console.warn &&
											console.warn(
												"Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."
											),
										e.attr(
											"ajax--url",
											p.GetData(e[0], "ajaxUrl")
										),
										p.StoreData(
											e[0],
											"ajax-Url",
											p.GetData(e[0], "ajaxUrl")
										));
								var n = {};
								function i(e, t) {
									return t.toUpperCase();
								}
								for (
									var r = 0;
									r < e[0].attributes.length;
									r++
								) {
									var o = e[0].attributes[r].name,
										s = "data-";
									if (o.substr(0, s.length) == s) {
										var a = o.substring(s.length),
											l = p.GetData(e[0], a);
										n[a.replace(/-([a-z])/g, i)] = l;
									}
								}
								d.fn.jquery &&
									"1." == d.fn.jquery.substr(0, 2) &&
									e[0].dataset &&
									(n = d.extend(!0, {}, e[0].dataset, n));
								var c = d.extend(!0, {}, p.GetData(e[0]), n);
								for (var u in (c = p._convertData(c)))
									-1 < d.inArray(u, t) ||
										(d.isPlainObject(this.options[u])
											? d.extend(this.options[u], c[u])
											: (this.options[u] = c[u]));
								return this;
							}),
							(e.prototype.get = function (e) {
								return this.options[e];
							}),
							(e.prototype.set = function (e, t) {
								this.options[e] = t;
							}),
							e
						);
					}
				),
				e.define(
					"select2/core",
					["jquery", "./options", "./utils", "./keys"],
					function (o, c, u, i) {
						var d = function (e, t) {
							null != u.GetData(e[0], "select2") &&
								u.GetData(e[0], "select2").destroy(),
								(this.$element = e),
								(this.id = this._generateId(e)),
								(t = t || {}),
								(this.options = new c(t, e)),
								d.__super__.constructor.call(this);
							var n = e.attr("tabindex") || 0;
							u.StoreData(e[0], "old-tabindex", n),
								e.attr("tabindex", "-1");
							var i = this.options.get("dataAdapter");
							this.dataAdapter = new i(e, this.options);
							var r = this.render();
							this._placeContainer(r);
							var o = this.options.get("selectionAdapter");
							(this.selection = new o(e, this.options)),
								(this.$selection = this.selection.render()),
								this.selection.position(this.$selection, r);
							var s = this.options.get("dropdownAdapter");
							(this.dropdown = new s(e, this.options)),
								(this.$dropdown = this.dropdown.render()),
								this.dropdown.position(this.$dropdown, r);
							var a = this.options.get("resultsAdapter");
							(this.results = new a(
								e,
								this.options,
								this.dataAdapter
							)),
								(this.$results = this.results.render()),
								this.results.position(
									this.$results,
									this.$dropdown
								);
							var l = this;
							this._bindAdapters(),
								this._registerDomEvents(),
								this._registerDataEvents(),
								this._registerSelectionEvents(),
								this._registerDropdownEvents(),
								this._registerResultsEvents(),
								this._registerEvents(),
								this.dataAdapter.current(function (e) {
									l.trigger("selection:update", { data: e });
								}),
								e.addClass("select2-hidden-accessible"),
								e.attr("aria-hidden", "true"),
								this._syncAttributes(),
								u.StoreData(e[0], "select2", this),
								e.data("select2", this);
						};
						return (
							u.Extend(d, u.Observable),
							(d.prototype._generateId = function (e) {
								return (
									"select2-" +
									(null != e.attr("id")
										? e.attr("id")
										: null != e.attr("name")
										? e.attr("name") +
										  "-" +
										  u.generateChars(2)
										: u.generateChars(4)
									).replace(/(:|\.|\[|\]|,)/g, "")
								);
							}),
							(d.prototype._placeContainer = function (e) {
								e.insertAfter(this.$element);
								var t = this._resolveWidth(
									this.$element,
									this.options.get("width")
								);
								null != t && e.css("width", t);
							}),
							(d.prototype._resolveWidth = function (e, t) {
								var n =
									/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
								if ("resolve" == t) {
									var i = this._resolveWidth(e, "style");
									return null != i
										? i
										: this._resolveWidth(e, "element");
								}
								if ("element" == t) {
									var r = e.outerWidth(!1);
									return r <= 0 ? "auto" : r + "px";
								}
								if ("style" != t)
									return "computedstyle" != t
										? t
										: window.getComputedStyle(e[0]).width;
								var o = e.attr("style");
								if ("string" != typeof o) return null;
								for (
									var s = o.split(";"), a = 0, l = s.length;
									a < l;
									a += 1
								) {
									var c = s[a].replace(/\s/g, "").match(n);
									if (null !== c && 1 <= c.length)
										return c[1];
								}
								return null;
							}),
							(d.prototype._bindAdapters = function () {
								this.dataAdapter.bind(this, this.$container),
									this.selection.bind(this, this.$container),
									this.dropdown.bind(this, this.$container),
									this.results.bind(this, this.$container);
							}),
							(d.prototype._registerDomEvents = function () {
								var t = this;
								this.$element.on("change.select2", function () {
									t.dataAdapter.current(function (e) {
										t.trigger("selection:update", {
											data: e,
										});
									});
								}),
									this.$element.on(
										"focus.select2",
										function (e) {
											t.trigger("focus", e);
										}
									),
									(this._syncA = u.bind(
										this._syncAttributes,
										this
									)),
									(this._syncS = u.bind(
										this._syncSubtree,
										this
									)),
									this.$element[0].attachEvent &&
										this.$element[0].attachEvent(
											"onpropertychange",
											this._syncA
										);
								var e =
									window.MutationObserver ||
									window.WebKitMutationObserver ||
									window.MozMutationObserver;
								null != e
									? ((this._observer = new e(function (e) {
											t._syncA(), t._syncS(null, e);
									  })),
									  this._observer.observe(this.$element[0], {
											attributes: !0,
											childList: !0,
											subtree: !1,
									  }))
									: this.$element[0].addEventListener &&
									  (this.$element[0].addEventListener(
											"DOMAttrModified",
											t._syncA,
											!1
									  ),
									  this.$element[0].addEventListener(
											"DOMNodeInserted",
											t._syncS,
											!1
									  ),
									  this.$element[0].addEventListener(
											"DOMNodeRemoved",
											t._syncS,
											!1
									  ));
							}),
							(d.prototype._registerDataEvents = function () {
								var n = this;
								this.dataAdapter.on("*", function (e, t) {
									n.trigger(e, t);
								});
							}),
							(d.prototype._registerSelectionEvents =
								function () {
									var n = this,
										i = ["toggle", "focus"];
									this.selection.on("toggle", function () {
										n.toggleDropdown();
									}),
										this.selection.on(
											"focus",
											function (e) {
												n.focus(e);
											}
										),
										this.selection.on("*", function (e, t) {
											-1 === o.inArray(e, i) &&
												n.trigger(e, t);
										});
								}),
							(d.prototype._registerDropdownEvents = function () {
								var n = this;
								this.dropdown.on("*", function (e, t) {
									n.trigger(e, t);
								});
							}),
							(d.prototype._registerResultsEvents = function () {
								var n = this;
								this.results.on("*", function (e, t) {
									n.trigger(e, t);
								});
							}),
							(d.prototype._registerEvents = function () {
								var n = this;
								this.on("open", function () {
									n.$container.addClass(
										"select2-container--open"
									);
								}),
									this.on("close", function () {
										n.$container.removeClass(
											"select2-container--open"
										);
									}),
									this.on("enable", function () {
										n.$container.removeClass(
											"select2-container--disabled"
										);
									}),
									this.on("disable", function () {
										n.$container.addClass(
											"select2-container--disabled"
										);
									}),
									this.on("blur", function () {
										n.$container.removeClass(
											"select2-container--focus"
										);
									}),
									this.on("query", function (t) {
										n.isOpen() || n.trigger("open", {}),
											this.dataAdapter.query(
												t,
												function (e) {
													n.trigger("results:all", {
														data: e,
														query: t,
													});
												}
											);
									}),
									this.on("query:append", function (t) {
										this.dataAdapter.query(t, function (e) {
											n.trigger("results:append", {
												data: e,
												query: t,
											});
										});
									}),
									this.on("keypress", function (e) {
										var t = e.which;
										n.isOpen()
											? t === i.ESC ||
											  t === i.TAB ||
											  (t === i.UP && e.altKey)
												? (n.close(e),
												  e.preventDefault())
												: t === i.ENTER
												? (n.trigger(
														"results:select",
														{}
												  ),
												  e.preventDefault())
												: t === i.SPACE && e.ctrlKey
												? (n.trigger(
														"results:toggle",
														{}
												  ),
												  e.preventDefault())
												: t === i.UP
												? (n.trigger(
														"results:previous",
														{}
												  ),
												  e.preventDefault())
												: t === i.DOWN &&
												  (n.trigger(
														"results:next",
														{}
												  ),
												  e.preventDefault())
											: (t === i.ENTER ||
													t === i.SPACE ||
													(t === i.DOWN &&
														e.altKey)) &&
											  (n.open(), e.preventDefault());
									});
							}),
							(d.prototype._syncAttributes = function () {
								this.options.set(
									"disabled",
									this.$element.prop("disabled")
								),
									this.isDisabled()
										? (this.isOpen() && this.close(),
										  this.trigger("disable", {}))
										: this.trigger("enable", {});
							}),
							(d.prototype._isChangeMutation = function (e, t) {
								var n = !1,
									i = this;
								if (
									!e ||
									!e.target ||
									"OPTION" === e.target.nodeName ||
									"OPTGROUP" === e.target.nodeName
								) {
									if (t)
										if (
											t.addedNodes &&
											0 < t.addedNodes.length
										)
											for (
												var r = 0;
												r < t.addedNodes.length;
												r++
											) {
												t.addedNodes[r].selected &&
													(n = !0);
											}
										else
											t.removedNodes &&
											0 < t.removedNodes.length
												? (n = !0)
												: o.isArray(t) &&
												  o.each(t, function (e, t) {
														if (
															i._isChangeMutation(
																e,
																t
															)
														)
															return !(n = !0);
												  });
									else n = !0;
									return n;
								}
							}),
							(d.prototype._syncSubtree = function (e, t) {
								var n = this._isChangeMutation(e, t),
									i = this;
								n &&
									this.dataAdapter.current(function (e) {
										i.trigger("selection:update", {
											data: e,
										});
									});
							}),
							(d.prototype.trigger = function (e, t) {
								var n = d.__super__.trigger,
									i = {
										open: "opening",
										close: "closing",
										select: "selecting",
										unselect: "unselecting",
										clear: "clearing",
									};
								if ((void 0 === t && (t = {}), e in i)) {
									var r = i[e],
										o = { prevented: !1, name: e, args: t };
									if ((n.call(this, r, o), o.prevented))
										return void (t.prevented = !0);
								}
								n.call(this, e, t);
							}),
							(d.prototype.toggleDropdown = function () {
								this.isDisabled() ||
									(this.isOpen()
										? this.close()
										: this.open());
							}),
							(d.prototype.open = function () {
								this.isOpen() ||
									this.isDisabled() ||
									this.trigger("query", {});
							}),
							(d.prototype.close = function (e) {
								this.isOpen() &&
									this.trigger("close", { originalEvent: e });
							}),
							(d.prototype.isEnabled = function () {
								return !this.isDisabled();
							}),
							(d.prototype.isDisabled = function () {
								return this.options.get("disabled");
							}),
							(d.prototype.isOpen = function () {
								return this.$container.hasClass(
									"select2-container--open"
								);
							}),
							(d.prototype.hasFocus = function () {
								return this.$container.hasClass(
									"select2-container--focus"
								);
							}),
							(d.prototype.focus = function (e) {
								this.hasFocus() ||
									(this.$container.addClass(
										"select2-container--focus"
									),
									this.trigger("focus", {}));
							}),
							(d.prototype.enable = function (e) {
								this.options.get("debug") &&
									window.console &&
									console.warn &&
									console.warn(
										'Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'
									),
									(null != e && 0 !== e.length) || (e = [!0]);
								var t = !e[0];
								this.$element.prop("disabled", t);
							}),
							(d.prototype.data = function () {
								this.options.get("debug") &&
									0 < arguments.length &&
									window.console &&
									console.warn &&
									console.warn(
										'Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.'
									);
								var t = [];
								return (
									this.dataAdapter.current(function (e) {
										t = e;
									}),
									t
								);
							}),
							(d.prototype.val = function (e) {
								if (
									(this.options.get("debug") &&
										window.console &&
										console.warn &&
										console.warn(
											'Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'
										),
									null == e || 0 === e.length)
								)
									return this.$element.val();
								var t = e[0];
								o.isArray(t) &&
									(t = o.map(t, function (e) {
										return e.toString();
									})),
									this.$element
										.val(t)
										.trigger("input")
										.trigger("change");
							}),
							(d.prototype.destroy = function () {
								this.$container.remove(),
									this.$element[0].detachEvent &&
										this.$element[0].detachEvent(
											"onpropertychange",
											this._syncA
										),
									null != this._observer
										? (this._observer.disconnect(),
										  (this._observer = null))
										: this.$element[0]
												.removeEventListener &&
										  (this.$element[0].removeEventListener(
												"DOMAttrModified",
												this._syncA,
												!1
										  ),
										  this.$element[0].removeEventListener(
												"DOMNodeInserted",
												this._syncS,
												!1
										  ),
										  this.$element[0].removeEventListener(
												"DOMNodeRemoved",
												this._syncS,
												!1
										  )),
									(this._syncA = null),
									(this._syncS = null),
									this.$element.off(".select2"),
									this.$element.attr(
										"tabindex",
										u.GetData(
											this.$element[0],
											"old-tabindex"
										)
									),
									this.$element.removeClass(
										"select2-hidden-accessible"
									),
									this.$element.attr("aria-hidden", "false"),
									u.RemoveData(this.$element[0]),
									this.$element.removeData("select2"),
									this.dataAdapter.destroy(),
									this.selection.destroy(),
									this.dropdown.destroy(),
									this.results.destroy(),
									(this.dataAdapter = null),
									(this.selection = null),
									(this.dropdown = null),
									(this.results = null);
							}),
							(d.prototype.render = function () {
								var e = o(
									'<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>'
								);
								return (
									e.attr("dir", this.options.get("dir")),
									(this.$container = e),
									this.$container.addClass(
										"select2-container--" +
											this.options.get("theme")
									),
									u.StoreData(e[0], "element", this.$element),
									e
								);
							}),
							d
						);
					}
				),
				e.define("select2/compat/utils", ["jquery"], function (s) {
					return {
						syncCssClasses: function (e, t, n) {
							var i,
								r,
								o = [];
							(i = s.trim(e.attr("class"))) &&
								s((i = "" + i).split(/\s+/)).each(function () {
									0 === this.indexOf("select2-") &&
										o.push(this);
								}),
								(i = s.trim(t.attr("class"))) &&
									s((i = "" + i).split(/\s+/)).each(
										function () {
											0 !== this.indexOf("select2-") &&
												null != (r = n(this)) &&
												o.push(r);
										}
									),
								e.attr("class", o.join(" "));
						},
					};
				}),
				e.define(
					"select2/compat/containerCss",
					["jquery", "./utils"],
					function (s, a) {
						function l(e) {
							return null;
						}
						function e() {}
						return (
							(e.prototype.render = function (e) {
								var t = e.call(this),
									n =
										this.options.get("containerCssClass") ||
										"";
								s.isFunction(n) && (n = n(this.$element));
								var i = this.options.get(
									"adaptContainerCssClass"
								);
								if (((i = i || l), -1 !== n.indexOf(":all:"))) {
									n = n.replace(":all:", "");
									var r = i;
									i = function (e) {
										var t = r(e);
										return null != t ? t + " " + e : e;
									};
								}
								var o = this.options.get("containerCss") || {};
								return (
									s.isFunction(o) && (o = o(this.$element)),
									a.syncCssClasses(t, this.$element, i),
									t.css(o),
									t.addClass(n),
									t
								);
							}),
							e
						);
					}
				),
				e.define(
					"select2/compat/dropdownCss",
					["jquery", "./utils"],
					function (s, a) {
						function l(e) {
							return null;
						}
						function e() {}
						return (
							(e.prototype.render = function (e) {
								var t = e.call(this),
									n =
										this.options.get("dropdownCssClass") ||
										"";
								s.isFunction(n) && (n = n(this.$element));
								var i = this.options.get(
									"adaptDropdownCssClass"
								);
								if (((i = i || l), -1 !== n.indexOf(":all:"))) {
									n = n.replace(":all:", "");
									var r = i;
									i = function (e) {
										var t = r(e);
										return null != t ? t + " " + e : e;
									};
								}
								var o = this.options.get("dropdownCss") || {};
								return (
									s.isFunction(o) && (o = o(this.$element)),
									a.syncCssClasses(t, this.$element, i),
									t.css(o),
									t.addClass(n),
									t
								);
							}),
							e
						);
					}
				),
				e.define(
					"select2/compat/initSelection",
					["jquery"],
					function (i) {
						function e(e, t, n) {
							n.get("debug") &&
								window.console &&
								console.warn &&
								console.warn(
									"Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2"
								),
								(this.initSelection = n.get("initSelection")),
								(this._isInitialized = !1),
								e.call(this, t, n);
						}
						return (
							(e.prototype.current = function (e, t) {
								var n = this;
								this._isInitialized
									? e.call(this, t)
									: this.initSelection.call(
											null,
											this.$element,
											function (e) {
												(n._isInitialized = !0),
													i.isArray(e) || (e = [e]),
													t(e);
											}
									  );
							}),
							e
						);
					}
				),
				e.define(
					"select2/compat/inputData",
					["jquery", "../utils"],
					function (s, i) {
						function e(e, t, n) {
							(this._currentData = []),
								(this._valueSeparator =
									n.get("valueSeparator") || ","),
								"hidden" === t.prop("type") &&
									n.get("debug") &&
									console &&
									console.warn &&
									console.warn(
										"Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead."
									),
								e.call(this, t, n);
						}
						return (
							(e.prototype.current = function (e, t) {
								function i(e, t) {
									var n = [];
									return (
										e.selected || -1 !== s.inArray(e.id, t)
											? ((e.selected = !0), n.push(e))
											: (e.selected = !1),
										e.children &&
											n.push.apply(n, i(e.children, t)),
										n
									);
								}
								for (
									var n = [], r = 0;
									r < this._currentData.length;
									r++
								) {
									var o = this._currentData[r];
									n.push.apply(
										n,
										i(
											o,
											this.$element
												.val()
												.split(this._valueSeparator)
										)
									);
								}
								t(n);
							}),
							(e.prototype.select = function (e, t) {
								if (this.options.get("multiple")) {
									var n = this.$element.val();
									(n += this._valueSeparator + t.id),
										this.$element.val(n),
										this.$element
											.trigger("input")
											.trigger("change");
								} else
									this.current(function (e) {
										s.map(e, function (e) {
											e.selected = !1;
										});
									}),
										this.$element.val(t.id),
										this.$element
											.trigger("input")
											.trigger("change");
							}),
							(e.prototype.unselect = function (e, r) {
								var o = this;
								(r.selected = !1),
									this.current(function (e) {
										for (
											var t = [], n = 0;
											n < e.length;
											n++
										) {
											var i = e[n];
											r.id != i.id && t.push(i.id);
										}
										o.$element.val(
											t.join(o._valueSeparator)
										),
											o.$element
												.trigger("input")
												.trigger("change");
									});
							}),
							(e.prototype.query = function (e, t, n) {
								for (
									var i = [], r = 0;
									r < this._currentData.length;
									r++
								) {
									var o = this._currentData[r],
										s = this.matches(t, o);
									null !== s && i.push(s);
								}
								n({ results: i });
							}),
							(e.prototype.addOptions = function (e, t) {
								var n = s.map(t, function (e) {
									return i.GetData(e[0], "data");
								});
								this._currentData.push.apply(
									this._currentData,
									n
								);
							}),
							e
						);
					}
				),
				e.define("select2/compat/matcher", ["jquery"], function (s) {
					return function (o) {
						return function (e, t) {
							var n = s.extend(!0, {}, t);
							if (null == e.term || "" === s.trim(e.term))
								return n;
							if (t.children) {
								for (
									var i = t.children.length - 1;
									0 <= i;
									i--
								) {
									var r = t.children[i];
									o(e.term, r.text, r) ||
										n.children.splice(i, 1);
								}
								if (0 < n.children.length) return n;
							}
							return o(e.term, t.text, t) ? n : null;
						};
					};
				}),
				e.define("select2/compat/query", [], function () {
					function e(e, t, n) {
						n.get("debug") &&
							window.console &&
							console.warn &&
							console.warn(
								"Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2."
							),
							e.call(this, t, n);
					}
					return (
						(e.prototype.query = function (e, t, n) {
							(t.callback = n),
								this.options.get("query").call(null, t);
						}),
						e
					);
				}),
				e.define("select2/dropdown/attachContainer", [], function () {
					function e(e, t, n) {
						e.call(this, t, n);
					}
					return (
						(e.prototype.position = function (e, t, n) {
							n.find(".dropdown-wrapper").append(t),
								t.addClass("select2-dropdown--below"),
								n.addClass("select2-container--below");
						}),
						e
					);
				}),
				e.define("select2/dropdown/stopPropagation", [], function () {
					function e() {}
					return (
						(e.prototype.bind = function (e, t, n) {
							e.call(this, t, n);
							this.$dropdown.on(
								[
									"blur",
									"change",
									"click",
									"dblclick",
									"focus",
									"focusin",
									"focusout",
									"input",
									"keydown",
									"keyup",
									"keypress",
									"mousedown",
									"mouseenter",
									"mouseleave",
									"mousemove",
									"mouseover",
									"mouseup",
									"search",
									"touchend",
									"touchstart",
								].join(" "),
								function (e) {
									e.stopPropagation();
								}
							);
						}),
						e
					);
				}),
				e.define("select2/selection/stopPropagation", [], function () {
					function e() {}
					return (
						(e.prototype.bind = function (e, t, n) {
							e.call(this, t, n);
							this.$selection.on(
								[
									"blur",
									"change",
									"click",
									"dblclick",
									"focus",
									"focusin",
									"focusout",
									"input",
									"keydown",
									"keyup",
									"keypress",
									"mousedown",
									"mouseenter",
									"mouseleave",
									"mousemove",
									"mouseover",
									"mouseup",
									"search",
									"touchend",
									"touchstart",
								].join(" "),
								function (e) {
									e.stopPropagation();
								}
							);
						}),
						e
					);
				}),
				(l = function (p) {
					var h,
						f,
						e = [
							"wheel",
							"mousewheel",
							"DOMMouseScroll",
							"MozMousePixelScroll",
						],
						t =
							"onwheel" in document || 9 <= document.documentMode
								? ["wheel"]
								: [
										"mousewheel",
										"DomMouseScroll",
										"MozMousePixelScroll",
								  ],
						g = Array.prototype.slice;
					if (p.event.fixHooks)
						for (var n = e.length; n; )
							p.event.fixHooks[e[--n]] = p.event.mouseHooks;
					var m = (p.event.special.mousewheel = {
						version: "3.1.12",
						setup: function () {
							if (this.addEventListener)
								for (var e = t.length; e; )
									this.addEventListener(t[--e], i, !1);
							else this.onmousewheel = i;
							p.data(
								this,
								"mousewheel-line-height",
								m.getLineHeight(this)
							),
								p.data(
									this,
									"mousewheel-page-height",
									m.getPageHeight(this)
								);
						},
						teardown: function () {
							if (this.removeEventListener)
								for (var e = t.length; e; )
									this.removeEventListener(t[--e], i, !1);
							else this.onmousewheel = null;
							p.removeData(this, "mousewheel-line-height"),
								p.removeData(this, "mousewheel-page-height");
						},
						getLineHeight: function (e) {
							var t = p(e),
								n =
									t[
										"offsetParent" in p.fn
											? "offsetParent"
											: "parent"
									]();
							return (
								n.length || (n = p("body")),
								parseInt(n.css("fontSize"), 10) ||
									parseInt(t.css("fontSize"), 10) ||
									16
							);
						},
						getPageHeight: function (e) {
							return p(e).height();
						},
						settings: { adjustOldDeltas: !0, normalizeOffset: !0 },
					});
					function i(e) {
						var t,
							n = e || window.event,
							i = g.call(arguments, 1),
							r = 0,
							o = 0,
							s = 0,
							a = 0,
							l = 0;
						if (
							(((e = p.event.fix(n)).type = "mousewheel"),
							"detail" in n && (s = -1 * n.detail),
							"wheelDelta" in n && (s = n.wheelDelta),
							"wheelDeltaY" in n && (s = n.wheelDeltaY),
							"wheelDeltaX" in n && (o = -1 * n.wheelDeltaX),
							"axis" in n &&
								n.axis === n.HORIZONTAL_AXIS &&
								((o = -1 * s), (s = 0)),
							(r = 0 === s ? o : s),
							"deltaY" in n && (r = s = -1 * n.deltaY),
							"deltaX" in n &&
								((o = n.deltaX), 0 === s && (r = -1 * o)),
							0 !== s || 0 !== o)
						) {
							if (1 === n.deltaMode) {
								var c = p.data(this, "mousewheel-line-height");
								(r *= c), (s *= c), (o *= c);
							} else if (2 === n.deltaMode) {
								var u = p.data(this, "mousewheel-page-height");
								(r *= u), (s *= u), (o *= u);
							}
							if (
								((t = Math.max(Math.abs(s), Math.abs(o))),
								(!f || t < f) && y(n, (f = t)) && (f /= 40),
								y(n, t) && ((r /= 40), (o /= 40), (s /= 40)),
								(r = Math[1 <= r ? "floor" : "ceil"](r / f)),
								(o = Math[1 <= o ? "floor" : "ceil"](o / f)),
								(s = Math[1 <= s ? "floor" : "ceil"](s / f)),
								m.settings.normalizeOffset &&
									this.getBoundingClientRect)
							) {
								var d = this.getBoundingClientRect();
								(a = e.clientX - d.left),
									(l = e.clientY - d.top);
							}
							return (
								(e.deltaX = o),
								(e.deltaY = s),
								(e.deltaFactor = f),
								(e.offsetX = a),
								(e.offsetY = l),
								(e.deltaMode = 0),
								i.unshift(e, r, o, s),
								h && clearTimeout(h),
								(h = setTimeout(v, 200)),
								(p.event.dispatch || p.event.handle).apply(
									this,
									i
								)
							);
						}
					}
					function v() {
						f = null;
					}
					function y(e, t) {
						return (
							m.settings.adjustOldDeltas &&
							"mousewheel" === e.type &&
							t % 120 == 0
						);
					}
					p.fn.extend({
						mousewheel: function (e) {
							return e
								? this.bind("mousewheel", e)
								: this.trigger("mousewheel");
						},
						unmousewheel: function (e) {
							return this.unbind("mousewheel", e);
						},
					});
				}),
				"function" == typeof e.define && e.define.amd
					? e.define("jquery-mousewheel", ["jquery"], l)
					: "object" == typeof exports
					? (module.exports = l)
					: l(d),
				e.define(
					"jquery.select2",
					[
						"jquery",
						"jquery-mousewheel",
						"./select2/core",
						"./select2/defaults",
						"./select2/utils",
					],
					function (r, e, o, t, s) {
						if (null == r.fn.select2) {
							var a = ["open", "close", "destroy"];
							r.fn.select2 = function (t) {
								if ("object" == typeof (t = t || {}))
									return (
										this.each(function () {
											var e = r.extend(!0, {}, t);
											new o(r(this), e);
										}),
										this
									);
								if ("string" != typeof t)
									throw new Error(
										"Invalid arguments for Select2: " + t
									);
								var n,
									i = Array.prototype.slice.call(
										arguments,
										1
									);
								return (
									this.each(function () {
										var e = s.GetData(this, "select2");
										null == e &&
											window.console &&
											console.error &&
											console.error(
												"The select2('" +
													t +
													"') method was called on an element that is not using Select2."
											),
											(n = e[t].apply(e, i));
									}),
									-1 < r.inArray(t, a) ? this : n
								);
							};
						}
						return (
							null == r.fn.select2.defaults &&
								(r.fn.select2.defaults = t),
							o
						);
					}
				),
				{ define: e.define, require: e.require }
			);
		})(),
		t = e.require("jquery.select2");
	return (d.fn.select2.amd = e), t;
});

!(function (i) {
	"use strict";
	"function" == typeof define && define.amd
		? define(["jquery"], i)
		: "undefined" != typeof exports
		? (module.exports = i(require("jquery")))
		: i(jQuery);
})(function (i) {
	"use strict";
	var e = window.Slick || {};
	((e = (function () {
		var e = 0;
		return function (t, o) {
			var s,
				n = this;
			(n.defaults = {
				accessibility: !0,
				adaptiveHeight: !1,
				appendArrows: i(t),
				appendDots: i(t),
				arrows: !0,
				asNavFor: null,
				prevArrow:
					'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
				nextArrow:
					'<button class="slick-next" aria-label="Next" type="button">Next</button>',
				autoplay: !1,
				autoplaySpeed: 3e3,
				centerMode: !1,
				centerPadding: "50px",
				cssEase: "ease",
				customPaging: function (e, t) {
					return i('<button type="button" />').text(t + 1);
				},
				dots: !1,
				dotsClass: "slick-dots",
				draggable: !0,
				easing: "linear",
				edgeFriction: 0.35,
				fade: !1,
				focusOnSelect: !1,
				focusOnChange: !1,
				infinite: !0,
				initialSlide: 0,
				lazyLoad: "ondemand",
				mobileFirst: !1,
				pauseOnHover: !0,
				pauseOnFocus: !0,
				pauseOnDotsHover: !1,
				respondTo: "window",
				responsive: null,
				rows: 1,
				rtl: !1,
				slide: "",
				slidesPerRow: 1,
				slidesToShow: 1,
				slidesToScroll: 1,
				speed: 500,
				swipe: !0,
				swipeToSlide: !1,
				touchMove: !0,
				touchThreshold: 5,
				useCSS: !0,
				useTransform: !0,
				variableWidth: !1,
				vertical: !1,
				verticalSwiping: !1,
				waitForAnimate: !0,
				zIndex: 1e3,
			}),
				(n.initials = {
					animating: !1,
					dragging: !1,
					autoPlayTimer: null,
					currentDirection: 0,
					currentLeft: null,
					currentSlide: 0,
					direction: 1,
					$dots: null,
					listWidth: null,
					listHeight: null,
					loadIndex: 0,
					$nextArrow: null,
					$prevArrow: null,
					scrolling: !1,
					slideCount: null,
					slideWidth: null,
					$slideTrack: null,
					$slides: null,
					sliding: !1,
					slideOffset: 0,
					swipeLeft: null,
					swiping: !1,
					$list: null,
					touchObject: {},
					transformsEnabled: !1,
					unslicked: !1,
				}),
				i.extend(n, n.initials),
				(n.activeBreakpoint = null),
				(n.animType = null),
				(n.animProp = null),
				(n.breakpoints = []),
				(n.breakpointSettings = []),
				(n.cssTransitions = !1),
				(n.focussed = !1),
				(n.interrupted = !1),
				(n.hidden = "hidden"),
				(n.paused = !0),
				(n.positionProp = null),
				(n.respondTo = null),
				(n.rowCount = 1),
				(n.shouldClick = !0),
				(n.$slider = i(t)),
				(n.$slidesCache = null),
				(n.transformType = null),
				(n.transitionType = null),
				(n.visibilityChange = "visibilitychange"),
				(n.windowWidth = 0),
				(n.windowTimer = null),
				(s = i(t).data("slick") || {}),
				(n.options = i.extend({}, n.defaults, o, s)),
				(n.currentSlide = n.options.initialSlide),
				(n.originalSettings = n.options),
				void 0 !== document.mozHidden
					? ((n.hidden = "mozHidden"),
					  (n.visibilityChange = "mozvisibilitychange"))
					: void 0 !== document.webkitHidden &&
					  ((n.hidden = "webkitHidden"),
					  (n.visibilityChange = "webkitvisibilitychange")),
				(n.autoPlay = i.proxy(n.autoPlay, n)),
				(n.autoPlayClear = i.proxy(n.autoPlayClear, n)),
				(n.autoPlayIterator = i.proxy(n.autoPlayIterator, n)),
				(n.changeSlide = i.proxy(n.changeSlide, n)),
				(n.clickHandler = i.proxy(n.clickHandler, n)),
				(n.selectHandler = i.proxy(n.selectHandler, n)),
				(n.setPosition = i.proxy(n.setPosition, n)),
				(n.swipeHandler = i.proxy(n.swipeHandler, n)),
				(n.dragHandler = i.proxy(n.dragHandler, n)),
				(n.keyHandler = i.proxy(n.keyHandler, n)),
				(n.instanceUid = e++),
				(n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/),
				n.registerBreakpoints(),
				n.init(!0);
		};
	})()).prototype.activateADA = function () {
		this.$slideTrack
			.find(".slick-active")
			.attr({ "aria-hidden": "false" })
			.find("a, input, button, select")
			.attr({ tabindex: "0" });
	}),
		(e.prototype.addSlide = e.prototype.slickAdd =
			function (e, t, o) {
				var s = this;
				if ("boolean" == typeof t) (o = t), (t = null);
				else if (t < 0 || t >= s.slideCount) return !1;
				s.unload(),
					"number" == typeof t
						? 0 === t && 0 === s.$slides.length
							? i(e).appendTo(s.$slideTrack)
							: o
							? i(e).insertBefore(s.$slides.eq(t))
							: i(e).insertAfter(s.$slides.eq(t))
						: !0 === o
						? i(e).prependTo(s.$slideTrack)
						: i(e).appendTo(s.$slideTrack),
					(s.$slides = s.$slideTrack.children(this.options.slide)),
					s.$slideTrack.children(this.options.slide).detach(),
					s.$slideTrack.append(s.$slides),
					s.$slides.each(function (e, t) {
						i(t).attr("data-slick-index", e);
					}),
					(s.$slidesCache = s.$slides),
					s.reinit();
			}),
		(e.prototype.animateHeight = function () {
			var i = this;
			if (
				1 === i.options.slidesToShow &&
				!0 === i.options.adaptiveHeight &&
				!1 === i.options.vertical
			) {
				var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
				i.$list.animate({ height: e }, i.options.speed);
			}
		}),
		(e.prototype.animateSlide = function (e, t) {
			var o = {},
				s = this;
			s.animateHeight(),
				!0 === s.options.rtl && !1 === s.options.vertical && (e = -e),
				!1 === s.transformsEnabled
					? !1 === s.options.vertical
						? s.$slideTrack.animate(
								{ left: e },
								s.options.speed,
								s.options.easing,
								t
						  )
						: s.$slideTrack.animate(
								{ top: e },
								s.options.speed,
								s.options.easing,
								t
						  )
					: !1 === s.cssTransitions
					? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft),
					  i({ animStart: s.currentLeft }).animate(
							{ animStart: e },
							{
								duration: s.options.speed,
								easing: s.options.easing,
								step: function (i) {
									(i = Math.ceil(i)),
										!1 === s.options.vertical
											? ((o[s.animType] =
													"translate(" +
													i +
													"px, 0px)"),
											  s.$slideTrack.css(o))
											: ((o[s.animType] =
													"translate(0px," +
													i +
													"px)"),
											  s.$slideTrack.css(o));
								},
								complete: function () {
									t && t.call();
								},
							}
					  ))
					: (s.applyTransition(),
					  (e = Math.ceil(e)),
					  !1 === s.options.vertical
							? (o[s.animType] =
									"translate3d(" + e + "px, 0px, 0px)")
							: (o[s.animType] =
									"translate3d(0px," + e + "px, 0px)"),
					  s.$slideTrack.css(o),
					  t &&
							setTimeout(function () {
								s.disableTransition(), t.call();
							}, s.options.speed));
		}),
		(e.prototype.getNavTarget = function () {
			var e = this,
				t = e.options.asNavFor;
			return t && null !== t && (t = i(t).not(e.$slider)), t;
		}),
		(e.prototype.asNavFor = function (e) {
			var t = this.getNavTarget();
			null !== t &&
				"object" == typeof t &&
				t.each(function () {
					var t = i(this).slick("getSlick");
					t.unslicked || t.slideHandler(e, !0);
				});
		}),
		(e.prototype.applyTransition = function (i) {
			var e = this,
				t = {};
			!1 === e.options.fade
				? (t[e.transitionType] =
						e.transformType +
						" " +
						e.options.speed +
						"ms " +
						e.options.cssEase)
				: (t[e.transitionType] =
						"opacity " +
						e.options.speed +
						"ms " +
						e.options.cssEase),
				!1 === e.options.fade
					? e.$slideTrack.css(t)
					: e.$slides.eq(i).css(t);
		}),
		(e.prototype.autoPlay = function () {
			var i = this;
			i.autoPlayClear(),
				i.slideCount > i.options.slidesToShow &&
					(i.autoPlayTimer = setInterval(
						i.autoPlayIterator,
						i.options.autoplaySpeed
					));
		}),
		(e.prototype.autoPlayClear = function () {
			var i = this;
			i.autoPlayTimer && clearInterval(i.autoPlayTimer);
		}),
		(e.prototype.autoPlayIterator = function () {
			var i = this,
				e = i.currentSlide + i.options.slidesToScroll;
			i.paused ||
				i.interrupted ||
				i.focussed ||
				(!1 === i.options.infinite &&
					(1 === i.direction &&
					i.currentSlide + 1 === i.slideCount - 1
						? (i.direction = 0)
						: 0 === i.direction &&
						  ((e = i.currentSlide - i.options.slidesToScroll),
						  i.currentSlide - 1 == 0 && (i.direction = 1))),
				i.slideHandler(e));
		}),
		(e.prototype.buildArrows = function () {
			var e = this;
			!0 === e.options.arrows &&
				((e.$prevArrow = i(e.options.prevArrow).addClass(
					"slick-arrow"
				)),
				(e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow")),
				e.slideCount > e.options.slidesToShow
					? (e.$prevArrow
							.removeClass("slick-hidden")
							.removeAttr("aria-hidden tabindex"),
					  e.$nextArrow
							.removeClass("slick-hidden")
							.removeAttr("aria-hidden tabindex"),
					  e.htmlExpr.test(e.options.prevArrow) &&
							e.$prevArrow.prependTo(e.options.appendArrows),
					  e.htmlExpr.test(e.options.nextArrow) &&
							e.$nextArrow.appendTo(e.options.appendArrows),
					  !0 !== e.options.infinite &&
							e.$prevArrow
								.addClass("slick-disabled")
								.attr("aria-disabled", "true"))
					: e.$prevArrow
							.add(e.$nextArrow)
							.addClass("slick-hidden")
							.attr({ "aria-disabled": "true", tabindex: "-1" }));
		}),
		(e.prototype.buildDots = function () {
			var e,
				t,
				o = this;
			if (!0 === o.options.dots) {
				for (
					o.$slider.addClass("slick-dotted"),
						t = i("<ul />").addClass(o.options.dotsClass),
						e = 0;
					e <= o.getDotCount();
					e += 1
				)
					t.append(
						i("<li />").append(
							o.options.customPaging.call(this, o, e)
						)
					);
				(o.$dots = t.appendTo(o.options.appendDots)),
					o.$dots.find("li").first().addClass("slick-active");
			}
		}),
		(e.prototype.buildOut = function () {
			var e = this;
			(e.$slides = e.$slider
				.children(e.options.slide + ":not(.slick-cloned)")
				.addClass("slick-slide")),
				(e.slideCount = e.$slides.length),
				e.$slides.each(function (e, t) {
					i(t)
						.attr("data-slick-index", e)
						.data("originalStyling", i(t).attr("style") || "");
				}),
				e.$slider.addClass("slick-slider"),
				(e.$slideTrack =
					0 === e.slideCount
						? i('<div class="slick-track"/>').appendTo(e.$slider)
						: e.$slides
								.wrapAll('<div class="slick-track"/>')
								.parent()),
				(e.$list = e.$slideTrack
					.wrap('<div class="slick-list"/>')
					.parent()),
				e.$slideTrack.css("opacity", 0),
				(!0 !== e.options.centerMode &&
					!0 !== e.options.swipeToSlide) ||
					(e.options.slidesToScroll = 1),
				i("img[data-lazy]", e.$slider)
					.not("[src]")
					.addClass("slick-loading"),
				e.setupInfinite(),
				e.buildArrows(),
				e.buildDots(),
				e.updateDots(),
				e.setSlideClasses(
					"number" == typeof e.currentSlide ? e.currentSlide : 0
				),
				!0 === e.options.draggable && e.$list.addClass("draggable");
		}),
		(e.prototype.buildRows = function () {
			var i,
				e,
				t,
				o,
				s,
				n,
				r,
				l = this;
			if (
				((o = document.createDocumentFragment()),
				(n = l.$slider.children()),
				l.options.rows > 1)
			) {
				for (
					r = l.options.slidesPerRow * l.options.rows,
						s = Math.ceil(n.length / r),
						i = 0;
					i < s;
					i++
				) {
					var d = document.createElement("div");
					for (e = 0; e < l.options.rows; e++) {
						var a = document.createElement("div");
						for (t = 0; t < l.options.slidesPerRow; t++) {
							var c = i * r + (e * l.options.slidesPerRow + t);
							n.get(c) && a.appendChild(n.get(c));
						}
						d.appendChild(a);
					}
					o.appendChild(d);
				}
				l.$slider.empty().append(o),
					l.$slider
						.children()
						.children()
						.children()
						.css({
							width: 100 / l.options.slidesPerRow + "%",
							display: "inline-block",
						});
			}
		}),
		(e.prototype.checkResponsive = function (e, t) {
			var o,
				s,
				n,
				r = this,
				l = !1,
				d = r.$slider.width(),
				a = window.innerWidth || i(window).width();
			if (
				("window" === r.respondTo
					? (n = a)
					: "slider" === r.respondTo
					? (n = d)
					: "min" === r.respondTo && (n = Math.min(a, d)),
				r.options.responsive &&
					r.options.responsive.length &&
					null !== r.options.responsive)
			) {
				s = null;
				for (o in r.breakpoints)
					r.breakpoints.hasOwnProperty(o) &&
						(!1 === r.originalSettings.mobileFirst
							? n < r.breakpoints[o] && (s = r.breakpoints[o])
							: n > r.breakpoints[o] && (s = r.breakpoints[o]));
				null !== s
					? null !== r.activeBreakpoint
						? (s !== r.activeBreakpoint || t) &&
						  ((r.activeBreakpoint = s),
						  "unslick" === r.breakpointSettings[s]
								? r.unslick(s)
								: ((r.options = i.extend(
										{},
										r.originalSettings,
										r.breakpointSettings[s]
								  )),
								  !0 === e &&
										(r.currentSlide =
											r.options.initialSlide),
								  r.refresh(e)),
						  (l = s))
						: ((r.activeBreakpoint = s),
						  "unslick" === r.breakpointSettings[s]
								? r.unslick(s)
								: ((r.options = i.extend(
										{},
										r.originalSettings,
										r.breakpointSettings[s]
								  )),
								  !0 === e &&
										(r.currentSlide =
											r.options.initialSlide),
								  r.refresh(e)),
						  (l = s))
					: null !== r.activeBreakpoint &&
					  ((r.activeBreakpoint = null),
					  (r.options = r.originalSettings),
					  !0 === e && (r.currentSlide = r.options.initialSlide),
					  r.refresh(e),
					  (l = s)),
					e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);
			}
		}),
		(e.prototype.changeSlide = function (e, t) {
			var o,
				s,
				n,
				r = this,
				l = i(e.currentTarget);
			switch (
				(l.is("a") && e.preventDefault(),
				l.is("li") || (l = l.closest("li")),
				(n = r.slideCount % r.options.slidesToScroll != 0),
				(o = n
					? 0
					: (r.slideCount - r.currentSlide) %
					  r.options.slidesToScroll),
				e.data.message)
			) {
				case "previous":
					(s =
						0 === o
							? r.options.slidesToScroll
							: r.options.slidesToShow - o),
						r.slideCount > r.options.slidesToShow &&
							r.slideHandler(r.currentSlide - s, !1, t);
					break;
				case "next":
					(s = 0 === o ? r.options.slidesToScroll : o),
						r.slideCount > r.options.slidesToShow &&
							r.slideHandler(r.currentSlide + s, !1, t);
					break;
				case "index":
					var d =
						0 === e.data.index
							? 0
							: e.data.index ||
							  l.index() * r.options.slidesToScroll;
					r.slideHandler(r.checkNavigable(d), !1, t),
						l.children().trigger("focus");
					break;
				default:
					return;
			}
		}),
		(e.prototype.checkNavigable = function (i) {
			var e, t;
			if (
				((e = this.getNavigableIndexes()), (t = 0), i > e[e.length - 1])
			)
				i = e[e.length - 1];
			else
				for (var o in e) {
					if (i < e[o]) {
						i = t;
						break;
					}
					t = e[o];
				}
			return i;
		}),
		(e.prototype.cleanUpEvents = function () {
			var e = this;
			e.options.dots &&
				null !== e.$dots &&
				(i("li", e.$dots)
					.off("click.slick", e.changeSlide)
					.off("mouseenter.slick", i.proxy(e.interrupt, e, !0))
					.off("mouseleave.slick", i.proxy(e.interrupt, e, !1)),
				!0 === e.options.accessibility &&
					e.$dots.off("keydown.slick", e.keyHandler)),
				e.$slider.off("focus.slick blur.slick"),
				!0 === e.options.arrows &&
					e.slideCount > e.options.slidesToShow &&
					(e.$prevArrow &&
						e.$prevArrow.off("click.slick", e.changeSlide),
					e.$nextArrow &&
						e.$nextArrow.off("click.slick", e.changeSlide),
					!0 === e.options.accessibility &&
						(e.$prevArrow &&
							e.$prevArrow.off("keydown.slick", e.keyHandler),
						e.$nextArrow &&
							e.$nextArrow.off("keydown.slick", e.keyHandler))),
				e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler),
				e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler),
				e.$list.off("touchend.slick mouseup.slick", e.swipeHandler),
				e.$list.off(
					"touchcancel.slick mouseleave.slick",
					e.swipeHandler
				),
				e.$list.off("click.slick", e.clickHandler),
				i(document).off(e.visibilityChange, e.visibility),
				e.cleanUpSlideEvents(),
				!0 === e.options.accessibility &&
					e.$list.off("keydown.slick", e.keyHandler),
				!0 === e.options.focusOnSelect &&
					i(e.$slideTrack)
						.children()
						.off("click.slick", e.selectHandler),
				i(window).off(
					"orientationchange.slick.slick-" + e.instanceUid,
					e.orientationChange
				),
				i(window).off("resize.slick.slick-" + e.instanceUid, e.resize),
				i("[draggable!=true]", e.$slideTrack).off(
					"dragstart",
					e.preventDefault
				),
				i(window).off(
					"load.slick.slick-" + e.instanceUid,
					e.setPosition
				);
		}),
		(e.prototype.cleanUpSlideEvents = function () {
			var e = this;
			e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
				e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));
		}),
		(e.prototype.cleanUpRows = function () {
			var i,
				e = this;
			e.options.rows > 1 &&
				((i = e.$slides.children().children()).removeAttr("style"),
				e.$slider.empty().append(i));
		}),
		(e.prototype.clickHandler = function (i) {
			!1 === this.shouldClick &&
				(i.stopImmediatePropagation(),
				i.stopPropagation(),
				i.preventDefault());
		}),
		(e.prototype.destroy = function (e) {
			var t = this;
			t.autoPlayClear(),
				(t.touchObject = {}),
				t.cleanUpEvents(),
				i(".slick-cloned", t.$slider).detach(),
				t.$dots && t.$dots.remove(),
				t.$prevArrow &&
					t.$prevArrow.length &&
					(t.$prevArrow
						.removeClass("slick-disabled slick-arrow slick-hidden")
						.removeAttr("aria-hidden aria-disabled tabindex")
						.css("display", ""),
					t.htmlExpr.test(t.options.prevArrow) &&
						t.$prevArrow.remove()),
				t.$nextArrow &&
					t.$nextArrow.length &&
					(t.$nextArrow
						.removeClass("slick-disabled slick-arrow slick-hidden")
						.removeAttr("aria-hidden aria-disabled tabindex")
						.css("display", ""),
					t.htmlExpr.test(t.options.nextArrow) &&
						t.$nextArrow.remove()),
				t.$slides &&
					(t.$slides
						.removeClass(
							"slick-slide slick-active slick-center slick-visible slick-current"
						)
						.removeAttr("aria-hidden")
						.removeAttr("data-slick-index")
						.each(function () {
							i(this).attr(
								"style",
								i(this).data("originalStyling")
							);
						}),
					t.$slideTrack.children(this.options.slide).detach(),
					t.$slideTrack.detach(),
					t.$list.detach(),
					t.$slider.append(t.$slides)),
				t.cleanUpRows(),
				t.$slider.removeClass("slick-slider"),
				t.$slider.removeClass("slick-initialized"),
				t.$slider.removeClass("slick-dotted"),
				(t.unslicked = !0),
				e || t.$slider.trigger("destroy", [t]);
		}),
		(e.prototype.disableTransition = function (i) {
			var e = this,
				t = {};
			(t[e.transitionType] = ""),
				!1 === e.options.fade
					? e.$slideTrack.css(t)
					: e.$slides.eq(i).css(t);
		}),
		(e.prototype.fadeSlide = function (i, e) {
			var t = this;
			!1 === t.cssTransitions
				? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }),
				  t.$slides
						.eq(i)
						.animate(
							{ opacity: 1 },
							t.options.speed,
							t.options.easing,
							e
						))
				: (t.applyTransition(i),
				  t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }),
				  e &&
						setTimeout(function () {
							t.disableTransition(i), e.call();
						}, t.options.speed));
		}),
		(e.prototype.fadeSlideOut = function (i) {
			var e = this;
			!1 === e.cssTransitions
				? e.$slides
						.eq(i)
						.animate(
							{ opacity: 0, zIndex: e.options.zIndex - 2 },
							e.options.speed,
							e.options.easing
						)
				: (e.applyTransition(i),
				  e.$slides
						.eq(i)
						.css({ opacity: 0, zIndex: e.options.zIndex - 2 }));
		}),
		(e.prototype.filterSlides = e.prototype.slickFilter =
			function (i) {
				var e = this;
				null !== i &&
					((e.$slidesCache = e.$slides),
					e.unload(),
					e.$slideTrack.children(this.options.slide).detach(),
					e.$slidesCache.filter(i).appendTo(e.$slideTrack),
					e.reinit());
			}),
		(e.prototype.focusHandler = function () {
			var e = this;
			e.$slider
				.off("focus.slick blur.slick")
				.on("focus.slick blur.slick", "*", function (t) {
					t.stopImmediatePropagation();
					var o = i(this);
					setTimeout(function () {
						e.options.pauseOnFocus &&
							((e.focussed = o.is(":focus")), e.autoPlay());
					}, 0);
				});
		}),
		(e.prototype.getCurrent = e.prototype.slickCurrentSlide =
			function () {
				return this.currentSlide;
			}),
		(e.prototype.getDotCount = function () {
			var i = this,
				e = 0,
				t = 0,
				o = 0;
			if (!0 === i.options.infinite)
				if (i.slideCount <= i.options.slidesToShow) ++o;
				else
					for (; e < i.slideCount; )
						++o,
							(e = t + i.options.slidesToScroll),
							(t +=
								i.options.slidesToScroll <=
								i.options.slidesToShow
									? i.options.slidesToScroll
									: i.options.slidesToShow);
			else if (!0 === i.options.centerMode) o = i.slideCount;
			else if (i.options.asNavFor)
				for (; e < i.slideCount; )
					++o,
						(e = t + i.options.slidesToScroll),
						(t +=
							i.options.slidesToScroll <= i.options.slidesToShow
								? i.options.slidesToScroll
								: i.options.slidesToShow);
			else
				o =
					1 +
					Math.ceil(
						(i.slideCount - i.options.slidesToShow) /
							i.options.slidesToScroll
					);
			return o - 1;
		}),
		(e.prototype.getLeft = function (i) {
			var e,
				t,
				o,
				s,
				n = this,
				r = 0;
			return (
				(n.slideOffset = 0),
				(t = n.$slides.first().outerHeight(!0)),
				!0 === n.options.infinite
					? (n.slideCount > n.options.slidesToShow &&
							((n.slideOffset =
								n.slideWidth * n.options.slidesToShow * -1),
							(s = -1),
							!0 === n.options.vertical &&
								!0 === n.options.centerMode &&
								(2 === n.options.slidesToShow
									? (s = -1.5)
									: 1 === n.options.slidesToShow && (s = -2)),
							(r = t * n.options.slidesToShow * s)),
					  n.slideCount % n.options.slidesToScroll != 0 &&
							i + n.options.slidesToScroll > n.slideCount &&
							n.slideCount > n.options.slidesToShow &&
							(i > n.slideCount
								? ((n.slideOffset =
										(n.options.slidesToShow -
											(i - n.slideCount)) *
										n.slideWidth *
										-1),
								  (r =
										(n.options.slidesToShow -
											(i - n.slideCount)) *
										t *
										-1))
								: ((n.slideOffset =
										(n.slideCount %
											n.options.slidesToScroll) *
										n.slideWidth *
										-1),
								  (r =
										(n.slideCount %
											n.options.slidesToScroll) *
										t *
										-1))))
					: i + n.options.slidesToShow > n.slideCount &&
					  ((n.slideOffset =
							(i + n.options.slidesToShow - n.slideCount) *
							n.slideWidth),
					  (r = (i + n.options.slidesToShow - n.slideCount) * t)),
				n.slideCount <= n.options.slidesToShow &&
					((n.slideOffset = 0), (r = 0)),
				!0 === n.options.centerMode &&
				n.slideCount <= n.options.slidesToShow
					? (n.slideOffset =
							(n.slideWidth *
								Math.floor(n.options.slidesToShow)) /
								2 -
							(n.slideWidth * n.slideCount) / 2)
					: !0 === n.options.centerMode && !0 === n.options.infinite
					? (n.slideOffset +=
							n.slideWidth *
								Math.floor(n.options.slidesToShow / 2) -
							n.slideWidth)
					: !0 === n.options.centerMode &&
					  ((n.slideOffset = 0),
					  (n.slideOffset +=
							n.slideWidth *
							Math.floor(n.options.slidesToShow / 2))),
				(e =
					!1 === n.options.vertical
						? i * n.slideWidth * -1 + n.slideOffset
						: i * t * -1 + r),
				!0 === n.options.variableWidth &&
					((o =
						n.slideCount <= n.options.slidesToShow ||
						!1 === n.options.infinite
							? n.$slideTrack.children(".slick-slide").eq(i)
							: n.$slideTrack
									.children(".slick-slide")
									.eq(i + n.options.slidesToShow)),
					(e =
						!0 === n.options.rtl
							? o[0]
								? -1 *
								  (n.$slideTrack.width() -
										o[0].offsetLeft -
										o.width())
								: 0
							: o[0]
							? -1 * o[0].offsetLeft
							: 0),
					!0 === n.options.centerMode &&
						((o =
							n.slideCount <= n.options.slidesToShow ||
							!1 === n.options.infinite
								? n.$slideTrack.children(".slick-slide").eq(i)
								: n.$slideTrack
										.children(".slick-slide")
										.eq(i + n.options.slidesToShow + 1)),
						(e =
							!0 === n.options.rtl
								? o[0]
									? -1 *
									  (n.$slideTrack.width() -
											o[0].offsetLeft -
											o.width())
									: 0
								: o[0]
								? -1 * o[0].offsetLeft
								: 0),
						(e += (n.$list.width() - o.outerWidth()) / 2))),
				e
			);
		}),
		(e.prototype.getOption = e.prototype.slickGetOption =
			function (i) {
				return this.options[i];
			}),
		(e.prototype.getNavigableIndexes = function () {
			var i,
				e = this,
				t = 0,
				o = 0,
				s = [];
			for (
				!1 === e.options.infinite
					? (i = e.slideCount)
					: ((t = -1 * e.options.slidesToScroll),
					  (o = -1 * e.options.slidesToScroll),
					  (i = 2 * e.slideCount));
				t < i;

			)
				s.push(t),
					(t = o + e.options.slidesToScroll),
					(o +=
						e.options.slidesToScroll <= e.options.slidesToShow
							? e.options.slidesToScroll
							: e.options.slidesToShow);
			return s;
		}),
		(e.prototype.getSlick = function () {
			return this;
		}),
		(e.prototype.getSlideCount = function () {
			var e,
				t,
				o = this;
			return (
				(t =
					!0 === o.options.centerMode
						? o.slideWidth * Math.floor(o.options.slidesToShow / 2)
						: 0),
				!0 === o.options.swipeToSlide
					? (o.$slideTrack.find(".slick-slide").each(function (s, n) {
							if (
								n.offsetLeft - t + i(n).outerWidth() / 2 >
								-1 * o.swipeLeft
							)
								return (e = n), !1;
					  }),
					  Math.abs(
							i(e).attr("data-slick-index") - o.currentSlide
					  ) || 1)
					: o.options.slidesToScroll
			);
		}),
		(e.prototype.goTo = e.prototype.slickGoTo =
			function (i, e) {
				this.changeSlide(
					{ data: { message: "index", index: parseInt(i) } },
					e
				);
			}),
		(e.prototype.init = function (e) {
			var t = this;
			i(t.$slider).hasClass("slick-initialized") ||
				(i(t.$slider).addClass("slick-initialized"),
				t.buildRows(),
				t.buildOut(),
				t.setProps(),
				t.startLoad(),
				t.loadSlider(),
				t.initializeEvents(),
				t.updateArrows(),
				t.updateDots(),
				t.checkResponsive(!0),
				t.focusHandler()),
				e && t.$slider.trigger("init", [t]),
				!0 === t.options.accessibility && t.initADA(),
				t.options.autoplay && ((t.paused = !1), t.autoPlay());
		}),
		(e.prototype.initADA = function () {
			var e = this,
				t = Math.ceil(e.slideCount / e.options.slidesToShow),
				o = e.getNavigableIndexes().filter(function (i) {
					return i >= 0 && i < e.slideCount;
				});
			e.$slides
				.add(e.$slideTrack.find(".slick-cloned"))
				.attr({ "aria-hidden": "true", tabindex: "-1" })
				.find("a, input, button, select")
				.attr({ tabindex: "-1" }),
				null !== e.$dots &&
					(e.$slides
						.not(e.$slideTrack.find(".slick-cloned"))
						.each(function (t) {
							var s = o.indexOf(t);
							i(this).attr({
								role: "tabpanel",
								id: "slick-slide" + e.instanceUid + t,
								tabindex: -1,
							}),
								-1 !== s &&
									i(this).attr({
										"aria-describedby":
											"slick-slide-control" +
											e.instanceUid +
											s,
									});
						}),
					e.$dots
						.attr("role", "tablist")
						.find("li")
						.each(function (s) {
							var n = o[s];
							i(this).attr({ role: "presentation" }),
								i(this)
									.find("button")
									.first()
									.attr({
										role: "tab",
										id:
											"slick-slide-control" +
											e.instanceUid +
											s,
										"aria-controls":
											"slick-slide" + e.instanceUid + n,
										"aria-label": s + 1 + " of " + t,
										"aria-selected": null,
										tabindex: "-1",
									});
						})
						.eq(e.currentSlide)
						.find("button")
						.attr({ "aria-selected": "true", tabindex: "0" })
						.end());
			for (
				var s = e.currentSlide, n = s + e.options.slidesToShow;
				s < n;
				s++
			)
				e.$slides.eq(s).attr("tabindex", 0);
			e.activateADA();
		}),
		(e.prototype.initArrowEvents = function () {
			var i = this;
			!0 === i.options.arrows &&
				i.slideCount > i.options.slidesToShow &&
				(i.$prevArrow
					.off("click.slick")
					.on("click.slick", { message: "previous" }, i.changeSlide),
				i.$nextArrow
					.off("click.slick")
					.on("click.slick", { message: "next" }, i.changeSlide),
				!0 === i.options.accessibility &&
					(i.$prevArrow.on("keydown.slick", i.keyHandler),
					i.$nextArrow.on("keydown.slick", i.keyHandler)));
		}),
		(e.prototype.initDotEvents = function () {
			var e = this;
			!0 === e.options.dots &&
				(i("li", e.$dots).on(
					"click.slick",
					{ message: "index" },
					e.changeSlide
				),
				!0 === e.options.accessibility &&
					e.$dots.on("keydown.slick", e.keyHandler)),
				!0 === e.options.dots &&
					!0 === e.options.pauseOnDotsHover &&
					i("li", e.$dots)
						.on("mouseenter.slick", i.proxy(e.interrupt, e, !0))
						.on("mouseleave.slick", i.proxy(e.interrupt, e, !1));
		}),
		(e.prototype.initSlideEvents = function () {
			var e = this;
			e.options.pauseOnHover &&
				(e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
				e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));
		}),
		(e.prototype.initializeEvents = function () {
			var e = this;
			e.initArrowEvents(),
				e.initDotEvents(),
				e.initSlideEvents(),
				e.$list.on(
					"touchstart.slick mousedown.slick",
					{ action: "start" },
					e.swipeHandler
				),
				e.$list.on(
					"touchmove.slick mousemove.slick",
					{ action: "move" },
					e.swipeHandler
				),
				e.$list.on(
					"touchend.slick mouseup.slick",
					{ action: "end" },
					e.swipeHandler
				),
				e.$list.on(
					"touchcancel.slick mouseleave.slick",
					{ action: "end" },
					e.swipeHandler
				),
				e.$list.on("click.slick", e.clickHandler),
				i(document).on(e.visibilityChange, i.proxy(e.visibility, e)),
				!0 === e.options.accessibility &&
					e.$list.on("keydown.slick", e.keyHandler),
				!0 === e.options.focusOnSelect &&
					i(e.$slideTrack)
						.children()
						.on("click.slick", e.selectHandler),
				i(window).on(
					"orientationchange.slick.slick-" + e.instanceUid,
					i.proxy(e.orientationChange, e)
				),
				i(window).on(
					"resize.slick.slick-" + e.instanceUid,
					i.proxy(e.resize, e)
				),
				i("[draggable!=true]", e.$slideTrack).on(
					"dragstart",
					e.preventDefault
				),
				i(window).on(
					"load.slick.slick-" + e.instanceUid,
					e.setPosition
				),
				i(e.setPosition);
		}),
		(e.prototype.initUI = function () {
			var i = this;
			!0 === i.options.arrows &&
				i.slideCount > i.options.slidesToShow &&
				(i.$prevArrow.show(), i.$nextArrow.show()),
				!0 === i.options.dots &&
					i.slideCount > i.options.slidesToShow &&
					i.$dots.show();
		}),
		(e.prototype.keyHandler = function (i) {
			var e = this;
			i.target.tagName.match("TEXTAREA|INPUT|SELECT") ||
				(37 === i.keyCode && !0 === e.options.accessibility
					? e.changeSlide({
							data: {
								message:
									!0 === e.options.rtl ? "next" : "previous",
							},
					  })
					: 39 === i.keyCode &&
					  !0 === e.options.accessibility &&
					  e.changeSlide({
							data: {
								message:
									!0 === e.options.rtl ? "previous" : "next",
							},
					  }));
		}),
		(e.prototype.lazyLoad = function () {
			function e(e) {
				i("img[data-lazy]", e).each(function () {
					var e = i(this),
						t = i(this).attr("data-lazy"),
						o = i(this).attr("data-srcset"),
						s =
							i(this).attr("data-sizes") ||
							n.$slider.attr("data-sizes"),
						r = document.createElement("img");
					(r.onload = function () {
						e.animate({ opacity: 0 }, 100, function () {
							o && (e.attr("srcset", o), s && e.attr("sizes", s)),
								e
									.attr("src", t)
									.animate({ opacity: 1 }, 200, function () {
										e.removeAttr(
											"data-lazy data-srcset data-sizes"
										).removeClass("slick-loading");
									}),
								n.$slider.trigger("lazyLoaded", [n, e, t]);
						});
					}),
						(r.onerror = function () {
							e
								.removeAttr("data-lazy")
								.removeClass("slick-loading")
								.addClass("slick-lazyload-error"),
								n.$slider.trigger("lazyLoadError", [n, e, t]);
						}),
						(r.src = t);
				});
			}
			var t,
				o,
				s,
				n = this;
			if (
				(!0 === n.options.centerMode
					? !0 === n.options.infinite
						? (s =
								(o =
									n.currentSlide +
									(n.options.slidesToShow / 2 + 1)) +
								n.options.slidesToShow +
								2)
						: ((o = Math.max(
								0,
								n.currentSlide -
									(n.options.slidesToShow / 2 + 1)
						  )),
						  (s =
								n.options.slidesToShow / 2 +
								1 +
								2 +
								n.currentSlide))
					: ((o = n.options.infinite
							? n.options.slidesToShow + n.currentSlide
							: n.currentSlide),
					  (s = Math.ceil(o + n.options.slidesToShow)),
					  !0 === n.options.fade &&
							(o > 0 && o--, s <= n.slideCount && s++)),
				(t = n.$slider.find(".slick-slide").slice(o, s)),
				"anticipated" === n.options.lazyLoad)
			)
				for (
					var r = o - 1,
						l = s,
						d = n.$slider.find(".slick-slide"),
						a = 0;
					a < n.options.slidesToScroll;
					a++
				)
					r < 0 && (r = n.slideCount - 1),
						(t = (t = t.add(d.eq(r))).add(d.eq(l))),
						r--,
						l++;
			e(t),
				n.slideCount <= n.options.slidesToShow
					? e(n.$slider.find(".slick-slide"))
					: n.currentSlide >= n.slideCount - n.options.slidesToShow
					? e(
							n.$slider
								.find(".slick-cloned")
								.slice(0, n.options.slidesToShow)
					  )
					: 0 === n.currentSlide &&
					  e(
							n.$slider
								.find(".slick-cloned")
								.slice(-1 * n.options.slidesToShow)
					  );
		}),
		(e.prototype.loadSlider = function () {
			var i = this;
			i.setPosition(),
				i.$slideTrack.css({ opacity: 1 }),
				i.$slider.removeClass("slick-loading"),
				i.initUI(),
				"progressive" === i.options.lazyLoad && i.progressiveLazyLoad();
		}),
		(e.prototype.next = e.prototype.slickNext =
			function () {
				this.changeSlide({ data: { message: "next" } });
			}),
		(e.prototype.orientationChange = function () {
			var i = this;
			i.checkResponsive(), i.setPosition();
		}),
		(e.prototype.pause = e.prototype.slickPause =
			function () {
				var i = this;
				i.autoPlayClear(), (i.paused = !0);
			}),
		(e.prototype.play = e.prototype.slickPlay =
			function () {
				var i = this;
				i.autoPlay(),
					(i.options.autoplay = !0),
					(i.paused = !1),
					(i.focussed = !1),
					(i.interrupted = !1);
			}),
		(e.prototype.postSlide = function (e) {
			var t = this;
			t.unslicked ||
				(t.$slider.trigger("afterChange", [t, e]),
				(t.animating = !1),
				t.slideCount > t.options.slidesToShow && t.setPosition(),
				(t.swipeLeft = null),
				t.options.autoplay && t.autoPlay(),
				!0 === t.options.accessibility &&
					(t.initADA(),
					t.options.focusOnChange &&
						i(t.$slides.get(t.currentSlide))
							.attr("tabindex", 0)
							.focus()));
		}),
		(e.prototype.prev = e.prototype.slickPrev =
			function () {
				this.changeSlide({ data: { message: "previous" } });
			}),
		(e.prototype.preventDefault = function (i) {
			i.preventDefault();
		}),
		(e.prototype.progressiveLazyLoad = function (e) {
			e = e || 1;
			var t,
				o,
				s,
				n,
				r,
				l = this,
				d = i("img[data-lazy]", l.$slider);
			d.length
				? ((t = d.first()),
				  (o = t.attr("data-lazy")),
				  (s = t.attr("data-srcset")),
				  (n = t.attr("data-sizes") || l.$slider.attr("data-sizes")),
				  ((r = document.createElement("img")).onload = function () {
						s && (t.attr("srcset", s), n && t.attr("sizes", n)),
							t
								.attr("src", o)
								.removeAttr("data-lazy data-srcset data-sizes")
								.removeClass("slick-loading"),
							!0 === l.options.adaptiveHeight && l.setPosition(),
							l.$slider.trigger("lazyLoaded", [l, t, o]),
							l.progressiveLazyLoad();
				  }),
				  (r.onerror = function () {
						e < 3
							? setTimeout(function () {
									l.progressiveLazyLoad(e + 1);
							  }, 500)
							: (t
									.removeAttr("data-lazy")
									.removeClass("slick-loading")
									.addClass("slick-lazyload-error"),
							  l.$slider.trigger("lazyLoadError", [l, t, o]),
							  l.progressiveLazyLoad());
				  }),
				  (r.src = o))
				: l.$slider.trigger("allImagesLoaded", [l]);
		}),
		(e.prototype.refresh = function (e) {
			var t,
				o,
				s = this;
			(o = s.slideCount - s.options.slidesToShow),
				!s.options.infinite &&
					s.currentSlide > o &&
					(s.currentSlide = o),
				s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0),
				(t = s.currentSlide),
				s.destroy(!0),
				i.extend(s, s.initials, { currentSlide: t }),
				s.init(),
				e ||
					s.changeSlide({ data: { message: "index", index: t } }, !1);
		}),
		(e.prototype.registerBreakpoints = function () {
			var e,
				t,
				o,
				s = this,
				n = s.options.responsive || null;
			if ("array" === i.type(n) && n.length) {
				s.respondTo = s.options.respondTo || "window";
				for (e in n)
					if (((o = s.breakpoints.length - 1), n.hasOwnProperty(e))) {
						for (t = n[e].breakpoint; o >= 0; )
							s.breakpoints[o] &&
								s.breakpoints[o] === t &&
								s.breakpoints.splice(o, 1),
								o--;
						s.breakpoints.push(t),
							(s.breakpointSettings[t] = n[e].settings);
					}
				s.breakpoints.sort(function (i, e) {
					return s.options.mobileFirst ? i - e : e - i;
				});
			}
		}),
		(e.prototype.reinit = function () {
			var e = this;
			(e.$slides = e.$slideTrack
				.children(e.options.slide)
				.addClass("slick-slide")),
				(e.slideCount = e.$slides.length),
				e.currentSlide >= e.slideCount &&
					0 !== e.currentSlide &&
					(e.currentSlide =
						e.currentSlide - e.options.slidesToScroll),
				e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0),
				e.registerBreakpoints(),
				e.setProps(),
				e.setupInfinite(),
				e.buildArrows(),
				e.updateArrows(),
				e.initArrowEvents(),
				e.buildDots(),
				e.updateDots(),
				e.initDotEvents(),
				e.cleanUpSlideEvents(),
				e.initSlideEvents(),
				e.checkResponsive(!1, !0),
				!0 === e.options.focusOnSelect &&
					i(e.$slideTrack)
						.children()
						.on("click.slick", e.selectHandler),
				e.setSlideClasses(
					"number" == typeof e.currentSlide ? e.currentSlide : 0
				),
				e.setPosition(),
				e.focusHandler(),
				(e.paused = !e.options.autoplay),
				e.autoPlay(),
				e.$slider.trigger("reInit", [e]);
		}),
		(e.prototype.resize = function () {
			var e = this;
			i(window).width() !== e.windowWidth &&
				(clearTimeout(e.windowDelay),
				(e.windowDelay = window.setTimeout(function () {
					(e.windowWidth = i(window).width()),
						e.checkResponsive(),
						e.unslicked || e.setPosition();
				}, 50)));
		}),
		(e.prototype.removeSlide = e.prototype.slickRemove =
			function (i, e, t) {
				var o = this;
				if (
					((i =
						"boolean" == typeof i
							? !0 === (e = i)
								? 0
								: o.slideCount - 1
							: !0 === e
							? --i
							: i),
					o.slideCount < 1 || i < 0 || i > o.slideCount - 1)
				)
					return !1;
				o.unload(),
					!0 === t
						? o.$slideTrack.children().remove()
						: o.$slideTrack
								.children(this.options.slide)
								.eq(i)
								.remove(),
					(o.$slides = o.$slideTrack.children(this.options.slide)),
					o.$slideTrack.children(this.options.slide).detach(),
					o.$slideTrack.append(o.$slides),
					(o.$slidesCache = o.$slides),
					o.reinit();
			}),
		(e.prototype.setCSS = function (i) {
			var e,
				t,
				o = this,
				s = {};
			!0 === o.options.rtl && (i = -i),
				(e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
				(t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
				(s[o.positionProp] = i),
				!1 === o.transformsEnabled
					? o.$slideTrack.css(s)
					: ((s = {}),
					  !1 === o.cssTransitions
							? ((s[o.animType] =
									"translate(" + e + ", " + t + ")"),
							  o.$slideTrack.css(s))
							: ((s[o.animType] =
									"translate3d(" + e + ", " + t + ", 0px)"),
							  o.$slideTrack.css(s)));
		}),
		(e.prototype.setDimensions = function () {
			var i = this;
			!1 === i.options.vertical
				? !0 === i.options.centerMode &&
				  i.$list.css({ padding: "0px " + i.options.centerPadding })
				: (i.$list.height(
						i.$slides.first().outerHeight(!0) *
							i.options.slidesToShow
				  ),
				  !0 === i.options.centerMode &&
						i.$list.css({
							padding: i.options.centerPadding + " 0px",
						})),
				(i.listWidth = i.$list.width()),
				(i.listHeight = i.$list.height()),
				!1 === i.options.vertical && !1 === i.options.variableWidth
					? ((i.slideWidth = Math.ceil(
							i.listWidth / i.options.slidesToShow
					  )),
					  i.$slideTrack.width(
							Math.ceil(
								i.slideWidth *
									i.$slideTrack.children(".slick-slide")
										.length
							)
					  ))
					: !0 === i.options.variableWidth
					? i.$slideTrack.width(5e3 * i.slideCount)
					: ((i.slideWidth = Math.ceil(i.listWidth)),
					  i.$slideTrack.height(
							Math.ceil(
								i.$slides.first().outerHeight(!0) *
									i.$slideTrack.children(".slick-slide")
										.length
							)
					  ));
			var e =
				i.$slides.first().outerWidth(!0) - i.$slides.first().width();
			!1 === i.options.variableWidth &&
				i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);
		}),
		(e.prototype.setFade = function () {
			var e,
				t = this;
			t.$slides.each(function (o, s) {
				(e = t.slideWidth * o * -1),
					!0 === t.options.rtl
						? i(s).css({
								position: "relative",
								right: e,
								top: 0,
								zIndex: t.options.zIndex - 2,
								opacity: 0,
						  })
						: i(s).css({
								position: "relative",
								left: e,
								top: 0,
								zIndex: t.options.zIndex - 2,
								opacity: 0,
						  });
			}),
				t.$slides
					.eq(t.currentSlide)
					.css({ zIndex: t.options.zIndex - 1, opacity: 1 });
		}),
		(e.prototype.setHeight = function () {
			var i = this;
			if (
				1 === i.options.slidesToShow &&
				!0 === i.options.adaptiveHeight &&
				!1 === i.options.vertical
			) {
				var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
				i.$list.css("height", e);
			}
		}),
		(e.prototype.setOption = e.prototype.slickSetOption =
			function () {
				var e,
					t,
					o,
					s,
					n,
					r = this,
					l = !1;
				if (
					("object" === i.type(arguments[0])
						? ((o = arguments[0]),
						  (l = arguments[1]),
						  (n = "multiple"))
						: "string" === i.type(arguments[0]) &&
						  ((o = arguments[0]),
						  (s = arguments[1]),
						  (l = arguments[2]),
						  "responsive" === arguments[0] &&
						  "array" === i.type(arguments[1])
								? (n = "responsive")
								: void 0 !== arguments[1] && (n = "single")),
					"single" === n)
				)
					r.options[o] = s;
				else if ("multiple" === n)
					i.each(o, function (i, e) {
						r.options[i] = e;
					});
				else if ("responsive" === n)
					for (t in s)
						if ("array" !== i.type(r.options.responsive))
							r.options.responsive = [s[t]];
						else {
							for (e = r.options.responsive.length - 1; e >= 0; )
								r.options.responsive[e].breakpoint ===
									s[t].breakpoint &&
									r.options.responsive.splice(e, 1),
									e--;
							r.options.responsive.push(s[t]);
						}
				l && (r.unload(), r.reinit());
			}),
		(e.prototype.setPosition = function () {
			var i = this;
			i.setDimensions(),
				i.setHeight(),
				!1 === i.options.fade
					? i.setCSS(i.getLeft(i.currentSlide))
					: i.setFade(),
				i.$slider.trigger("setPosition", [i]);
		}),
		(e.prototype.setProps = function () {
			var i = this,
				e = document.body.style;
			(i.positionProp = !0 === i.options.vertical ? "top" : "left"),
				"top" === i.positionProp
					? i.$slider.addClass("slick-vertical")
					: i.$slider.removeClass("slick-vertical"),
				(void 0 === e.WebkitTransition &&
					void 0 === e.MozTransition &&
					void 0 === e.msTransition) ||
					(!0 === i.options.useCSS && (i.cssTransitions = !0)),
				i.options.fade &&
					("number" == typeof i.options.zIndex
						? i.options.zIndex < 3 && (i.options.zIndex = 3)
						: (i.options.zIndex = i.defaults.zIndex)),
				void 0 !== e.OTransform &&
					((i.animType = "OTransform"),
					(i.transformType = "-o-transform"),
					(i.transitionType = "OTransition"),
					void 0 === e.perspectiveProperty &&
						void 0 === e.webkitPerspective &&
						(i.animType = !1)),
				void 0 !== e.MozTransform &&
					((i.animType = "MozTransform"),
					(i.transformType = "-moz-transform"),
					(i.transitionType = "MozTransition"),
					void 0 === e.perspectiveProperty &&
						void 0 === e.MozPerspective &&
						(i.animType = !1)),
				void 0 !== e.webkitTransform &&
					((i.animType = "webkitTransform"),
					(i.transformType = "-webkit-transform"),
					(i.transitionType = "webkitTransition"),
					void 0 === e.perspectiveProperty &&
						void 0 === e.webkitPerspective &&
						(i.animType = !1)),
				void 0 !== e.msTransform &&
					((i.animType = "msTransform"),
					(i.transformType = "-ms-transform"),
					(i.transitionType = "msTransition"),
					void 0 === e.msTransform && (i.animType = !1)),
				void 0 !== e.transform &&
					!1 !== i.animType &&
					((i.animType = "transform"),
					(i.transformType = "transform"),
					(i.transitionType = "transition")),
				(i.transformsEnabled =
					i.options.useTransform &&
					null !== i.animType &&
					!1 !== i.animType);
		}),
		(e.prototype.setSlideClasses = function (i) {
			var e,
				t,
				o,
				s,
				n = this;
			if (
				((t = n.$slider
					.find(".slick-slide")
					.removeClass("slick-active slick-center slick-current")
					.attr("aria-hidden", "true")),
				n.$slides.eq(i).addClass("slick-current"),
				!0 === n.options.centerMode)
			) {
				var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;
				(e = Math.floor(n.options.slidesToShow / 2)),
					!0 === n.options.infinite &&
						(i >= e && i <= n.slideCount - 1 - e
							? n.$slides
									.slice(i - e + r, i + e + 1)
									.addClass("slick-active")
									.attr("aria-hidden", "false")
							: ((o = n.options.slidesToShow + i),
							  t
									.slice(o - e + 1 + r, o + e + 2)
									.addClass("slick-active")
									.attr("aria-hidden", "false")),
						0 === i
							? t
									.eq(t.length - 1 - n.options.slidesToShow)
									.addClass("slick-center")
							: i === n.slideCount - 1 &&
							  t
									.eq(n.options.slidesToShow)
									.addClass("slick-center")),
					n.$slides.eq(i).addClass("slick-center");
			} else
				i >= 0 && i <= n.slideCount - n.options.slidesToShow
					? n.$slides
							.slice(i, i + n.options.slidesToShow)
							.addClass("slick-active")
							.attr("aria-hidden", "false")
					: t.length <= n.options.slidesToShow
					? t.addClass("slick-active").attr("aria-hidden", "false")
					: ((s = n.slideCount % n.options.slidesToShow),
					  (o =
							!0 === n.options.infinite
								? n.options.slidesToShow + i
								: i),
					  n.options.slidesToShow == n.options.slidesToScroll &&
					  n.slideCount - i < n.options.slidesToShow
							? t
									.slice(
										o - (n.options.slidesToShow - s),
										o + s
									)
									.addClass("slick-active")
									.attr("aria-hidden", "false")
							: t
									.slice(o, o + n.options.slidesToShow)
									.addClass("slick-active")
									.attr("aria-hidden", "false"));
			("ondemand" !== n.options.lazyLoad &&
				"anticipated" !== n.options.lazyLoad) ||
				n.lazyLoad();
		}),
		(e.prototype.setupInfinite = function () {
			var e,
				t,
				o,
				s = this;
			if (
				(!0 === s.options.fade && (s.options.centerMode = !1),
				!0 === s.options.infinite &&
					!1 === s.options.fade &&
					((t = null), s.slideCount > s.options.slidesToShow))
			) {
				for (
					o =
						!0 === s.options.centerMode
							? s.options.slidesToShow + 1
							: s.options.slidesToShow,
						e = s.slideCount;
					e > s.slideCount - o;
					e -= 1
				)
					(t = e - 1),
						i(s.$slides[t])
							.clone(!0)
							.attr("id", "")
							.attr("data-slick-index", t - s.slideCount)
							.prependTo(s.$slideTrack)
							.addClass("slick-cloned");
				for (e = 0; e < o + s.slideCount; e += 1)
					(t = e),
						i(s.$slides[t])
							.clone(!0)
							.attr("id", "")
							.attr("data-slick-index", t + s.slideCount)
							.appendTo(s.$slideTrack)
							.addClass("slick-cloned");
				s.$slideTrack
					.find(".slick-cloned")
					.find("[id]")
					.each(function () {
						i(this).attr("id", "");
					});
			}
		}),
		(e.prototype.interrupt = function (i) {
			var e = this;
			i || e.autoPlay(), (e.interrupted = i);
		}),
		(e.prototype.selectHandler = function (e) {
			var t = this,
				o = i(e.target).is(".slick-slide")
					? i(e.target)
					: i(e.target).parents(".slick-slide"),
				s = parseInt(o.attr("data-slick-index"));
			s || (s = 0),
				t.slideCount <= t.options.slidesToShow
					? t.slideHandler(s, !1, !0)
					: t.slideHandler(s);
		}),
		(e.prototype.slideHandler = function (i, e, t) {
			var o,
				s,
				n,
				r,
				l,
				d = null,
				a = this;
			if (
				((e = e || !1),
				!(
					(!0 === a.animating && !0 === a.options.waitForAnimate) ||
					(!0 === a.options.fade && a.currentSlide === i)
				))
			)
				if (
					(!1 === e && a.asNavFor(i),
					(o = i),
					(d = a.getLeft(o)),
					(r = a.getLeft(a.currentSlide)),
					(a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft),
					!1 === a.options.infinite &&
						!1 === a.options.centerMode &&
						(i < 0 ||
							i > a.getDotCount() * a.options.slidesToScroll))
				)
					!1 === a.options.fade &&
						((o = a.currentSlide),
						!0 !== t
							? a.animateSlide(r, function () {
									a.postSlide(o);
							  })
							: a.postSlide(o));
				else if (
					!1 === a.options.infinite &&
					!0 === a.options.centerMode &&
					(i < 0 || i > a.slideCount - a.options.slidesToScroll)
				)
					!1 === a.options.fade &&
						((o = a.currentSlide),
						!0 !== t
							? a.animateSlide(r, function () {
									a.postSlide(o);
							  })
							: a.postSlide(o));
				else {
					if (
						(a.options.autoplay && clearInterval(a.autoPlayTimer),
						(s =
							o < 0
								? a.slideCount % a.options.slidesToScroll != 0
									? a.slideCount -
									  (a.slideCount % a.options.slidesToScroll)
									: a.slideCount + o
								: o >= a.slideCount
								? a.slideCount % a.options.slidesToScroll != 0
									? 0
									: o - a.slideCount
								: o),
						(a.animating = !0),
						a.$slider.trigger("beforeChange", [
							a,
							a.currentSlide,
							s,
						]),
						(n = a.currentSlide),
						(a.currentSlide = s),
						a.setSlideClasses(a.currentSlide),
						a.options.asNavFor &&
							(l = (l = a.getNavTarget()).slick("getSlick"))
								.slideCount <= l.options.slidesToShow &&
							l.setSlideClasses(a.currentSlide),
						a.updateDots(),
						a.updateArrows(),
						!0 === a.options.fade)
					)
						return (
							!0 !== t
								? (a.fadeSlideOut(n),
								  a.fadeSlide(s, function () {
										a.postSlide(s);
								  }))
								: a.postSlide(s),
							void a.animateHeight()
						);
					!0 !== t
						? a.animateSlide(d, function () {
								a.postSlide(s);
						  })
						: a.postSlide(s);
				}
		}),
		(e.prototype.startLoad = function () {
			var i = this;
			!0 === i.options.arrows &&
				i.slideCount > i.options.slidesToShow &&
				(i.$prevArrow.hide(), i.$nextArrow.hide()),
				!0 === i.options.dots &&
					i.slideCount > i.options.slidesToShow &&
					i.$dots.hide(),
				i.$slider.addClass("slick-loading");
		}),
		(e.prototype.swipeDirection = function () {
			var i,
				e,
				t,
				o,
				s = this;
			return (
				(i = s.touchObject.startX - s.touchObject.curX),
				(e = s.touchObject.startY - s.touchObject.curY),
				(t = Math.atan2(e, i)),
				(o = Math.round((180 * t) / Math.PI)) < 0 &&
					(o = 360 - Math.abs(o)),
				o <= 45 && o >= 0
					? !1 === s.options.rtl
						? "left"
						: "right"
					: o <= 360 && o >= 315
					? !1 === s.options.rtl
						? "left"
						: "right"
					: o >= 135 && o <= 225
					? !1 === s.options.rtl
						? "right"
						: "left"
					: !0 === s.options.verticalSwiping
					? o >= 35 && o <= 135
						? "down"
						: "up"
					: "vertical"
			);
		}),
		(e.prototype.swipeEnd = function (i) {
			var e,
				t,
				o = this;
			if (((o.dragging = !1), (o.swiping = !1), o.scrolling))
				return (o.scrolling = !1), !1;
			if (
				((o.interrupted = !1),
				(o.shouldClick = !(o.touchObject.swipeLength > 10)),
				void 0 === o.touchObject.curX)
			)
				return !1;
			if (
				(!0 === o.touchObject.edgeHit &&
					o.$slider.trigger("edge", [o, o.swipeDirection()]),
				o.touchObject.swipeLength >= o.touchObject.minSwipe)
			) {
				switch ((t = o.swipeDirection())) {
					case "left":
					case "down":
						(e = o.options.swipeToSlide
							? o.checkNavigable(
									o.currentSlide + o.getSlideCount()
							  )
							: o.currentSlide + o.getSlideCount()),
							(o.currentDirection = 0);
						break;
					case "right":
					case "up":
						(e = o.options.swipeToSlide
							? o.checkNavigable(
									o.currentSlide - o.getSlideCount()
							  )
							: o.currentSlide - o.getSlideCount()),
							(o.currentDirection = 1);
				}
				"vertical" != t &&
					(o.slideHandler(e),
					(o.touchObject = {}),
					o.$slider.trigger("swipe", [o, t]));
			} else
				o.touchObject.startX !== o.touchObject.curX &&
					(o.slideHandler(o.currentSlide), (o.touchObject = {}));
		}),
		(e.prototype.swipeHandler = function (i) {
			var e = this;
			if (
				!(
					!1 === e.options.swipe ||
					("ontouchend" in document && !1 === e.options.swipe) ||
					(!1 === e.options.draggable &&
						-1 !== i.type.indexOf("mouse"))
				)
			)
				switch (
					((e.touchObject.fingerCount =
						i.originalEvent && void 0 !== i.originalEvent.touches
							? i.originalEvent.touches.length
							: 1),
					(e.touchObject.minSwipe =
						e.listWidth / e.options.touchThreshold),
					!0 === e.options.verticalSwiping &&
						(e.touchObject.minSwipe =
							e.listHeight / e.options.touchThreshold),
					i.data.action)
				) {
					case "start":
						e.swipeStart(i);
						break;
					case "move":
						e.swipeMove(i);
						break;
					case "end":
						e.swipeEnd(i);
				}
		}),
		(e.prototype.swipeMove = function (i) {
			var e,
				t,
				o,
				s,
				n,
				r,
				l = this;
			return (
				(n =
					void 0 !== i.originalEvent
						? i.originalEvent.touches
						: null),
				!(!l.dragging || l.scrolling || (n && 1 !== n.length)) &&
					((e = l.getLeft(l.currentSlide)),
					(l.touchObject.curX =
						void 0 !== n ? n[0].pageX : i.clientX),
					(l.touchObject.curY =
						void 0 !== n ? n[0].pageY : i.clientY),
					(l.touchObject.swipeLength = Math.round(
						Math.sqrt(
							Math.pow(
								l.touchObject.curX - l.touchObject.startX,
								2
							)
						)
					)),
					(r = Math.round(
						Math.sqrt(
							Math.pow(
								l.touchObject.curY - l.touchObject.startY,
								2
							)
						)
					)),
					!l.options.verticalSwiping && !l.swiping && r > 4
						? ((l.scrolling = !0), !1)
						: (!0 === l.options.verticalSwiping &&
								(l.touchObject.swipeLength = r),
						  (t = l.swipeDirection()),
						  void 0 !== i.originalEvent &&
								l.touchObject.swipeLength > 4 &&
								((l.swiping = !0), i.preventDefault()),
						  (s =
								(!1 === l.options.rtl ? 1 : -1) *
								(l.touchObject.curX > l.touchObject.startX
									? 1
									: -1)),
						  !0 === l.options.verticalSwiping &&
								(s =
									l.touchObject.curY > l.touchObject.startY
										? 1
										: -1),
						  (o = l.touchObject.swipeLength),
						  (l.touchObject.edgeHit = !1),
						  !1 === l.options.infinite &&
								((0 === l.currentSlide && "right" === t) ||
									(l.currentSlide >= l.getDotCount() &&
										"left" === t)) &&
								((o =
									l.touchObject.swipeLength *
									l.options.edgeFriction),
								(l.touchObject.edgeHit = !0)),
						  !1 === l.options.vertical
								? (l.swipeLeft = e + o * s)
								: (l.swipeLeft =
										e +
										o *
											(l.$list.height() / l.listWidth) *
											s),
						  !0 === l.options.verticalSwiping &&
								(l.swipeLeft = e + o * s),
						  !0 !== l.options.fade &&
								!1 !== l.options.touchMove &&
								(!0 === l.animating
									? ((l.swipeLeft = null), !1)
									: void l.setCSS(l.swipeLeft))))
			);
		}),
		(e.prototype.swipeStart = function (i) {
			var e,
				t = this;
			if (
				((t.interrupted = !0),
				1 !== t.touchObject.fingerCount ||
					t.slideCount <= t.options.slidesToShow)
			)
				return (t.touchObject = {}), !1;
			void 0 !== i.originalEvent &&
				void 0 !== i.originalEvent.touches &&
				(e = i.originalEvent.touches[0]),
				(t.touchObject.startX = t.touchObject.curX =
					void 0 !== e ? e.pageX : i.clientX),
				(t.touchObject.startY = t.touchObject.curY =
					void 0 !== e ? e.pageY : i.clientY),
				(t.dragging = !0);
		}),
		(e.prototype.unfilterSlides = e.prototype.slickUnfilter =
			function () {
				var i = this;
				null !== i.$slidesCache &&
					(i.unload(),
					i.$slideTrack.children(this.options.slide).detach(),
					i.$slidesCache.appendTo(i.$slideTrack),
					i.reinit());
			}),
		(e.prototype.unload = function () {
			var e = this;
			i(".slick-cloned", e.$slider).remove(),
				e.$dots && e.$dots.remove(),
				e.$prevArrow &&
					e.htmlExpr.test(e.options.prevArrow) &&
					e.$prevArrow.remove(),
				e.$nextArrow &&
					e.htmlExpr.test(e.options.nextArrow) &&
					e.$nextArrow.remove(),
				e.$slides
					.removeClass(
						"slick-slide slick-active slick-visible slick-current"
					)
					.attr("aria-hidden", "true")
					.css("width", "");
		}),
		(e.prototype.unslick = function (i) {
			var e = this;
			e.$slider.trigger("unslick", [e, i]), e.destroy();
		}),
		(e.prototype.updateArrows = function () {
			var i = this;
			Math.floor(i.options.slidesToShow / 2),
				!0 === i.options.arrows &&
					i.slideCount > i.options.slidesToShow &&
					!i.options.infinite &&
					(i.$prevArrow
						.removeClass("slick-disabled")
						.attr("aria-disabled", "false"),
					i.$nextArrow
						.removeClass("slick-disabled")
						.attr("aria-disabled", "false"),
					0 === i.currentSlide
						? (i.$prevArrow
								.addClass("slick-disabled")
								.attr("aria-disabled", "true"),
						  i.$nextArrow
								.removeClass("slick-disabled")
								.attr("aria-disabled", "false"))
						: i.currentSlide >=
								i.slideCount - i.options.slidesToShow &&
						  !1 === i.options.centerMode
						? (i.$nextArrow
								.addClass("slick-disabled")
								.attr("aria-disabled", "true"),
						  i.$prevArrow
								.removeClass("slick-disabled")
								.attr("aria-disabled", "false"))
						: i.currentSlide >= i.slideCount - 1 &&
						  !0 === i.options.centerMode &&
						  (i.$nextArrow
								.addClass("slick-disabled")
								.attr("aria-disabled", "true"),
						  i.$prevArrow
								.removeClass("slick-disabled")
								.attr("aria-disabled", "false")));
		}),
		(e.prototype.updateDots = function () {
			var i = this;
			null !== i.$dots &&
				(i.$dots.find("li").removeClass("slick-active").end(),
				i.$dots
					.find("li")
					.eq(Math.floor(i.currentSlide / i.options.slidesToScroll))
					.addClass("slick-active"));
		}),
		(e.prototype.visibility = function () {
			var i = this;
			i.options.autoplay &&
				(document[i.hidden]
					? (i.interrupted = !0)
					: (i.interrupted = !1));
		}),
		(i.fn.slick = function () {
			var i,
				t,
				o = this,
				s = arguments[0],
				n = Array.prototype.slice.call(arguments, 1),
				r = o.length;
			for (i = 0; i < r; i++)
				if (
					("object" == typeof s || void 0 === s
						? (o[i].slick = new e(o[i], s))
						: (t = o[i].slick[s].apply(o[i].slick, n)),
					void 0 !== t)
				)
					return t;
			return o;
		});
});

/**
 * tooltipster http://iamceege.github.io/tooltipster/
 * A rockin' custom tooltip jQuery plugin
 * Developed by Caleb Jacob and Louis Ameline
 * MIT license
 */
(function (root, factory) {
	if (typeof define === "function" && define.amd) {
		// AMD. Register as an anonymous module unless amdModuleId is set
		define(["jquery"], function (a0) {
			return factory(a0);
		});
	} else if (typeof exports === "object") {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.
		module.exports = factory(require("jquery"));
	} else {
		factory(jQuery);
	}
})(this, function ($) {
	// This file will be UMDified by a build task.

	var defaults = {
			animation: "fade",
			animationDuration: 350,
			content: null,
			contentAsHTML: false,
			contentCloning: false,
			debug: true,
			delay: 300,
			delayTouch: [300, 500],
			functionInit: null,
			functionBefore: null,
			functionReady: null,
			functionAfter: null,
			functionFormat: null,
			IEmin: 6,
			interactive: false,
			multiple: false,
			// will default to document.body, or must be an element positioned at (0, 0)
			// in the document, typically like the very top views of an app.
			parent: null,
			plugins: ["sideTip"],
			repositionOnScroll: false,
			restoration: "none",
			selfDestruction: true,
			theme: [],
			timer: 0,
			trackerInterval: 500,
			trackOrigin: false,
			trackTooltip: false,
			trigger: "hover",
			triggerClose: {
				click: false,
				mouseleave: false,
				originClick: false,
				scroll: false,
				tap: false,
				touchleave: false,
			},
			triggerOpen: {
				click: false,
				mouseenter: false,
				tap: false,
				touchstart: false,
			},
			updateAnimation: "rotate",
			zIndex: 9999999,
		},
		// we'll avoid using the 'window' global as a good practice but npm's
		// jquery@<2.1.0 package actually requires a 'window' global, so not sure
		// it's useful at all
		win = typeof window != "undefined" ? window : null,
		// env will be proxied by the core for plugins to have access its properties
		env = {
			// detect if this device can trigger touch events. Better have a false
			// positive (unused listeners, that's ok) than a false negative.
			// https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js
			// http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript
			hasTouchCapability: !!(
				win &&
				("ontouchstart" in win ||
					(win.DocumentTouch &&
						win.document instanceof win.DocumentTouch) ||
					win.navigator.maxTouchPoints)
			),
			hasTransitions: transitionSupport(),
			IE: false,
			// don't set manually, it will be updated by a build task after the manifest
			semVer: "4.2.8",
			window: win,
		},
		core = function () {
			// core variables

			// the core emitters
			this.__$emitterPrivate = $({});
			this.__$emitterPublic = $({});
			this.__instancesLatestArr = [];
			// collects plugin constructors
			this.__plugins = {};
			// proxy env variables for plugins who might use them
			this._env = env;
		};

	// core methods
	core.prototype = {
		/**
		 * A function to proxy the public methods of an object onto another
		 *
		 * @param {object} constructor The constructor to bridge
		 * @param {object} obj The object that will get new methods (an instance or the core)
		 * @param {string} pluginName A plugin name for the console log message
		 * @return {core}
		 * @private
		 */
		__bridge: function (constructor, obj, pluginName) {
			// if it's not already bridged
			if (!obj[pluginName]) {
				var fn = function () {};
				fn.prototype = constructor;

				var pluginInstance = new fn();

				// the _init method has to exist in instance constructors but might be missing
				// in core constructors
				if (pluginInstance.__init) {
					pluginInstance.__init(obj);
				}

				$.each(constructor, function (methodName, fn) {
					// don't proxy "private" methods, only "protected" and public ones
					if (methodName.indexOf("__") != 0) {
						// if the method does not exist yet
						if (!obj[methodName]) {
							obj[methodName] = function () {
								return pluginInstance[methodName].apply(
									pluginInstance,
									Array.prototype.slice.apply(arguments)
								);
							};

							// remember to which plugin this method corresponds (several plugins may
							// have methods of the same name, we need to be sure)
							obj[methodName].bridged = pluginInstance;
						} else if (defaults.debug) {
							console.log(
								"The " +
									methodName +
									" method of the " +
									pluginName +
									" plugin conflicts with another plugin or native methods"
							);
						}
					}
				});

				obj[pluginName] = pluginInstance;
			}

			return this;
		},

		/**
		 * For mockup in Node env if need be, for testing purposes
		 *
		 * @return {core}
		 * @private
		 */
		__setWindow: function (window) {
			env.window = window;
			return this;
		},

		/**
		 * Returns a ruler, a tool to help measure the size of a tooltip under
		 * various settings. Meant for plugins
		 *
		 * @see Ruler
		 * @return {object} A Ruler instance
		 * @protected
		 */
		_getRuler: function ($tooltip) {
			return new Ruler($tooltip);
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @return {core}
		 * @protected
		 */
		_off: function () {
			this.__$emitterPrivate.off.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @return {core}
		 * @protected
		 */
		_on: function () {
			this.__$emitterPrivate.on.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @return {core}
		 * @protected
		 */
		_one: function () {
			this.__$emitterPrivate.one.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * Returns (getter) or adds (setter) a plugin
		 *
		 * @param {string|object} plugin Provide a string (in the full form
		 * "namespace.name") to use as as getter, an object to use as a setter
		 * @return {object|core}
		 * @protected
		 */
		_plugin: function (plugin) {
			var self = this;

			// getter
			if (typeof plugin == "string") {
				var pluginName = plugin,
					p = null;

				// if the namespace is provided, it's easy to search
				if (pluginName.indexOf(".") > 0) {
					p = self.__plugins[pluginName];
				}
				// otherwise, return the first name that matches
				else {
					$.each(self.__plugins, function (i, plugin) {
						if (
							plugin.name.substring(
								plugin.name.length - pluginName.length - 1
							) ==
							"." + pluginName
						) {
							p = plugin;
							return false;
						}
					});
				}

				return p;
			}
			// setter
			else {
				// force namespaces
				if (plugin.name.indexOf(".") < 0) {
					throw new Error("Plugins must be namespaced");
				}

				self.__plugins[plugin.name] = plugin;

				// if the plugin has core features
				if (plugin.core) {
					// bridge non-private methods onto the core to allow new core methods
					self.__bridge(plugin.core, self, plugin.name);
				}

				return this;
			}
		},

		/**
		 * Trigger events on the core emitters
		 *
		 * @returns {core}
		 * @protected
		 */
		_trigger: function () {
			var args = Array.prototype.slice.apply(arguments);

			if (typeof args[0] == "string") {
				args[0] = { type: args[0] };
			}

			// note: the order of emitters matters
			this.__$emitterPrivate.trigger.apply(this.__$emitterPrivate, args);
			this.__$emitterPublic.trigger.apply(this.__$emitterPublic, args);

			return this;
		},

		/**
		 * Returns instances of all tooltips in the page or an a given element
		 *
		 * @param {string|HTML object collection} selector optional Use this
		 * parameter to restrict the set of objects that will be inspected
		 * for the retrieval of instances. By default, all instances in the
		 * page are returned.
		 * @return {array} An array of instance objects
		 * @public
		 */
		instances: function (selector) {
			var instances = [],
				sel = selector || ".tooltipstered";

			$(sel).each(function () {
				var $this = $(this),
					ns = $this.data("tooltipster-ns");

				if (ns) {
					$.each(ns, function (i, namespace) {
						instances.push($this.data(namespace));
					});
				}
			});

			return instances;
		},

		/**
		 * Returns the Tooltipster objects generated by the last initializing call
		 *
		 * @return {array} An array of instance objects
		 * @public
		 */
		instancesLatest: function () {
			return this.__instancesLatestArr;
		},

		/**
		 * For public use only, not to be used by plugins (use ::_off() instead)
		 *
		 * @return {core}
		 * @public
		 */
		off: function () {
			this.__$emitterPublic.off.apply(
				this.__$emitterPublic,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For public use only, not to be used by plugins (use ::_on() instead)
		 *
		 * @return {core}
		 * @public
		 */
		on: function () {
			this.__$emitterPublic.on.apply(
				this.__$emitterPublic,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For public use only, not to be used by plugins (use ::_one() instead)
		 *
		 * @return {core}
		 * @public
		 */
		one: function () {
			this.__$emitterPublic.one.apply(
				this.__$emitterPublic,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * Returns all HTML elements which have one or more tooltips
		 *
		 * @param {string} selector optional Use this to restrict the results
		 * to the descendants of an element
		 * @return {array} An array of HTML elements
		 * @public
		 */
		origins: function (selector) {
			var sel = selector ? selector + " " : "";

			return $(sel + ".tooltipstered").toArray();
		},

		/**
		 * Change default options for all future instances
		 *
		 * @param {object} d The options that should be made defaults
		 * @return {core}
		 * @public
		 */
		setDefaults: function (d) {
			$.extend(defaults, d);
			return this;
		},

		/**
		 * For users to trigger their handlers on the public emitter
		 *
		 * @returns {core}
		 * @public
		 */
		triggerHandler: function () {
			this.__$emitterPublic.triggerHandler.apply(
				this.__$emitterPublic,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},
	};

	// $.tooltipster will be used to call core methods
	$.tooltipster = new core();

	// the Tooltipster instance class (mind the capital T)
	$.Tooltipster = function (element, options) {
		// list of instance variables

		// stack of custom callbacks provided as parameters to API methods
		this.__callbacks = {
			close: [],
			open: [],
		};
		// the schedule time of DOM removal
		this.__closingTime;
		// this will be the user content shown in the tooltip. A capital "C" is used
		// because there is also a method called content()
		this.__Content;
		// for the size tracker
		this.__contentBcr;
		// to disable the tooltip after destruction
		this.__destroyed = false;
		// we can't emit directly on the instance because if a method with the same
		// name as the event exists, it will be called by jQuery. Se we use a plain
		// object as emitter. This emitter is for internal use by plugins,
		// if needed.
		this.__$emitterPrivate = $({});
		// this emitter is for the user to listen to events without risking to mess
		// with our internal listeners
		this.__$emitterPublic = $({});
		this.__enabled = true;
		// the reference to the gc interval
		this.__garbageCollector;
		// various position and size data recomputed before each repositioning
		this.__Geometry;
		// the tooltip position, saved after each repositioning by a plugin
		this.__lastPosition;
		// a unique namespace per instance
		this.__namespace = "tooltipster-" + Math.round(Math.random() * 1000000);
		this.__options;
		// will be used to support origins in scrollable areas
		this.__$originParents;
		this.__pointerIsOverOrigin = false;
		// to remove themes if needed
		this.__previousThemes = [];
		// the state can be either: appearing, stable, disappearing, closed
		this.__state = "closed";
		// timeout references
		this.__timeouts = {
			close: [],
			open: null,
		};
		// store touch events to be able to detect emulated mouse events
		this.__touchEvents = [];
		// the reference to the tracker interval
		this.__tracker = null;
		// the element to which this tooltip is associated
		this._$origin;
		// this will be the tooltip element (jQuery wrapped HTML element).
		// It's the job of a plugin to create it and append it to the DOM
		this._$tooltip;

		// launch
		this.__init(element, options);
	};

	$.Tooltipster.prototype = {
		/**
		 * @param origin
		 * @param options
		 * @private
		 */
		__init: function (origin, options) {
			var self = this;

			self._$origin = $(origin);
			self.__options = $.extend(true, {}, defaults, options);

			// some options may need to be reformatted
			self.__optionsFormat();

			// don't run on old IE if asked no to
			if (!env.IE || env.IE >= self.__options.IEmin) {
				// note: the content is null (empty) by default and can stay that
				// way if the plugin remains initialized but not fed any content. The
				// tooltip will just not appear.

				// let's save the initial value of the title attribute for later
				// restoration if need be.
				var initialTitle = null;

				// it will already have been saved in case of multiple tooltips
				if (
					self._$origin.data("tooltipster-initialTitle") === undefined
				) {
					initialTitle = self._$origin.attr("title");

					// we do not want initialTitle to be "undefined" because
					// of how jQuery's .data() method works
					if (initialTitle === undefined) initialTitle = null;

					self._$origin.data(
						"tooltipster-initialTitle",
						initialTitle
					);
				}

				// If content is provided in the options, it has precedence over the
				// title attribute.
				// Note: an empty string is considered content, only 'null' represents
				// the absence of content.
				// Also, an existing title="" attribute will result in an empty string
				// content
				if (self.__options.content !== null) {
					self.__contentSet(self.__options.content);
				} else {
					var selector = self._$origin.attr("data-tooltip-content"),
						$el;

					if (selector) {
						$el = $(selector);
					}

					if ($el && $el[0]) {
						self.__contentSet($el.first());
					} else {
						self.__contentSet(initialTitle);
					}
				}

				self._$origin
					// strip the title off of the element to prevent the default tooltips
					// from popping up
					.removeAttr("title")
					// to be able to find all instances on the page later (upon window
					// events in particular)
					.addClass("tooltipstered");

				// set listeners on the origin
				self.__prepareOrigin();

				// set the garbage collector
				self.__prepareGC();

				// init plugins
				$.each(self.__options.plugins, function (i, pluginName) {
					self._plug(pluginName);
				});

				// to detect swiping
				if (env.hasTouchCapability) {
					$(env.window.document.body).on(
						"touchmove." + self.__namespace + "-triggerOpen",
						function (event) {
							self._touchRecordEvent(event);
						}
					);
				}

				self
					// prepare the tooltip when it gets created. This event must
					// be fired by a plugin
					._on("created", function () {
						self.__prepareTooltip();
					})
					// save position information when it's sent by a plugin
					._on("repositioned", function (e) {
						self.__lastPosition = e.position;
					});
			} else {
				self.__options.disabled = true;
			}
		},

		/**
		 * Insert the content into the appropriate HTML element of the tooltip
		 *
		 * @returns {self}
		 * @private
		 */
		__contentInsert: function () {
			var self = this,
				$el = self._$tooltip.find(".tooltipster-content"),
				formattedContent = self.__Content,
				format = function (content) {
					formattedContent = content;
				};

			self._trigger({
				type: "format",
				content: self.__Content,
				format: format,
			});

			if (self.__options.functionFormat) {
				formattedContent = self.__options.functionFormat.call(
					self,
					self,
					{ origin: self._$origin[0] },
					self.__Content
				);
			}

			if (
				typeof formattedContent === "string" &&
				!self.__options.contentAsHTML
			) {
				$el.text(formattedContent);
			} else {
				$el.empty().append(formattedContent);
			}

			return self;
		},

		/**
		 * Save the content, cloning it beforehand if need be
		 *
		 * @param content
		 * @returns {self}
		 * @private
		 */
		__contentSet: function (content) {
			// clone if asked. Cloning the object makes sure that each instance has its
			// own version of the content (in case a same object were provided for several
			// instances)
			// reminder: typeof null === object
			if (content instanceof $ && this.__options.contentCloning) {
				content = content.clone(true);
			}

			this.__Content = content;

			this._trigger({
				type: "updated",
				content: content,
			});

			return this;
		},

		/**
		 * Error message about a method call made after destruction
		 *
		 * @private
		 */
		__destroyError: function () {
			throw new Error(
				"This tooltip has been destroyed and cannot execute your method call."
			);
		},

		/**
		 * Gather all information about dimensions and available space,
		 * called before every repositioning
		 *
		 * @private
		 * @returns {object}
		 */
		__geometry: function () {
			var self = this,
				$target = self._$origin,
				originIsArea = self._$origin.is("area");

			// if this._$origin is a map area, the target we'll need
			// the dimensions of is actually the image using the map,
			// not the area itself
			if (originIsArea) {
				var mapName = self._$origin.parent().attr("name");

				$target = $('img[usemap="#' + mapName + '"]');
			}

			var bcr = $target[0].getBoundingClientRect(),
				$document = $(env.window.document),
				$window = $(env.window),
				$parent = $target,
				// some useful properties of important elements
				geo = {
					// available space for the tooltip, see down below
					available: {
						document: null,
						window: null,
					},
					document: {
						size: {
							height: $document.height(),
							width: $document.width(),
						},
					},
					window: {
						scroll: {
							// the second ones are for IE compatibility
							left:
								env.window.scrollX ||
								env.window.document.documentElement.scrollLeft,
							top:
								env.window.scrollY ||
								env.window.document.documentElement.scrollTop,
						},
						size: {
							height: $window.height(),
							width: $window.width(),
						},
					},
					origin: {
						// the origin has a fixed lineage if itself or one of its
						// ancestors has a fixed position
						fixedLineage: false,
						// relative to the document
						offset: {},
						size: {
							height: bcr.bottom - bcr.top,
							width: bcr.right - bcr.left,
						},
						usemapImage: originIsArea ? $target[0] : null,
						// relative to the window
						windowOffset: {
							bottom: bcr.bottom,
							left: bcr.left,
							right: bcr.right,
							top: bcr.top,
						},
					},
				},
				geoFixed = false;

			// if the element is a map area, some properties may need
			// to be recalculated
			if (originIsArea) {
				var shape = self._$origin.attr("shape"),
					coords = self._$origin.attr("coords");

				if (coords) {
					coords = coords.split(",");

					$.map(coords, function (val, i) {
						coords[i] = parseInt(val);
					});
				}

				// if the image itself is the area, nothing more to do
				if (shape != "default") {
					switch (shape) {
						case "circle":
							var circleCenterLeft = coords[0],
								circleCenterTop = coords[1],
								circleRadius = coords[2],
								areaTopOffset = circleCenterTop - circleRadius,
								areaLeftOffset =
									circleCenterLeft - circleRadius;

							geo.origin.size.height = circleRadius * 2;
							geo.origin.size.width = geo.origin.size.height;

							geo.origin.windowOffset.left += areaLeftOffset;
							geo.origin.windowOffset.top += areaTopOffset;

							break;

						case "rect":
							var areaLeft = coords[0],
								areaTop = coords[1],
								areaRight = coords[2],
								areaBottom = coords[3];

							geo.origin.size.height = areaBottom - areaTop;
							geo.origin.size.width = areaRight - areaLeft;

							geo.origin.windowOffset.left += areaLeft;
							geo.origin.windowOffset.top += areaTop;

							break;

						case "poly":
							var areaSmallestX = 0,
								areaSmallestY = 0,
								areaGreatestX = 0,
								areaGreatestY = 0,
								arrayAlternate = "even";

							for (var i = 0; i < coords.length; i++) {
								var areaNumber = coords[i];

								if (arrayAlternate == "even") {
									if (areaNumber > areaGreatestX) {
										areaGreatestX = areaNumber;

										if (i === 0) {
											areaSmallestX = areaGreatestX;
										}
									}

									if (areaNumber < areaSmallestX) {
										areaSmallestX = areaNumber;
									}

									arrayAlternate = "odd";
								} else {
									if (areaNumber > areaGreatestY) {
										areaGreatestY = areaNumber;

										if (i == 1) {
											areaSmallestY = areaGreatestY;
										}
									}

									if (areaNumber < areaSmallestY) {
										areaSmallestY = areaNumber;
									}

									arrayAlternate = "even";
								}
							}

							geo.origin.size.height =
								areaGreatestY - areaSmallestY;
							geo.origin.size.width =
								areaGreatestX - areaSmallestX;

							geo.origin.windowOffset.left += areaSmallestX;
							geo.origin.windowOffset.top += areaSmallestY;

							break;
					}
				}
			}

			// user callback through an event
			var edit = function (r) {
				(geo.origin.size.height = r.height),
					(geo.origin.windowOffset.left = r.left),
					(geo.origin.windowOffset.top = r.top),
					(geo.origin.size.width = r.width);
			};

			self._trigger({
				type: "geometry",
				edit: edit,
				geometry: {
					height: geo.origin.size.height,
					left: geo.origin.windowOffset.left,
					top: geo.origin.windowOffset.top,
					width: geo.origin.size.width,
				},
			});

			// calculate the remaining properties with what we got

			geo.origin.windowOffset.right =
				geo.origin.windowOffset.left + geo.origin.size.width;
			geo.origin.windowOffset.bottom =
				geo.origin.windowOffset.top + geo.origin.size.height;

			geo.origin.offset.left =
				geo.origin.windowOffset.left + geo.window.scroll.left;
			geo.origin.offset.top =
				geo.origin.windowOffset.top + geo.window.scroll.top;
			geo.origin.offset.bottom =
				geo.origin.offset.top + geo.origin.size.height;
			geo.origin.offset.right =
				geo.origin.offset.left + geo.origin.size.width;

			// the space that is available to display the tooltip relatively to the document
			geo.available.document = {
				bottom: {
					height: geo.document.size.height - geo.origin.offset.bottom,
					width: geo.document.size.width,
				},
				left: {
					height: geo.document.size.height,
					width: geo.origin.offset.left,
				},
				right: {
					height: geo.document.size.height,
					width: geo.document.size.width - geo.origin.offset.right,
				},
				top: {
					height: geo.origin.offset.top,
					width: geo.document.size.width,
				},
			};

			// the space that is available to display the tooltip relatively to the viewport
			// (the resulting values may be negative if the origin overflows the viewport)
			geo.available.window = {
				bottom: {
					// the inner max is here to make sure the available height is no bigger
					// than the viewport height (when the origin is off screen at the top).
					// The outer max just makes sure that the height is not negative (when
					// the origin overflows at the bottom).
					height: Math.max(
						geo.window.size.height -
							Math.max(geo.origin.windowOffset.bottom, 0),
						0
					),
					width: geo.window.size.width,
				},
				left: {
					height: geo.window.size.height,
					width: Math.max(geo.origin.windowOffset.left, 0),
				},
				right: {
					height: geo.window.size.height,
					width: Math.max(
						geo.window.size.width -
							Math.max(geo.origin.windowOffset.right, 0),
						0
					),
				},
				top: {
					height: Math.max(geo.origin.windowOffset.top, 0),
					width: geo.window.size.width,
				},
			};

			while ($parent[0].tagName.toLowerCase() != "html") {
				if ($parent.css("position") == "fixed") {
					geo.origin.fixedLineage = true;
					break;
				}

				$parent = $parent.parent();
			}

			return geo;
		},

		/**
		 * Some options may need to be formated before being used
		 *
		 * @returns {self}
		 * @private
		 */
		__optionsFormat: function () {
			if (typeof this.__options.animationDuration == "number") {
				this.__options.animationDuration = [
					this.__options.animationDuration,
					this.__options.animationDuration,
				];
			}

			if (typeof this.__options.delay == "number") {
				this.__options.delay = [
					this.__options.delay,
					this.__options.delay,
				];
			}

			if (typeof this.__options.delayTouch == "number") {
				this.__options.delayTouch = [
					this.__options.delayTouch,
					this.__options.delayTouch,
				];
			}

			if (typeof this.__options.theme == "string") {
				this.__options.theme = [this.__options.theme];
			}

			// determine the future parent
			if (this.__options.parent === null) {
				this.__options.parent = $(env.window.document.body);
			} else if (typeof this.__options.parent == "string") {
				this.__options.parent = $(this.__options.parent);
			}

			if (this.__options.trigger == "hover") {
				this.__options.triggerOpen = {
					mouseenter: true,
					touchstart: true,
				};

				this.__options.triggerClose = {
					mouseleave: true,
					originClick: true,
					touchleave: true,
				};
			} else if (this.__options.trigger == "click") {
				this.__options.triggerOpen = {
					click: true,
					tap: true,
				};

				this.__options.triggerClose = {
					click: true,
					tap: true,
				};
			}

			// for the plugins
			this._trigger("options");

			return this;
		},

		/**
		 * Schedules or cancels the garbage collector task
		 *
		 * @returns {self}
		 * @private
		 */
		__prepareGC: function () {
			var self = this;

			// in case the selfDestruction option has been changed by a method call
			if (self.__options.selfDestruction) {
				// the GC task
				self.__garbageCollector = setInterval(function () {
					var now = new Date().getTime();

					// forget the old events
					self.__touchEvents = $.grep(
						self.__touchEvents,
						function (event, i) {
							// 1 minute
							return now - event.time > 60000;
						}
					);

					// auto-destruct if the origin is gone
					if (!bodyContains(self._$origin)) {
						self.close(function () {
							self.destroy();
						});
					}
				}, 20000);
			} else {
				clearInterval(self.__garbageCollector);
			}

			return self;
		},

		/**
		 * Sets listeners on the origin if the open triggers require them.
		 * Unlike the listeners set at opening time, these ones
		 * remain even when the tooltip is closed. It has been made a
		 * separate method so it can be called when the triggers are
		 * changed in the options. Closing is handled in _open()
		 * because of the bindings that may be needed on the tooltip
		 * itself
		 *
		 * @returns {self}
		 * @private
		 */
		__prepareOrigin: function () {
			var self = this;

			// in case we're resetting the triggers
			self._$origin.off("." + self.__namespace + "-triggerOpen");

			// if the device is touch capable, even if only mouse triggers
			// are asked, we need to listen to touch events to know if the mouse
			// events are actually emulated (so we can ignore them)
			if (env.hasTouchCapability) {
				self._$origin.on(
					"touchstart." +
						self.__namespace +
						"-triggerOpen " +
						"touchend." +
						self.__namespace +
						"-triggerOpen " +
						"touchcancel." +
						self.__namespace +
						"-triggerOpen",
					function (event) {
						self._touchRecordEvent(event);
					}
				);
			}

			// mouse click and touch tap work the same way
			if (
				self.__options.triggerOpen.click ||
				(self.__options.triggerOpen.tap && env.hasTouchCapability)
			) {
				var eventNames = "";
				if (self.__options.triggerOpen.click) {
					eventNames += "click." + self.__namespace + "-triggerOpen ";
				}
				if (self.__options.triggerOpen.tap && env.hasTouchCapability) {
					eventNames +=
						"touchend." + self.__namespace + "-triggerOpen";
				}

				self._$origin.on(eventNames, function (event) {
					if (self._touchIsMeaningfulEvent(event)) {
						self._open(event);
					}
				});
			}

			// mouseenter and touch start work the same way
			if (
				self.__options.triggerOpen.mouseenter ||
				(self.__options.triggerOpen.touchstart &&
					env.hasTouchCapability)
			) {
				var eventNames = "";
				if (self.__options.triggerOpen.mouseenter) {
					eventNames +=
						"mouseenter." + self.__namespace + "-triggerOpen ";
				}
				if (
					self.__options.triggerOpen.touchstart &&
					env.hasTouchCapability
				) {
					eventNames +=
						"touchstart." + self.__namespace + "-triggerOpen";
				}

				self._$origin.on(eventNames, function (event) {
					if (
						self._touchIsTouchEvent(event) ||
						!self._touchIsEmulatedEvent(event)
					) {
						self.__pointerIsOverOrigin = true;
						self._openShortly(event);
					}
				});
			}

			// info for the mouseleave/touchleave close triggers when they use a delay
			if (
				self.__options.triggerClose.mouseleave ||
				(self.__options.triggerClose.touchleave &&
					env.hasTouchCapability)
			) {
				var eventNames = "";
				if (self.__options.triggerClose.mouseleave) {
					eventNames +=
						"mouseleave." + self.__namespace + "-triggerOpen ";
				}
				if (
					self.__options.triggerClose.touchleave &&
					env.hasTouchCapability
				) {
					eventNames +=
						"touchend." +
						self.__namespace +
						"-triggerOpen touchcancel." +
						self.__namespace +
						"-triggerOpen";
				}

				self._$origin.on(eventNames, function (event) {
					if (self._touchIsMeaningfulEvent(event)) {
						self.__pointerIsOverOrigin = false;
					}
				});
			}

			return self;
		},

		/**
		 * Do the things that need to be done only once after the tooltip
		 * HTML element it has been created. It has been made a separate
		 * method so it can be called when options are changed. Remember
		 * that the tooltip may actually exist in the DOM before it is
		 * opened, and present after it has been closed: it's the display
		 * plugin that takes care of handling it.
		 *
		 * @returns {self}
		 * @private
		 */
		__prepareTooltip: function () {
			var self = this,
				p = self.__options.interactive ? "auto" : "";

			// this will be useful to know quickly if the tooltip is in
			// the DOM or not
			self._$tooltip.attr("id", self.__namespace).css({
				// pointer events
				"pointer-events": p,
				zIndex: self.__options.zIndex,
			});

			// themes
			// remove the old ones and add the new ones
			$.each(self.__previousThemes, function (i, theme) {
				self._$tooltip.removeClass(theme);
			});
			$.each(self.__options.theme, function (i, theme) {
				self._$tooltip.addClass(theme);
			});

			self.__previousThemes = $.merge([], self.__options.theme);

			return self;
		},

		/**
		 * Handles the scroll on any of the parents of the origin (when the
		 * tooltip is open)
		 *
		 * @param {object} event
		 * @returns {self}
		 * @private
		 */
		__scrollHandler: function (event) {
			var self = this;

			if (self.__options.triggerClose.scroll) {
				self._close(event);
			} else {
				// if the origin or tooltip have been removed: do nothing, the tracker will
				// take care of it later
				if (
					bodyContains(self._$origin) &&
					bodyContains(self._$tooltip)
				) {
					var geo = null;

					// if the scroll happened on the window
					if (event.target === env.window.document) {
						// if the origin has a fixed lineage, window scroll will have no
						// effect on its position nor on the position of the tooltip
						if (!self.__Geometry.origin.fixedLineage) {
							// we don't need to do anything unless repositionOnScroll is true
							// because the tooltip will already have moved with the window
							// (and of course with the origin)
							if (self.__options.repositionOnScroll) {
								self.reposition(event);
							}
						}
					}
					// if the scroll happened on another parent of the tooltip, it means
					// that it's in a scrollable area and now needs to have its position
					// adjusted or recomputed, depending ont the repositionOnScroll
					// option. Also, if the origin is partly hidden due to a parent that
					// hides its overflow, we'll just hide (not close) the tooltip.
					else {
						geo = self.__geometry();

						var overflows = false;

						// a fixed position origin is not affected by the overflow hiding
						// of a parent
						if (self._$origin.css("position") != "fixed") {
							self.__$originParents.each(function (i, el) {
								var $el = $(el),
									overflowX = $el.css("overflow-x"),
									overflowY = $el.css("overflow-y");

								if (
									overflowX != "visible" ||
									overflowY != "visible"
								) {
									var bcr = el.getBoundingClientRect();

									if (overflowX != "visible") {
										if (
											geo.origin.windowOffset.left <
												bcr.left ||
											geo.origin.windowOffset.right >
												bcr.right
										) {
											overflows = true;
											return false;
										}
									}

									if (overflowY != "visible") {
										if (
											geo.origin.windowOffset.top <
												bcr.top ||
											geo.origin.windowOffset.bottom >
												bcr.bottom
										) {
											overflows = true;
											return false;
										}
									}
								}

								// no need to go further if fixed, for the same reason as above
								if ($el.css("position") == "fixed") {
									return false;
								}
							});
						}

						if (overflows) {
							self._$tooltip.css("visibility", "hidden");
						} else {
							self._$tooltip.css("visibility", "visible");

							// reposition
							if (self.__options.repositionOnScroll) {
								self.reposition(event);
							}
							// or just adjust offset
							else {
								// we have to use offset and not windowOffset because this way,
								// only the scroll distance of the scrollable areas are taken into
								// account (the scrolltop value of the main window must be
								// ignored since the tooltip already moves with it)
								var offsetLeft =
										geo.origin.offset.left -
										self.__Geometry.origin.offset.left,
									offsetTop =
										geo.origin.offset.top -
										self.__Geometry.origin.offset.top;

								// add the offset to the position initially computed by the display plugin
								self._$tooltip.css({
									left:
										self.__lastPosition.coord.left +
										offsetLeft,
									top:
										self.__lastPosition.coord.top +
										offsetTop,
								});
							}
						}
					}

					self._trigger({
						type: "scroll",
						event: event,
						geo: geo,
					});
				}
			}

			return self;
		},

		/**
		 * Changes the state of the tooltip
		 *
		 * @param {string} state
		 * @returns {self}
		 * @private
		 */
		__stateSet: function (state) {
			this.__state = state;

			this._trigger({
				type: "state",
				state: state,
			});

			return this;
		},

		/**
		 * Clear appearance timeouts
		 *
		 * @returns {self}
		 * @private
		 */
		__timeoutsClear: function () {
			// there is only one possible open timeout: the delayed opening
			// when the mouseenter/touchstart open triggers are used
			clearTimeout(this.__timeouts.open);
			this.__timeouts.open = null;

			// ... but several close timeouts: the delayed closing when the
			// mouseleave close trigger is used and the timer option
			$.each(this.__timeouts.close, function (i, timeout) {
				clearTimeout(timeout);
			});
			this.__timeouts.close = [];

			return this;
		},

		/**
		 * Start the tracker that will make checks at regular intervals
		 *
		 * @returns {self}
		 * @private
		 */
		__trackerStart: function () {
			var self = this,
				$content = self._$tooltip.find(".tooltipster-content");

			// get the initial content size
			if (self.__options.trackTooltip) {
				self.__contentBcr = $content[0].getBoundingClientRect();
			}

			self.__tracker = setInterval(function () {
				// if the origin or tooltip elements have been removed.
				// Note: we could destroy the instance now if the origin has
				// been removed but we'll leave that task to our garbage collector
				if (
					!bodyContains(self._$origin) ||
					!bodyContains(self._$tooltip)
				) {
					self._close();
				}
				// if everything is alright
				else {
					// compare the former and current positions of the origin to reposition
					// the tooltip if need be
					if (self.__options.trackOrigin) {
						var g = self.__geometry(),
							identical = false;

						// compare size first (a change requires repositioning too)
						if (
							areEqual(g.origin.size, self.__Geometry.origin.size)
						) {
							// for elements that have a fixed lineage (see __geometry()), we track the
							// top and left properties (relative to window)
							if (self.__Geometry.origin.fixedLineage) {
								if (
									areEqual(
										g.origin.windowOffset,
										self.__Geometry.origin.windowOffset
									)
								) {
									identical = true;
								}
							}
							// otherwise, track total offset (relative to document)
							else {
								if (
									areEqual(
										g.origin.offset,
										self.__Geometry.origin.offset
									)
								) {
									identical = true;
								}
							}
						}

						if (!identical) {
							// close the tooltip when using the mouseleave close trigger
							// (see https://github.com/iamceege/tooltipster/pull/253)
							if (self.__options.triggerClose.mouseleave) {
								self._close();
							} else {
								self.reposition();
							}
						}
					}

					if (self.__options.trackTooltip) {
						var currentBcr = $content[0].getBoundingClientRect();

						if (
							currentBcr.height !== self.__contentBcr.height ||
							currentBcr.width !== self.__contentBcr.width
						) {
							self.reposition();
							self.__contentBcr = currentBcr;
						}
					}
				}
			}, self.__options.trackerInterval);

			return self;
		},

		/**
		 * Closes the tooltip (after the closing delay)
		 *
		 * @param event
		 * @param callback
		 * @param force Set to true to override a potential refusal of the user's function
		 * @returns {self}
		 * @protected
		 */
		_close: function (event, callback, force) {
			var self = this,
				ok = true;

			self._trigger({
				type: "close",
				event: event,
				stop: function () {
					ok = false;
				},
			});

			// a destroying tooltip (force == true) may not refuse to close
			if (ok || force) {
				// save the method custom callback and cancel any open method custom callbacks
				if (callback) self.__callbacks.close.push(callback);
				self.__callbacks.open = [];

				// clear open/close timeouts
				self.__timeoutsClear();

				var finishCallbacks = function () {
					// trigger any close method custom callbacks and reset them
					$.each(self.__callbacks.close, function (i, c) {
						c.call(self, self, {
							event: event,
							origin: self._$origin[0],
						});
					});

					self.__callbacks.close = [];
				};

				if (self.__state != "closed") {
					var necessary = true,
						d = new Date(),
						now = d.getTime(),
						newClosingTime =
							now + self.__options.animationDuration[1];

					// the tooltip may already already be disappearing, but if a new
					// call to close() is made after the animationDuration was changed
					// to 0 (for example), we ought to actually close it sooner than
					// previously scheduled. In that case it should be noted that the
					// browser will not adapt the animation duration to the new
					// animationDuration that was set after the start of the closing
					// animation.
					// Note: the same thing could be considered at opening, but is not
					// really useful since the tooltip is actually opened immediately
					// upon a call to _open(). Since it would not make the opening
					// animation finish sooner, its sole impact would be to trigger the
					// state event and the open callbacks sooner than the actual end of
					// the opening animation, which is not great.
					if (self.__state == "disappearing") {
						if (
							newClosingTime > self.__closingTime &&
							// in case closing is actually overdue because the script
							// execution was suspended. See #679
							self.__options.animationDuration[1] > 0
						) {
							necessary = false;
						}
					}

					if (necessary) {
						self.__closingTime = newClosingTime;

						if (self.__state != "disappearing") {
							self.__stateSet("disappearing");
						}

						var finish = function () {
							// stop the tracker
							clearInterval(self.__tracker);

							// a "beforeClose" option has been asked several times but would
							// probably useless since the content element is still accessible
							// via ::content(), and because people can always use listeners
							// inside their content to track what's going on. For the sake of
							// simplicity, this has been denied. Bur for the rare people who
							// really need the option (for old browsers or for the case where
							// detaching the content is actually destructive, for file or
							// password inputs for example), this event will do the work.
							self._trigger({
								type: "closing",
								event: event,
							});

							// unbind listeners which are no longer needed

							self._$tooltip
								.off("." + self.__namespace + "-triggerClose")
								.removeClass("tooltipster-dying");

							// orientationchange, scroll and resize listeners
							$(env.window).off(
								"." + self.__namespace + "-triggerClose"
							);

							// scroll listeners
							self.__$originParents.each(function (i, el) {
								$(el).off(
									"scroll." +
										self.__namespace +
										"-triggerClose"
								);
							});
							// clear the array to prevent memory leaks
							self.__$originParents = null;

							$(env.window.document.body).off(
								"." + self.__namespace + "-triggerClose"
							);

							self._$origin.off(
								"." + self.__namespace + "-triggerClose"
							);

							self._off("dismissable");

							// a plugin that would like to remove the tooltip from the
							// DOM when closed should bind on this
							self.__stateSet("closed");

							// trigger event
							self._trigger({
								type: "after",
								event: event,
							});

							// call our constructor custom callback function
							if (self.__options.functionAfter) {
								self.__options.functionAfter.call(self, self, {
									event: event,
									origin: self._$origin[0],
								});
							}

							// call our method custom callbacks functions
							finishCallbacks();
						};

						if (env.hasTransitions) {
							self._$tooltip.css({
								"-moz-animation-duration":
									self.__options.animationDuration[1] + "ms",
								"-ms-animation-duration":
									self.__options.animationDuration[1] + "ms",
								"-o-animation-duration":
									self.__options.animationDuration[1] + "ms",
								"-webkit-animation-duration":
									self.__options.animationDuration[1] + "ms",
								"animation-duration":
									self.__options.animationDuration[1] + "ms",
								"transition-duration":
									self.__options.animationDuration[1] + "ms",
							});

							self._$tooltip
								// clear both potential open and close tasks
								.clearQueue()
								.removeClass("tooltipster-show")
								// for transitions only
								.addClass("tooltipster-dying");

							if (self.__options.animationDuration[1] > 0) {
								self._$tooltip.delay(
									self.__options.animationDuration[1]
								);
							}

							self._$tooltip.queue(finish);
						} else {
							self._$tooltip
								.stop()
								.fadeOut(
									self.__options.animationDuration[1],
									finish
								);
						}
					}
				}
				// if the tooltip is already closed, we still need to trigger
				// the method custom callbacks
				else {
					finishCallbacks();
				}
			}

			return self;
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @returns {self}
		 * @protected
		 */
		_off: function () {
			this.__$emitterPrivate.off.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @returns {self}
		 * @protected
		 */
		_on: function () {
			this.__$emitterPrivate.on.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * For internal use by plugins, if needed
		 *
		 * @returns {self}
		 * @protected
		 */
		_one: function () {
			this.__$emitterPrivate.one.apply(
				this.__$emitterPrivate,
				Array.prototype.slice.apply(arguments)
			);
			return this;
		},

		/**
		 * Opens the tooltip right away.
		 *
		 * @param event
		 * @param callback Will be called when the opening animation is over
		 * @returns {self}
		 * @protected
		 */
		_open: function (event, callback) {
			var self = this;

			// if the destruction process has not begun and if this was not
			// triggered by an unwanted emulated click event
			if (!self.__destroying) {
				// check that the origin is still in the DOM
				if (
					bodyContains(self._$origin) &&
					// if the tooltip is enabled
					self.__enabled
				) {
					var ok = true;

					// if the tooltip is not open yet, we need to call functionBefore.
					// otherwise we can jst go on
					if (self.__state == "closed") {
						// trigger an event. The event.stop function allows the callback
						// to prevent the opening of the tooltip
						self._trigger({
							type: "before",
							event: event,
							stop: function () {
								ok = false;
							},
						});

						if (ok && self.__options.functionBefore) {
							// call our custom function before continuing
							ok = self.__options.functionBefore.call(
								self,
								self,
								{
									event: event,
									origin: self._$origin[0],
								}
							);
						}
					}

					if (ok !== false) {
						// if there is some content
						if (self.__Content !== null) {
							// save the method callback and cancel close method callbacks
							if (callback) {
								self.__callbacks.open.push(callback);
							}
							self.__callbacks.close = [];

							// get rid of any appearance timeouts
							self.__timeoutsClear();

							var extraTime,
								finish = function () {
									if (self.__state != "stable") {
										self.__stateSet("stable");
									}

									// trigger any open method custom callbacks and reset them
									$.each(
										self.__callbacks.open,
										function (i, c) {
											c.call(self, self, {
												origin: self._$origin[0],
												tooltip: self._$tooltip[0],
											});
										}
									);

									self.__callbacks.open = [];
								};

							// if the tooltip is already open
							if (self.__state !== "closed") {
								// the timer (if any) will start (or restart) right now
								extraTime = 0;

								// if it was disappearing, cancel that
								if (self.__state === "disappearing") {
									self.__stateSet("appearing");

									if (env.hasTransitions) {
										self._$tooltip
											.clearQueue()
											.removeClass("tooltipster-dying")
											.addClass("tooltipster-show");

										if (
											self.__options
												.animationDuration[0] > 0
										) {
											self._$tooltip.delay(
												self.__options
													.animationDuration[0]
											);
										}

										self._$tooltip.queue(finish);
									} else {
										// in case the tooltip was currently fading out, bring it back
										// to life
										self._$tooltip.stop().fadeIn(finish);
									}
								}
								// if the tooltip is already open, we still need to trigger the method
								// custom callback
								else if (self.__state == "stable") {
									finish();
								}
							}
							// if the tooltip isn't already open, open it
							else {
								// a plugin must bind on this and store the tooltip in this._$tooltip
								self.__stateSet("appearing");

								// the timer (if any) will start when the tooltip has fully appeared
								// after its transition
								extraTime = self.__options.animationDuration[0];

								// insert the content inside the tooltip
								self.__contentInsert();

								// reposition the tooltip and attach to the DOM
								self.reposition(event, true);

								// animate in the tooltip. If the display plugin wants no css
								// animations, it may override the animation option with a
								// dummy value that will produce no effect
								if (env.hasTransitions) {
									// note: there seems to be an issue with start animations which
									// are randomly not played on fast devices in both Chrome and FF,
									// couldn't find a way to solve it yet. It seems that applying
									// the classes before appending to the DOM helps a little, but
									// it messes up some CSS transitions. The issue almost never
									// happens when delay[0]==0 though
									self._$tooltip
										.addClass(
											"tooltipster-" +
												self.__options.animation
										)
										.addClass("tooltipster-initial")
										.css({
											"-moz-animation-duration":
												self.__options
													.animationDuration[0] +
												"ms",
											"-ms-animation-duration":
												self.__options
													.animationDuration[0] +
												"ms",
											"-o-animation-duration":
												self.__options
													.animationDuration[0] +
												"ms",
											"-webkit-animation-duration":
												self.__options
													.animationDuration[0] +
												"ms",
											"animation-duration":
												self.__options
													.animationDuration[0] +
												"ms",
											"transition-duration":
												self.__options
													.animationDuration[0] +
												"ms",
										});

									setTimeout(function () {
										// a quick hover may have already triggered a mouseleave
										if (self.__state != "closed") {
											self._$tooltip
												.addClass("tooltipster-show")
												.removeClass(
													"tooltipster-initial"
												);

											if (
												self.__options
													.animationDuration[0] > 0
											) {
												self._$tooltip.delay(
													self.__options
														.animationDuration[0]
												);
											}

											self._$tooltip.queue(finish);
										}
									}, 0);
								} else {
									// old browsers will have to live with this
									self._$tooltip
										.css("display", "none")
										.fadeIn(
											self.__options.animationDuration[0],
											finish
										);
								}

								// checks if the origin is removed while the tooltip is open
								self.__trackerStart();

								// NOTE: the listeners below have a '-triggerClose' namespace
								// because we'll remove them when the tooltip closes (unlike
								// the '-triggerOpen' listeners). So some of them are actually
								// not about close triggers, rather about positioning.

								$(env.window)
									// reposition on resize
									.on(
										"resize." +
											self.__namespace +
											"-triggerClose",
										function (e) {
											var $ae = $(document.activeElement);

											// reposition only if the resize event was not triggered upon the opening
											// of a virtual keyboard due to an input field being focused within the tooltip
											// (otherwise the repositioning would lose the focus)
											if (
												(!$ae.is("input") &&
													!$ae.is("textarea")) ||
												!$.contains(
													self._$tooltip[0],
													$ae[0]
												)
											) {
												self.reposition(e);
											}
										}
									)
									// same as below for parents
									.on(
										"scroll." +
											self.__namespace +
											"-triggerClose",
										function (e) {
											self.__scrollHandler(e);
										}
									);

								self.__$originParents = self._$origin.parents();

								// scrolling may require the tooltip to be moved or even
								// repositioned in some cases
								self.__$originParents.each(function (
									i,
									parent
								) {
									$(parent).on(
										"scroll." +
											self.__namespace +
											"-triggerClose",
										function (e) {
											self.__scrollHandler(e);
										}
									);
								});

								if (
									self.__options.triggerClose.mouseleave ||
									(self.__options.triggerClose.touchleave &&
										env.hasTouchCapability)
								) {
									// we use an event to allow users/plugins to control when the mouseleave/touchleave
									// close triggers will come to action. It allows to have more triggering elements
									// than just the origin and the tooltip for example, or to cancel/delay the closing,
									// or to make the tooltip interactive even if it wasn't when it was open, etc.
									self._on("dismissable", function (event) {
										if (event.dismissable) {
											if (event.delay) {
												timeout = setTimeout(
													function () {
														// event.event may be undefined
														self._close(
															event.event
														);
													},
													event.delay
												);

												self.__timeouts.close.push(
													timeout
												);
											} else {
												self._close(event);
											}
										} else {
											clearTimeout(timeout);
										}
									});

									// now set the listeners that will trigger 'dismissable' events
									var $elements = self._$origin,
										eventNamesIn = "",
										eventNamesOut = "",
										timeout = null;

									// if we have to allow interaction, bind on the tooltip too
									if (self.__options.interactive) {
										$elements = $elements.add(
											self._$tooltip
										);
									}

									if (
										self.__options.triggerClose.mouseleave
									) {
										eventNamesIn +=
											"mouseenter." +
											self.__namespace +
											"-triggerClose ";
										eventNamesOut +=
											"mouseleave." +
											self.__namespace +
											"-triggerClose ";
									}
									if (
										self.__options.triggerClose
											.touchleave &&
										env.hasTouchCapability
									) {
										eventNamesIn +=
											"touchstart." +
											self.__namespace +
											"-triggerClose";
										eventNamesOut +=
											"touchend." +
											self.__namespace +
											"-triggerClose touchcancel." +
											self.__namespace +
											"-triggerClose";
									}

									$elements
										// close after some time spent outside of the elements
										.on(eventNamesOut, function (event) {
											// it's ok if the touch gesture ended up to be a swipe,
											// it's still a "touch leave" situation
											if (
												self._touchIsTouchEvent(
													event
												) ||
												!self._touchIsEmulatedEvent(
													event
												)
											) {
												var delay =
													event.type == "mouseleave"
														? self.__options.delay
														: self.__options
																.delayTouch;

												self._trigger({
													delay: delay[1],
													dismissable: true,
													event: event,
													type: "dismissable",
												});
											}
										})
										// suspend the mouseleave timeout when the pointer comes back
										// over the elements
										.on(eventNamesIn, function (event) {
											// it's also ok if the touch event is a swipe gesture
											if (
												self._touchIsTouchEvent(
													event
												) ||
												!self._touchIsEmulatedEvent(
													event
												)
											) {
												self._trigger({
													dismissable: false,
													event: event,
													type: "dismissable",
												});
											}
										});
								}

								// close the tooltip when the origin gets a mouse click (common behavior of
								// native tooltips)
								if (self.__options.triggerClose.originClick) {
									self._$origin.on(
										"click." +
											self.__namespace +
											"-triggerClose",
										function (event) {
											// we could actually let a tap trigger this but this feature just
											// does not make sense on touch devices
											if (
												!self._touchIsTouchEvent(
													event
												) &&
												!self._touchIsEmulatedEvent(
													event
												)
											) {
												self._close(event);
											}
										}
									);
								}

								// set the same bindings for click and touch on the body to close the tooltip
								if (
									self.__options.triggerClose.click ||
									(self.__options.triggerClose.tap &&
										env.hasTouchCapability)
								) {
									// don't set right away since the click/tap event which triggered this method
									// (if it was a click/tap) is going to bubble up to the body, we don't want it
									// to close the tooltip immediately after it opened
									setTimeout(function () {
										if (self.__state != "closed") {
											var eventNames = "",
												$body = $(
													env.window.document.body
												);

											if (
												self.__options.triggerClose
													.click
											) {
												eventNames +=
													"click." +
													self.__namespace +
													"-triggerClose ";
											}
											if (
												self.__options.triggerClose
													.tap &&
												env.hasTouchCapability
											) {
												eventNames +=
													"touchend." +
													self.__namespace +
													"-triggerClose";
											}

											$body.on(
												eventNames,
												function (event) {
													if (
														self._touchIsMeaningfulEvent(
															event
														)
													) {
														self._touchRecordEvent(
															event
														);

														if (
															!self.__options
																.interactive ||
															!$.contains(
																self
																	._$tooltip[0],
																event.target
															)
														) {
															self._close(event);
														}
													}
												}
											);

											// needed to detect and ignore swiping
											if (
												self.__options.triggerClose
													.tap &&
												env.hasTouchCapability
											) {
												$body.on(
													"touchstart." +
														self.__namespace +
														"-triggerClose",
													function (event) {
														self._touchRecordEvent(
															event
														);
													}
												);
											}
										}
									}, 0);
								}

								self._trigger("ready");

								// call our custom callback
								if (self.__options.functionReady) {
									self.__options.functionReady.call(
										self,
										self,
										{
											origin: self._$origin[0],
											tooltip: self._$tooltip[0],
										}
									);
								}
							}

							// if we have a timer set, let the countdown begin
							if (self.__options.timer > 0) {
								var timeout = setTimeout(function () {
									self._close();
								}, self.__options.timer + extraTime);

								self.__timeouts.close.push(timeout);
							}
						}
					}
				}
			}

			return self;
		},

		/**
		 * When using the mouseenter/touchstart open triggers, this function will
		 * schedule the opening of the tooltip after the delay, if there is one
		 *
		 * @param event
		 * @returns {self}
		 * @protected
		 */
		_openShortly: function (event) {
			var self = this,
				ok = true;

			if (self.__state != "stable" && self.__state != "appearing") {
				// if a timeout is not already running
				if (!self.__timeouts.open) {
					self._trigger({
						type: "start",
						event: event,
						stop: function () {
							ok = false;
						},
					});

					if (ok) {
						var delay =
							event.type.indexOf("touch") == 0
								? self.__options.delayTouch
								: self.__options.delay;

						if (delay[0]) {
							self.__timeouts.open = setTimeout(function () {
								self.__timeouts.open = null;

								// open only if the pointer (mouse or touch) is still over the origin.
								// The check on the "meaningful event" can only be made here, after some
								// time has passed (to know if the touch was a swipe or not)
								if (
									self.__pointerIsOverOrigin &&
									self._touchIsMeaningfulEvent(event)
								) {
									// signal that we go on
									self._trigger("startend");

									self._open(event);
								} else {
									// signal that we cancel
									self._trigger("startcancel");
								}
							}, delay[0]);
						} else {
							// signal that we go on
							self._trigger("startend");

							self._open(event);
						}
					}
				}
			}

			return self;
		},

		/**
		 * Meant for plugins to get their options
		 *
		 * @param {string} pluginName The name of the plugin that asks for its options
		 * @param {object} defaultOptions The default options of the plugin
		 * @returns {object} The options
		 * @protected
		 */
		_optionsExtract: function (pluginName, defaultOptions) {
			var self = this,
				options = $.extend(true, {}, defaultOptions);

			// if the plugin options were isolated in a property named after the
			// plugin, use them (prevents conflicts with other plugins)
			var pluginOptions = self.__options[pluginName];

			// if not, try to get them as regular options
			if (!pluginOptions) {
				pluginOptions = {};

				$.each(defaultOptions, function (optionName, value) {
					var o = self.__options[optionName];

					if (o !== undefined) {
						pluginOptions[optionName] = o;
					}
				});
			}

			// let's merge the default options and the ones that were provided. We'd want
			// to do a deep copy but not let jQuery merge arrays, so we'll do a shallow
			// extend on two levels, that will be enough if options are not more than 1
			// level deep
			$.each(options, function (optionName, value) {
				if (pluginOptions[optionName] !== undefined) {
					if (
						typeof value == "object" &&
						!(value instanceof Array) &&
						value != null &&
						typeof pluginOptions[optionName] == "object" &&
						!(pluginOptions[optionName] instanceof Array) &&
						pluginOptions[optionName] != null
					) {
						$.extend(
							options[optionName],
							pluginOptions[optionName]
						);
					} else {
						options[optionName] = pluginOptions[optionName];
					}
				}
			});

			return options;
		},

		/**
		 * Used at instantiation of the plugin, or afterwards by plugins that activate themselves
		 * on existing instances
		 *
		 * @param {object} pluginName
		 * @returns {self}
		 * @protected
		 */
		_plug: function (pluginName) {
			var plugin = $.tooltipster._plugin(pluginName);

			if (plugin) {
				// if there is a constructor for instances
				if (plugin.instance) {
					// proxy non-private methods on the instance to allow new instance methods
					$.tooltipster.__bridge(plugin.instance, this, plugin.name);
				}
			} else {
				throw new Error(
					'The "' + pluginName + '" plugin is not defined'
				);
			}

			return this;
		},

		/**
		 * This will return true if the event is a mouse event which was
		 * emulated by the browser after a touch event. This allows us to
		 * really dissociate mouse and touch triggers.
		 *
		 * There is a margin of error if a real mouse event is fired right
		 * after (within the delay shown below) a touch event on the same
		 * element, but hopefully it should not happen often.
		 *
		 * @returns {boolean}
		 * @protected
		 */
		_touchIsEmulatedEvent: function (event) {
			var isEmulated = false,
				now = new Date().getTime();

			for (var i = this.__touchEvents.length - 1; i >= 0; i--) {
				var e = this.__touchEvents[i];

				// delay, in milliseconds. It's supposed to be 300ms in
				// most browsers (350ms on iOS) to allow a double tap but
				// can be less (check out FastClick for more info)
				if (now - e.time < 500) {
					if (e.target === event.target) {
						isEmulated = true;
					}
				} else {
					break;
				}
			}

			return isEmulated;
		},

		/**
		 * Returns false if the event was an emulated mouse event or
		 * a touch event involved in a swipe gesture.
		 *
		 * @param {object} event
		 * @returns {boolean}
		 * @protected
		 */
		_touchIsMeaningfulEvent: function (event) {
			return (
				(this._touchIsTouchEvent(event) &&
					!this._touchSwiped(event.target)) ||
				(!this._touchIsTouchEvent(event) &&
					!this._touchIsEmulatedEvent(event))
			);
		},

		/**
		 * Checks if an event is a touch event
		 *
		 * @param {object} event
		 * @returns {boolean}
		 * @protected
		 */
		_touchIsTouchEvent: function (event) {
			return event.type.indexOf("touch") == 0;
		},

		/**
		 * Store touch events for a while to detect swiping and emulated mouse events
		 *
		 * @param {object} event
		 * @returns {self}
		 * @protected
		 */
		_touchRecordEvent: function (event) {
			if (this._touchIsTouchEvent(event)) {
				event.time = new Date().getTime();
				this.__touchEvents.push(event);
			}

			return this;
		},

		/**
		 * Returns true if a swipe happened after the last touchstart event fired on
		 * event.target.
		 *
		 * We need to differentiate a swipe from a tap before we let the event open
		 * or close the tooltip. A swipe is when a touchmove (scroll) event happens
		 * on the body between the touchstart and the touchend events of an element.
		 *
		 * @param {object} target The HTML element that may have triggered the swipe
		 * @returns {boolean}
		 * @protected
		 */
		_touchSwiped: function (target) {
			var swiped = false;

			for (var i = this.__touchEvents.length - 1; i >= 0; i--) {
				var e = this.__touchEvents[i];

				if (e.type == "touchmove") {
					swiped = true;
					break;
				} else if (e.type == "touchstart" && target === e.target) {
					break;
				}
			}

			return swiped;
		},

		/**
		 * Triggers an event on the instance emitters
		 *
		 * @returns {self}
		 * @protected
		 */
		_trigger: function () {
			var args = Array.prototype.slice.apply(arguments);

			if (typeof args[0] == "string") {
				args[0] = { type: args[0] };
			}

			// add properties to the event
			args[0].instance = this;
			args[0].origin = this._$origin ? this._$origin[0] : null;
			args[0].tooltip = this._$tooltip ? this._$tooltip[0] : null;

			// note: the order of emitters matters
			this.__$emitterPrivate.trigger.apply(this.__$emitterPrivate, args);
			$.tooltipster._trigger.apply($.tooltipster, args);
			this.__$emitterPublic.trigger.apply(this.__$emitterPublic, args);

			return this;
		},

		/**
		 * Deactivate a plugin on this instance
		 *
		 * @returns {self}
		 * @protected
		 */
		_unplug: function (pluginName) {
			var self = this;

			// if the plugin has been activated on this instance
			if (self[pluginName]) {
				var plugin = $.tooltipster._plugin(pluginName);

				// if there is a constructor for instances
				if (plugin.instance) {
					// unbridge
					$.each(plugin.instance, function (methodName, fn) {
						// if the method exists (privates methods do not) and comes indeed from
						// this plugin (may be missing or come from a conflicting plugin).
						if (
							self[methodName] &&
							self[methodName].bridged === self[pluginName]
						) {
							delete self[methodName];
						}
					});
				}

				// destroy the plugin
				if (self[pluginName].__destroy) {
					self[pluginName].__destroy();
				}

				// remove the reference to the plugin instance
				delete self[pluginName];
			}

			return self;
		},

		/**
		 * @see self::_close
		 * @returns {self}
		 * @public
		 */
		close: function (callback) {
			if (!this.__destroyed) {
				this._close(null, callback);
			} else {
				this.__destroyError();
			}

			return this;
		},

		/**
		 * Sets or gets the content of the tooltip
		 *
		 * @returns {mixed|self}
		 * @public
		 */
		content: function (content) {
			var self = this;

			// getter method
			if (content === undefined) {
				return self.__Content;
			}
			// setter method
			else {
				if (!self.__destroyed) {
					// change the content
					self.__contentSet(content);

					if (self.__Content !== null) {
						// update the tooltip if it is open
						if (self.__state !== "closed") {
							// reset the content in the tooltip
							self.__contentInsert();

							// reposition and resize the tooltip
							self.reposition();

							// if we want to play a little animation showing the content changed
							if (self.__options.updateAnimation) {
								if (env.hasTransitions) {
									// keep the reference in the local scope
									var animation =
										self.__options.updateAnimation;

									self._$tooltip.addClass(
										"tooltipster-update-" + animation
									);

									// remove the class after a while. The actual duration of the
									// update animation may be shorter, it's set in the CSS rules
									setTimeout(function () {
										if (self.__state != "closed") {
											self._$tooltip.removeClass(
												"tooltipster-update-" +
													animation
											);
										}
									}, 1000);
								} else {
									self._$tooltip.fadeTo(
										200,
										0.5,
										function () {
											if (self.__state != "closed") {
												self._$tooltip.fadeTo(200, 1);
											}
										}
									);
								}
							}
						}
					} else {
						self._close();
					}
				} else {
					self.__destroyError();
				}

				return self;
			}
		},

		/**
		 * Destroys the tooltip
		 *
		 * @returns {self}
		 * @public
		 */
		destroy: function () {
			var self = this;

			if (!self.__destroyed) {
				if (self.__state != "closed") {
					// no closing delay
					self.option("animationDuration", 0)
						// force closing
						._close(null, null, true);
				} else {
					// there might be an open timeout still running
					self.__timeoutsClear();
				}

				// send event
				self._trigger("destroy");

				self.__destroyed = true;

				self._$origin
					.removeData(self.__namespace)
					// remove the open trigger listeners
					.off("." + self.__namespace + "-triggerOpen");

				// remove the touch listener
				$(env.window.document.body).off(
					"." + self.__namespace + "-triggerOpen"
				);

				var ns = self._$origin.data("tooltipster-ns");

				// if the origin has been removed from DOM, its data may
				// well have been destroyed in the process and there would
				// be nothing to clean up or restore
				if (ns) {
					// if there are no more tooltips on this element
					if (ns.length === 1) {
						// optional restoration of a title attribute
						var title = null;
						if (self.__options.restoration == "previous") {
							title = self._$origin.data(
								"tooltipster-initialTitle"
							);
						} else if (self.__options.restoration == "current") {
							// old school technique to stringify when outerHTML is not supported
							title =
								typeof self.__Content == "string"
									? self.__Content
									: $("<div></div>")
											.append(self.__Content)
											.html();
						}

						if (title) {
							self._$origin.attr("title", title);
						}

						// final cleaning

						self._$origin.removeClass("tooltipstered");

						self._$origin
							.removeData("tooltipster-ns")
							.removeData("tooltipster-initialTitle");
					} else {
						// remove the instance namespace from the list of namespaces of
						// tooltips present on the element
						ns = $.grep(ns, function (el, i) {
							return el !== self.__namespace;
						});
						self._$origin.data("tooltipster-ns", ns);
					}
				}

				// last event
				self._trigger("destroyed");

				// unbind private and public event listeners
				self._off();
				self.off();

				// remove external references, just in case
				self.__Content = null;
				self.__$emitterPrivate = null;
				self.__$emitterPublic = null;
				self.__options.parent = null;
				self._$origin = null;
				self._$tooltip = null;

				// make sure the object is no longer referenced in there to prevent
				// memory leaks
				$.tooltipster.__instancesLatestArr = $.grep(
					$.tooltipster.__instancesLatestArr,
					function (el, i) {
						return self !== el;
					}
				);

				clearInterval(self.__garbageCollector);
			} else {
				self.__destroyError();
			}

			// we return the scope rather than true so that the call to
			// .tooltipster('destroy') actually returns the matched elements
			// and applies to all of them
			return self;
		},

		/**
		 * Disables the tooltip
		 *
		 * @returns {self}
		 * @public
		 */
		disable: function () {
			if (!this.__destroyed) {
				// close first, in case the tooltip would not disappear on
				// its own (no close trigger)
				this._close();
				this.__enabled = false;

				return this;
			} else {
				this.__destroyError();
			}

			return this;
		},

		/**
		 * Returns the HTML element of the origin
		 *
		 * @returns {self}
		 * @public
		 */
		elementOrigin: function () {
			if (!this.__destroyed) {
				return this._$origin[0];
			} else {
				this.__destroyError();
			}
		},

		/**
		 * Returns the HTML element of the tooltip
		 *
		 * @returns {self}
		 * @public
		 */
		elementTooltip: function () {
			return this._$tooltip ? this._$tooltip[0] : null;
		},

		/**
		 * Enables the tooltip
		 *
		 * @returns {self}
		 * @public
		 */
		enable: function () {
			this.__enabled = true;
			return this;
		},

		/**
		 * Alias, deprecated in 4.0.0
		 *
		 * @param {function} callback
		 * @returns {self}
		 * @public
		 */
		hide: function (callback) {
			return this.close(callback);
		},

		/**
		 * Returns the instance
		 *
		 * @returns {self}
		 * @public
		 */
		instance: function () {
			return this;
		},

		/**
		 * For public use only, not to be used by plugins (use ::_off() instead)
		 *
		 * @returns {self}
		 * @public
		 */
		off: function () {
			if (!this.__destroyed) {
				this.__$emitterPublic.off.apply(
					this.__$emitterPublic,
					Array.prototype.slice.apply(arguments)
				);
			}

			return this;
		},

		/**
		 * For public use only, not to be used by plugins (use ::_on() instead)
		 *
		 * @returns {self}
		 * @public
		 */
		on: function () {
			if (!this.__destroyed) {
				this.__$emitterPublic.on.apply(
					this.__$emitterPublic,
					Array.prototype.slice.apply(arguments)
				);
			} else {
				this.__destroyError();
			}

			return this;
		},

		/**
		 * For public use only, not to be used by plugins
		 *
		 * @returns {self}
		 * @public
		 */
		one: function () {
			if (!this.__destroyed) {
				this.__$emitterPublic.one.apply(
					this.__$emitterPublic,
					Array.prototype.slice.apply(arguments)
				);
			} else {
				this.__destroyError();
			}

			return this;
		},

		/**
		 * @see self::_open
		 * @returns {self}
		 * @public
		 */
		open: function (callback) {
			if (!this.__destroyed) {
				this._open(null, callback);
			} else {
				this.__destroyError();
			}

			return this;
		},

		/**
		 * Get or set options. For internal use and advanced users only.
		 *
		 * @param {string} o Option name
		 * @param {mixed} val optional A new value for the option
		 * @return {mixed|self} If val is omitted, the value of the option
		 * is returned, otherwise the instance itself is returned
		 * @public
		 */
		option: function (o, val) {
			// getter
			if (val === undefined) {
				return this.__options[o];
			}
			// setter
			else {
				if (!this.__destroyed) {
					// change value
					this.__options[o] = val;

					// format
					this.__optionsFormat();

					// re-prepare the triggers if needed
					if (
						$.inArray(o, [
							"trigger",
							"triggerClose",
							"triggerOpen",
						]) >= 0
					) {
						this.__prepareOrigin();
					}

					if (o === "selfDestruction") {
						this.__prepareGC();
					}
				} else {
					this.__destroyError();
				}

				return this;
			}
		},

		/**
		 * This method is in charge of setting the position and size properties of the tooltip.
		 * All the hard work is delegated to the display plugin.
		 * Note: The tooltip may be detached from the DOM at the moment the method is called
		 * but must be attached by the end of the method call.
		 *
		 * @param {object} event For internal use only. Defined if an event such as
		 * window resizing triggered the repositioning
		 * @param {boolean} tooltipIsDetached For internal use only. Set this to true if you
		 * know that the tooltip not being in the DOM is not an issue (typically when the
		 * tooltip element has just been created but has not been added to the DOM yet).
		 * @returns {self}
		 * @public
		 */
		reposition: function (event, tooltipIsDetached) {
			var self = this;

			if (!self.__destroyed) {
				// if the tooltip is still open and the origin is still in the DOM
				if (self.__state != "closed" && bodyContains(self._$origin)) {
					// if the tooltip has not been removed from DOM manually (or if it
					// has been detached on purpose)
					if (tooltipIsDetached || bodyContains(self._$tooltip)) {
						if (!tooltipIsDetached) {
							// detach in case the tooltip overflows the window and adds
							// scrollbars to it, so __geometry can be accurate
							self._$tooltip.detach();
						}

						// refresh the geometry object before passing it as a helper
						self.__Geometry = self.__geometry();

						// let a plugin fo the rest
						self._trigger({
							type: "reposition",
							event: event,
							helper: {
								geo: self.__Geometry,
							},
						});
					}
				}
			} else {
				self.__destroyError();
			}

			return self;
		},

		/**
		 * Alias, deprecated in 4.0.0
		 *
		 * @param callback
		 * @returns {self}
		 * @public
		 */
		show: function (callback) {
			return this.open(callback);
		},

		/**
		 * Returns some properties about the instance
		 *
		 * @returns {object}
		 * @public
		 */
		status: function () {
			return {
				destroyed: this.__destroyed,
				enabled: this.__enabled,
				open: this.__state !== "closed",
				state: this.__state,
			};
		},

		/**
		 * For public use only, not to be used by plugins
		 *
		 * @returns {self}
		 * @public
		 */
		triggerHandler: function () {
			if (!this.__destroyed) {
				this.__$emitterPublic.triggerHandler.apply(
					this.__$emitterPublic,
					Array.prototype.slice.apply(arguments)
				);
			} else {
				this.__destroyError();
			}

			return this;
		},
	};

	$.fn.tooltipster = function () {
		// for using in closures
		var args = Array.prototype.slice.apply(arguments),
			// common mistake: an HTML element can't be in several tooltips at the same time
			contentCloningWarning =
				"You are using a single HTML element as content for several tooltips. You probably want to set the contentCloning option to TRUE.";

		// this happens with $(sel).tooltipster(...) when $(sel) does not match anything
		if (this.length === 0) {
			// still chainable
			return this;
		}
		// this happens when calling $(sel).tooltipster('methodName or options')
		// where $(sel) matches one or more elements
		else {
			// method calls
			if (typeof args[0] === "string") {
				var v = "#*$~&";

				this.each(function () {
					// retrieve the namepaces of the tooltip(s) that exist on that element.
					// We will interact with the first tooltip only.
					var ns = $(this).data("tooltipster-ns"),
						// self represents the instance of the first tooltipster plugin
						// associated to the current HTML object of the loop
						self = ns ? $(this).data(ns[0]) : null;

					// if the current element holds a tooltipster instance
					if (self) {
						if (typeof self[args[0]] === "function") {
							if (
								this.length > 1 &&
								args[0] == "content" &&
								(args[1] instanceof $ ||
									(typeof args[1] == "object" &&
										args[1] != null &&
										args[1].tagName)) &&
								!self.__options.contentCloning &&
								self.__options.debug
							) {
								console.log(contentCloningWarning);
							}

							// note : args[1] and args[2] may not be defined
							var resp = self[args[0]](args[1], args[2]);
						} else {
							throw new Error('Unknown method "' + args[0] + '"');
						}

						// if the function returned anything other than the instance
						// itself (which implies chaining, except for the `instance` method)
						if (resp !== self || args[0] === "instance") {
							v = resp;

							// return false to stop .each iteration on the first element
							// matched by the selector
							return false;
						}
					} else {
						throw new Error(
							"You called Tooltipster's \"" +
								args[0] +
								'" method on an uninitialized element'
						);
					}
				});

				return v !== "#*$~&" ? v : this;
			}
			// first argument is undefined or an object: the tooltip is initializing
			else {
				// reset the array of last initialized objects
				$.tooltipster.__instancesLatestArr = [];

				// is there a defined value for the multiple option in the options object ?
				var multipleIsSet = args[0] && args[0].multiple !== undefined,
					// if the multiple option is set to true, or if it's not defined but
					// set to true in the defaults
					multiple =
						(multipleIsSet && args[0].multiple) ||
						(!multipleIsSet && defaults.multiple),
					// same for content
					contentIsSet = args[0] && args[0].content !== undefined,
					content =
						(contentIsSet && args[0].content) ||
						(!contentIsSet && defaults.content),
					// same for contentCloning
					contentCloningIsSet =
						args[0] && args[0].contentCloning !== undefined,
					contentCloning =
						(contentCloningIsSet && args[0].contentCloning) ||
						(!contentCloningIsSet && defaults.contentCloning),
					// same for debug
					debugIsSet = args[0] && args[0].debug !== undefined,
					debug =
						(debugIsSet && args[0].debug) ||
						(!debugIsSet && defaults.debug);

				if (
					this.length > 1 &&
					(content instanceof $ ||
						(typeof content == "object" &&
							content != null &&
							content.tagName)) &&
					!contentCloning &&
					debug
				) {
					console.log(contentCloningWarning);
				}

				// create a tooltipster instance for each element if it doesn't
				// already have one or if the multiple option is set, and attach the
				// object to it
				this.each(function () {
					var go = false,
						$this = $(this),
						ns = $this.data("tooltipster-ns"),
						obj = null;

					if (!ns) {
						go = true;
					} else if (multiple) {
						go = true;
					} else if (debug) {
						console.log(
							"Tooltipster: one or more tooltips are already attached to the element below. Ignoring."
						);
						console.log(this);
					}

					if (go) {
						obj = new $.Tooltipster(this, args[0]);

						// save the reference of the new instance
						if (!ns) ns = [];
						ns.push(obj.__namespace);
						$this.data("tooltipster-ns", ns);

						// save the instance itself
						$this.data(obj.__namespace, obj);

						// call our constructor custom function.
						// we do this here and not in ::init() because we wanted
						// the object to be saved in $this.data before triggering
						// it
						if (obj.__options.functionInit) {
							obj.__options.functionInit.call(obj, obj, {
								origin: this,
							});
						}

						// and now the event, for the plugins and core emitter
						obj._trigger("init");
					}

					$.tooltipster.__instancesLatestArr.push(obj);
				});

				return this;
			}
		}
	};

	// Utilities

	/**
	 * A class to check if a tooltip can fit in given dimensions
	 *
	 * @param {object} $tooltip The jQuery wrapped tooltip element, or a clone of it
	 */
	function Ruler($tooltip) {
		// list of instance variables

		this.$container;
		this.constraints = null;
		this.__$tooltip;

		this.__init($tooltip);
	}

	Ruler.prototype = {
		/**
		 * Move the tooltip into an invisible div that does not allow overflow to make
		 * size tests. Note: the tooltip may or may not be attached to the DOM at the
		 * moment this method is called, it does not matter.
		 *
		 * @param {object} $tooltip The object to test. May be just a clone of the
		 * actual tooltip.
		 * @private
		 */
		__init: function ($tooltip) {
			this.__$tooltip = $tooltip;

			this.__$tooltip
				.css({
					// for some reason we have to specify top and left 0
					left: 0,
					// any overflow will be ignored while measuring
					overflow: "hidden",
					// positions at (0,0) without the div using 100% of the available width
					position: "absolute",
					top: 0,
				})
				// overflow must be auto during the test. We re-set this in case
				// it were modified by the user
				.find(".tooltipster-content")
				.css("overflow", "auto");

			this.$container = $('<div class="tooltipster-ruler"></div>')
				.append(this.__$tooltip)
				.appendTo(env.window.document.body);
		},

		/**
		 * Force the browser to redraw (re-render) the tooltip immediately. This is required
		 * when you changed some CSS properties and need to make something with it
		 * immediately, without waiting for the browser to redraw at the end of instructions.
		 *
		 * @see http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes
		 * @private
		 */
		__forceRedraw: function () {
			// note: this would work but for Webkit only
			//this.__$tooltip.close();
			//this.__$tooltip[0].offsetHeight;
			//this.__$tooltip.open();

			// works in FF too
			var $p = this.__$tooltip.parent();
			this.__$tooltip.detach();
			this.__$tooltip.appendTo($p);
		},

		/**
		 * Set maximum dimensions for the tooltip. A call to ::measure afterwards
		 * will tell us if the content overflows or if it's ok
		 *
		 * @param {int} width
		 * @param {int} height
		 * @return {Ruler}
		 * @public
		 */
		constrain: function (width, height) {
			this.constraints = {
				width: width,
				height: height,
			};

			this.__$tooltip.css({
				// we disable display:flex, otherwise the content would overflow without
				// creating horizontal scrolling (which we need to detect).
				display: "block",
				// reset any previous height
				height: "",
				// we'll check if horizontal scrolling occurs
				overflow: "auto",
				// we'll set the width and see what height is generated and if there
				// is horizontal overflow
				width: width,
			});

			return this;
		},

		/**
		 * Reset the tooltip content overflow and remove the test container
		 *
		 * @returns {Ruler}
		 * @public
		 */
		destroy: function () {
			// in case the element was not a clone
			this.__$tooltip.detach().find(".tooltipster-content").css({
				// reset to CSS value
				display: "",
				overflow: "",
			});

			this.$container.remove();
		},

		/**
		 * Removes any constraints
		 *
		 * @returns {Ruler}
		 * @public
		 */
		free: function () {
			this.constraints = null;

			// reset to natural size
			this.__$tooltip.css({
				display: "",
				height: "",
				overflow: "visible",
				width: "",
			});

			return this;
		},

		/**
		 * Returns the size of the tooltip. When constraints are applied, also returns
		 * whether the tooltip fits in the provided dimensions.
		 * The idea is to see if the new height is small enough and if the content does
		 * not overflow horizontally.
		 *
		 * @param {int} width
		 * @param {int} height
		 * @returns {object} An object with a bool `fits` property and a `size` property
		 * @public
		 */
		measure: function () {
			this.__forceRedraw();

			var tooltipBcr = this.__$tooltip[0].getBoundingClientRect(),
				result = {
					size: {
						// bcr.width/height are not defined in IE8- but in this
						// case, bcr.right/bottom will have the same value
						// except in iOS 8+ where tooltipBcr.bottom/right are wrong
						// after scrolling for reasons yet to be determined.
						// tooltipBcr.top/left might not be 0, see issue #514
						height:
							tooltipBcr.height ||
							tooltipBcr.bottom - tooltipBcr.top,
						width:
							tooltipBcr.width ||
							tooltipBcr.right - tooltipBcr.left,
					},
				};

			if (this.constraints) {
				// note: we used to use offsetWidth instead of boundingRectClient but
				// it returned rounded values, causing issues with sub-pixel layouts.

				// note2: noticed that the bcrWidth of text content of a div was once
				// greater than the bcrWidth of its container by 1px, causing the final
				// tooltip box to be too small for its content. However, evaluating
				// their widths one against the other (below) surprisingly returned
				// equality. Happened only once in Chrome 48, was not able to reproduce
				// => just having fun with float position values...

				var $content = this.__$tooltip.find(".tooltipster-content"),
					height = this.__$tooltip.outerHeight(),
					contentBcr = $content[0].getBoundingClientRect(),
					fits = {
						height: height <= this.constraints.height,
						width:
							// this condition accounts for min-width property that
							// may apply
							tooltipBcr.width <= this.constraints.width &&
							// the -1 is here because scrollWidth actually returns
							// a rounded value, and may be greater than bcr.width if
							// it was rounded up. This may cause an issue for contents
							// which actually really overflow  by 1px or so, but that
							// should be rare. Not sure how to solve this efficiently.
							// See http://blogs.msdn.com/b/ie/archive/2012/02/17/sub-pixel-rendering-and-the-css-object-model.aspx
							contentBcr.width >= $content[0].scrollWidth - 1,
					};

				result.fits = fits.height && fits.width;
			}

			// old versions of IE get the width wrong for some reason and it causes
			// the text to be broken to a new line, so we round it up. If the width
			// is the width of the screen though, we can assume it is accurate.
			if (
				env.IE &&
				env.IE <= 11 &&
				result.size.width !==
					env.window.document.documentElement.clientWidth
			) {
				result.size.width = Math.ceil(result.size.width) + 1;
			}

			return result;
		},
	};

	// quick & dirty compare function, not bijective nor multidimensional
	function areEqual(a, b) {
		var same = true;
		$.each(a, function (i, _) {
			if (b[i] === undefined || a[i] !== b[i]) {
				same = false;
				return false;
			}
		});
		return same;
	}

	/**
	 * A fast function to check if an element is still in the DOM. It
	 * tries to use an id as ids are indexed by the browser, or falls
	 * back to jQuery's `contains` method. May fail if two elements
	 * have the same id, but so be it
	 *
	 * @param {object} $obj A jQuery-wrapped HTML element
	 * @return {boolean}
	 */
	function bodyContains($obj) {
		var id = $obj.attr("id"),
			el = id ? env.window.document.getElementById(id) : null;
		// must also check that the element with the id is the one we want
		return el
			? el === $obj[0]
			: $.contains(env.window.document.body, $obj[0]);
	}

	// detect IE versions for dirty fixes
	var uA = navigator.userAgent.toLowerCase();
	if (uA.indexOf("msie") != -1) env.IE = parseInt(uA.split("msie")[1]);
	else if (
		uA.toLowerCase().indexOf("trident") !== -1 &&
		uA.indexOf(" rv:11") !== -1
	)
		env.IE = 11;
	else if (uA.toLowerCase().indexOf("edge/") != -1)
		env.IE = parseInt(uA.toLowerCase().split("edge/")[1]);

	// detecting support for CSS transitions
	function transitionSupport() {
		// env.window is not defined yet when this is called
		if (!win) return false;

		var b = win.document.body || win.document.documentElement,
			s = b.style,
			p = "transition",
			v = ["Moz", "Webkit", "Khtml", "O", "ms"];

		if (typeof s[p] == "string") {
			return true;
		}

		p = p.charAt(0).toUpperCase() + p.substr(1);
		for (var i = 0; i < v.length; i++) {
			if (typeof s[v[i] + p] == "string") {
				return true;
			}
		}
		return false;
	}

	// we'll return jQuery for plugins not to have to declare it as a dependency,
	// but it's done by a build task since it should be included only once at the
	// end when we concatenate the main file with a plugin
	// sideTip is Tooltipster's default plugin.
	// This file will be UMDified by a build task.

	var pluginName = "tooltipster.sideTip";

	$.tooltipster._plugin({
		name: pluginName,
		instance: {
			/**
			 * Defaults are provided as a function for an easy override by inheritance
			 *
			 * @return {object} An object with the defaults options
			 * @private
			 */
			__defaults: function () {
				return {
					// if the tooltip should display an arrow that points to the origin
					arrow: true,
					// the distance in pixels between the tooltip and the origin
					distance: 6,
					// allows to easily change the position of the tooltip
					functionPosition: null,
					maxWidth: null,
					// used to accomodate the arrow of tooltip if there is one.
					// First to make sure that the arrow target is not too close
					// to the edge of the tooltip, so the arrow does not overflow
					// the tooltip. Secondly when we reposition the tooltip to
					// make sure that it's positioned in such a way that the arrow is
					// still pointing at the target (and not a few pixels beyond it).
					// It should be equal to or greater than half the width of
					// the arrow (by width we mean the size of the side which touches
					// the side of the tooltip).
					minIntersection: 16,
					minWidth: 0,
					// deprecated in 4.0.0. Listed for _optionsExtract to pick it up
					position: null,
					side: "top",
					// set to false to position the tooltip relatively to the document rather
					// than the window when we open it
					viewportAware: true,
				};
			},

			/**
			 * Run once: at instantiation of the plugin
			 *
			 * @param {object} instance The tooltipster object that instantiated this plugin
			 * @private
			 */
			__init: function (instance) {
				var self = this;

				// list of instance variables

				self.__instance = instance;
				self.__namespace =
					"tooltipster-sideTip-" +
					Math.round(Math.random() * 1000000);
				self.__previousState = "closed";
				self.__options;

				// initial formatting
				self.__optionsFormat();

				self.__instance._on(
					"state." + self.__namespace,
					function (event) {
						if (event.state == "closed") {
							self.__close();
						} else if (
							event.state == "appearing" &&
							self.__previousState == "closed"
						) {
							self.__create();
						}

						self.__previousState = event.state;
					}
				);

				// reformat every time the options are changed
				self.__instance._on("options." + self.__namespace, function () {
					self.__optionsFormat();
				});

				self.__instance._on(
					"reposition." + self.__namespace,
					function (e) {
						self.__reposition(e.event, e.helper);
					}
				);
			},

			/**
			 * Called when the tooltip has closed
			 *
			 * @private
			 */
			__close: function () {
				// detach our content object first, so the next jQuery's remove()
				// call does not unbind its event handlers
				if (this.__instance.content() instanceof $) {
					this.__instance.content().detach();
				}

				// remove the tooltip from the DOM
				this.__instance._$tooltip.remove();
				this.__instance._$tooltip = null;
			},

			/**
			 * Creates the HTML element of the tooltip.
			 *
			 * @private
			 */
			__create: function () {
				// note: we wrap with a .tooltipster-box div to be able to set a margin on it
				// (.tooltipster-base must not have one)
				var $html = $(
					'<div class="tooltipster-base tooltipster-sidetip">' +
						'<div class="tooltipster-box">' +
						'<div class="tooltipster-content"></div>' +
						"</div>" +
						'<div class="tooltipster-arrow">' +
						'<div class="tooltipster-arrow-uncropped">' +
						'<div class="tooltipster-arrow-border"></div>' +
						'<div class="tooltipster-arrow-background"></div>' +
						"</div>" +
						"</div>" +
						"</div>"
				);

				// hide arrow if asked
				if (!this.__options.arrow) {
					$html
						.find(".tooltipster-box")
						.css("margin", 0)
						.end()
						.find(".tooltipster-arrow")
						.hide();
				}

				// apply min/max width if asked
				if (this.__options.minWidth) {
					$html.css("min-width", this.__options.minWidth + "px");
				}
				if (this.__options.maxWidth) {
					$html.css("max-width", this.__options.maxWidth + "px");
				}

				this.__instance._$tooltip = $html;

				// tell the instance that the tooltip element has been created
				this.__instance._trigger("created");
			},

			/**
			 * Used when the plugin is to be unplugged
			 *
			 * @private
			 */
			__destroy: function () {
				this.__instance._off("." + self.__namespace);
			},

			/**
			 * (Re)compute this.__options from the options declared to the instance
			 *
			 * @private
			 */
			__optionsFormat: function () {
				var self = this;

				// get the options
				self.__options = self.__instance._optionsExtract(
					pluginName,
					self.__defaults()
				);

				// for backward compatibility, deprecated in v4.0.0
				if (self.__options.position) {
					self.__options.side = self.__options.position;
				}

				// options formatting

				// format distance as a four-cell array if it ain't one yet and then make
				// it an object with top/bottom/left/right properties
				if (typeof self.__options.distance != "object") {
					self.__options.distance = [self.__options.distance];
				}
				if (self.__options.distance.length < 4) {
					if (self.__options.distance[1] === undefined)
						self.__options.distance[1] = self.__options.distance[0];
					if (self.__options.distance[2] === undefined)
						self.__options.distance[2] = self.__options.distance[0];
					if (self.__options.distance[3] === undefined)
						self.__options.distance[3] = self.__options.distance[1];
				}

				self.__options.distance = {
					top: self.__options.distance[0],
					right: self.__options.distance[1],
					bottom: self.__options.distance[2],
					left: self.__options.distance[3],
				};

				// let's transform:
				// 'top' into ['top', 'bottom', 'right', 'left']
				// 'right' into ['right', 'left', 'top', 'bottom']
				// 'bottom' into ['bottom', 'top', 'right', 'left']
				// 'left' into ['left', 'right', 'top', 'bottom']
				if (typeof self.__options.side == "string") {
					var opposites = {
						top: "bottom",
						right: "left",
						bottom: "top",
						left: "right",
					};

					self.__options.side = [
						self.__options.side,
						opposites[self.__options.side],
					];

					if (
						self.__options.side[0] == "left" ||
						self.__options.side[0] == "right"
					) {
						self.__options.side.push("top", "bottom");
					} else {
						self.__options.side.push("right", "left");
					}
				}

				// misc
				// disable the arrow in IE6 unless the arrow option was explicitly set to true
				if (
					$.tooltipster._env.IE === 6 &&
					self.__options.arrow !== true
				) {
					self.__options.arrow = false;
				}
			},

			/**
			 * This method must compute and set the positioning properties of the
			 * tooltip (left, top, width, height, etc.). It must also make sure the
			 * tooltip is eventually appended to its parent (since the element may be
			 * detached from the DOM at the moment the method is called).
			 *
			 * We'll evaluate positioning scenarios to find which side can contain the
			 * tooltip in the best way. We'll consider things relatively to the window
			 * (unless the user asks not to), then to the document (if need be, or if the
			 * user explicitly requires the tests to run on the document). For each
			 * scenario, measures are taken, allowing us to know how well the tooltip
			 * is going to fit. After that, a sorting function will let us know what
			 * the best scenario is (we also allow the user to choose his favorite
			 * scenario by using an event).
			 *
			 * @param {object} helper An object that contains variables that plugin
			 * creators may find useful (see below)
			 * @param {object} helper.geo An object with many layout properties
			 * about objects of interest (window, document, origin). This should help
			 * plugin users compute the optimal position of the tooltip
			 * @private
			 */
			__reposition: function (event, helper) {
				var self = this,
					finalResult,
					// to know where to put the tooltip, we need to know on which point
					// of the x or y axis we should center it. That coordinate is the target
					targets = self.__targetFind(helper),
					testResults = [];

				// make sure the tooltip is detached while we make tests on a clone
				self.__instance._$tooltip.detach();

				// we could actually provide the original element to the Ruler and
				// not a clone, but it just feels right to keep it out of the
				// machinery.
				var $clone = self.__instance._$tooltip.clone(),
					// start position tests session
					ruler = $.tooltipster._getRuler($clone),
					satisfied = false,
					animation = self.__instance.option("animation");

				// an animation class could contain properties that distort the size
				if (animation) {
					$clone.removeClass("tooltipster-" + animation);
				}

				// start evaluating scenarios
				$.each(["window", "document"], function (i, container) {
					var takeTest = null;

					// let the user decide to keep on testing or not
					self.__instance._trigger({
						container: container,
						helper: helper,
						satisfied: satisfied,
						takeTest: function (bool) {
							takeTest = bool;
						},
						results: testResults,
						type: "positionTest",
					});

					if (
						takeTest == true ||
						(takeTest != false &&
							satisfied == false &&
							// skip the window scenarios if asked. If they are reintegrated by
							// the callback of the positionTest event, they will have to be
							// excluded using the callback of positionTested
							(container != "window" ||
								self.__options.viewportAware))
					) {
						// for each allowed side
						for (var i = 0; i < self.__options.side.length; i++) {
							var distance = {
									horizontal: 0,
									vertical: 0,
								},
								side = self.__options.side[i];

							if (side == "top" || side == "bottom") {
								distance.vertical =
									self.__options.distance[side];
							} else {
								distance.horizontal =
									self.__options.distance[side];
							}

							// this may have an effect on the size of the tooltip if there are css
							// rules for the arrow or something else
							self.__sideChange($clone, side);

							$.each(
								["natural", "constrained"],
								function (i, mode) {
									takeTest = null;

									// emit an event on the instance
									self.__instance._trigger({
										container: container,
										event: event,
										helper: helper,
										mode: mode,
										results: testResults,
										satisfied: satisfied,
										side: side,
										takeTest: function (bool) {
											takeTest = bool;
										},
										type: "positionTest",
									});

									if (
										takeTest == true ||
										(takeTest != false &&
											satisfied == false)
									) {
										var testResult = {
											container: container,
											// we let the distance as an object here, it can make things a little easier
											// during the user's calculations at positionTest/positionTested
											distance: distance,
											// whether the tooltip can fit in the size of the viewport (does not mean
											// that we'll be able to make it initially entirely visible, see 'whole')
											fits: null,
											mode: mode,
											outerSize: null,
											side: side,
											size: null,
											target: targets[side],
											// check if the origin has enough surface on screen for the tooltip to
											// aim at it without overflowing the viewport (this is due to the thickness
											// of the arrow represented by the minIntersection length).
											// If not, the tooltip will have to be partly or entirely off screen in
											// order to stay docked to the origin. This value will stay null when the
											// container is the document, as it is not relevant
											whole: null,
										};

										// get the size of the tooltip with or without size constraints
										var rulerConfigured =
												mode == "natural"
													? ruler.free()
													: ruler.constrain(
															helper.geo
																.available[
																container
															][side].width -
																distance.horizontal,
															helper.geo
																.available[
																container
															][side].height -
																distance.vertical
													  ),
											rulerResults =
												rulerConfigured.measure();

										testResult.size = rulerResults.size;
										testResult.outerSize = {
											height:
												rulerResults.size.height +
												distance.vertical,
											width:
												rulerResults.size.width +
												distance.horizontal,
										};

										if (mode == "natural") {
											if (
												helper.geo.available[container][
													side
												].width >=
													testResult.outerSize
														.width &&
												helper.geo.available[container][
													side
												].height >=
													testResult.outerSize.height
											) {
												testResult.fits = true;
											} else {
												testResult.fits = false;
											}
										} else {
											testResult.fits = rulerResults.fits;
										}

										if (container == "window") {
											if (!testResult.fits) {
												testResult.whole = false;
											} else {
												if (
													side == "top" ||
													side == "bottom"
												) {
													testResult.whole =
														helper.geo.origin
															.windowOffset
															.right >=
															self.__options
																.minIntersection &&
														helper.geo.window.size
															.width -
															helper.geo.origin
																.windowOffset
																.left >=
															self.__options
																.minIntersection;
												} else {
													testResult.whole =
														helper.geo.origin
															.windowOffset
															.bottom >=
															self.__options
																.minIntersection &&
														helper.geo.window.size
															.height -
															helper.geo.origin
																.windowOffset
																.top >=
															self.__options
																.minIntersection;
												}
											}
										}

										testResults.push(testResult);

										// we don't need to compute more positions if we have one fully on screen
										if (testResult.whole) {
											satisfied = true;
										} else {
											// don't run the constrained test unless the natural width was greater
											// than the available width, otherwise it's pointless as we know it
											// wouldn't fit either
											if (
												testResult.mode == "natural" &&
												(testResult.fits ||
													testResult.size.width <=
														helper.geo.available[
															container
														][side].width)
											) {
												return false;
											}
										}
									}
								}
							);
						}
					}
				});

				// the user may eliminate the unwanted scenarios from testResults, but he's
				// not supposed to alter them at this point. functionPosition and the
				// position event serve that purpose.
				self.__instance._trigger({
					edit: function (r) {
						testResults = r;
					},
					event: event,
					helper: helper,
					results: testResults,
					type: "positionTested",
				});

				/**
				 * Sort the scenarios to find the favorite one.
				 *
				 * The favorite scenario is when we can fully display the tooltip on screen,
				 * even if it means that the middle of the tooltip is no longer centered on
				 * the middle of the origin (when the origin is near the edge of the screen
				 * or even partly off screen). We want the tooltip on the preferred side,
				 * even if it means that we have to use a constrained size rather than a
				 * natural one (as long as it fits). When the origin is off screen at the top
				 * the tooltip will be positioned at the bottom (if allowed), if the origin
				 * is off screen on the right, it will be positioned on the left, etc.
				 * If there are no scenarios where the tooltip can fit on screen, or if the
				 * user does not want the tooltip to fit on screen (viewportAware == false),
				 * we fall back to the scenarios relative to the document.
				 *
				 * When the tooltip is bigger than the viewport in either dimension, we stop
				 * looking at the window scenarios and consider the document scenarios only,
				 * with the same logic to find on which side it would fit best.
				 *
				 * If the tooltip cannot fit the document on any side, we force it at the
				 * bottom, so at least the user can scroll to see it.
				 */
				testResults.sort(function (a, b) {
					// best if it's whole (the tooltip fits and adapts to the viewport)
					if (a.whole && !b.whole) {
						return -1;
					} else if (!a.whole && b.whole) {
						return 1;
					} else if (a.whole && b.whole) {
						var ai = self.__options.side.indexOf(a.side),
							bi = self.__options.side.indexOf(b.side);

						// use the user's sides fallback array
						if (ai < bi) {
							return -1;
						} else if (ai > bi) {
							return 1;
						} else {
							// will be used if the user forced the tests to continue
							return a.mode == "natural" ? -1 : 1;
						}
					} else {
						// better if it fits
						if (a.fits && !b.fits) {
							return -1;
						} else if (!a.fits && b.fits) {
							return 1;
						} else if (a.fits && b.fits) {
							var ai = self.__options.side.indexOf(a.side),
								bi = self.__options.side.indexOf(b.side);

							// use the user's sides fallback array
							if (ai < bi) {
								return -1;
							} else if (ai > bi) {
								return 1;
							} else {
								// will be used if the user forced the tests to continue
								return a.mode == "natural" ? -1 : 1;
							}
						} else {
							// if everything failed, this will give a preference to the case where
							// the tooltip overflows the document at the bottom
							if (
								a.container == "document" &&
								a.side == "bottom" &&
								a.mode == "natural"
							) {
								return -1;
							} else {
								return 1;
							}
						}
					}
				});

				finalResult = testResults[0];

				// now let's find the coordinates of the tooltip relatively to the window
				finalResult.coord = {};

				switch (finalResult.side) {
					case "left":
					case "right":
						finalResult.coord.top = Math.floor(
							finalResult.target - finalResult.size.height / 2
						);
						break;

					case "bottom":
					case "top":
						finalResult.coord.left = Math.floor(
							finalResult.target - finalResult.size.width / 2
						);
						break;
				}

				switch (finalResult.side) {
					case "left":
						finalResult.coord.left =
							helper.geo.origin.windowOffset.left -
							finalResult.outerSize.width;
						break;

					case "right":
						finalResult.coord.left =
							helper.geo.origin.windowOffset.right +
							finalResult.distance.horizontal;
						break;

					case "top":
						finalResult.coord.top =
							helper.geo.origin.windowOffset.top -
							finalResult.outerSize.height;
						break;

					case "bottom":
						finalResult.coord.top =
							helper.geo.origin.windowOffset.bottom +
							finalResult.distance.vertical;
						break;
				}

				// if the tooltip can potentially be contained within the viewport dimensions
				// and that we are asked to make it fit on screen
				if (finalResult.container == "window") {
					// if the tooltip overflows the viewport, we'll move it accordingly (then it will
					// not be centered on the middle of the origin anymore). We only move horizontally
					// for top and bottom tooltips and vice versa.
					if (
						finalResult.side == "top" ||
						finalResult.side == "bottom"
					) {
						// if there is an overflow on the left
						if (finalResult.coord.left < 0) {
							// prevent the overflow unless the origin itself gets off screen (minus the
							// margin needed to keep the arrow pointing at the target)
							if (
								helper.geo.origin.windowOffset.right -
									this.__options.minIntersection >=
								0
							) {
								finalResult.coord.left = 0;
							} else {
								finalResult.coord.left =
									helper.geo.origin.windowOffset.right -
									this.__options.minIntersection -
									1;
							}
						}
						// or an overflow on the right
						else if (
							finalResult.coord.left >
							helper.geo.window.size.width -
								finalResult.size.width
						) {
							if (
								helper.geo.origin.windowOffset.left +
									this.__options.minIntersection <=
								helper.geo.window.size.width
							) {
								finalResult.coord.left =
									helper.geo.window.size.width -
									finalResult.size.width;
							} else {
								finalResult.coord.left =
									helper.geo.origin.windowOffset.left +
									this.__options.minIntersection +
									1 -
									finalResult.size.width;
							}
						}
					} else {
						// overflow at the top
						if (finalResult.coord.top < 0) {
							if (
								helper.geo.origin.windowOffset.bottom -
									this.__options.minIntersection >=
								0
							) {
								finalResult.coord.top = 0;
							} else {
								finalResult.coord.top =
									helper.geo.origin.windowOffset.bottom -
									this.__options.minIntersection -
									1;
							}
						}
						// or at the bottom
						else if (
							finalResult.coord.top >
							helper.geo.window.size.height -
								finalResult.size.height
						) {
							if (
								helper.geo.origin.windowOffset.top +
									this.__options.minIntersection <=
								helper.geo.window.size.height
							) {
								finalResult.coord.top =
									helper.geo.window.size.height -
									finalResult.size.height;
							} else {
								finalResult.coord.top =
									helper.geo.origin.windowOffset.top +
									this.__options.minIntersection +
									1 -
									finalResult.size.height;
							}
						}
					}
				} else {
					// there might be overflow here too but it's easier to handle. If there has
					// to be an overflow, we'll make sure it's on the right side of the screen
					// (because the browser will extend the document size if there is an overflow
					// on the right, but not on the left). The sort function above has already
					// made sure that a bottom document overflow is preferred to a top overflow,
					// so we don't have to care about it.

					// if there is an overflow on the right
					if (
						finalResult.coord.left >
						helper.geo.window.size.width - finalResult.size.width
					) {
						// this may actually create on overflow on the left but we'll fix it in a sec
						finalResult.coord.left =
							helper.geo.window.size.width -
							finalResult.size.width;
					}

					// if there is an overflow on the left
					if (finalResult.coord.left < 0) {
						// don't care if it overflows the right after that, we made our best
						finalResult.coord.left = 0;
					}
				}

				// submit the positioning proposal to the user function which may choose to change
				// the side, size and/or the coordinates

				// first, set the rules that corresponds to the proposed side: it may change
				// the size of the tooltip, and the custom functionPosition may want to detect the
				// size of something before making a decision. So let's make things easier for the
				// implementor
				self.__sideChange($clone, finalResult.side);

				// add some variables to the helper
				helper.tooltipClone = $clone[0];
				helper.tooltipParent =
					self.__instance.option("parent").parent[0];
				// move informative values to the helper
				helper.mode = finalResult.mode;
				helper.whole = finalResult.whole;
				// add some variables to the helper for the functionPosition callback (these
				// will also be added to the event fired by self.__instance._trigger but that's
				// ok, we're just being consistent)
				helper.origin = self.__instance._$origin[0];
				helper.tooltip = self.__instance._$tooltip[0];

				// leave only the actionable values in there for functionPosition
				delete finalResult.container;
				delete finalResult.fits;
				delete finalResult.mode;
				delete finalResult.outerSize;
				delete finalResult.whole;

				// keep only the distance on the relevant side, for clarity
				finalResult.distance =
					finalResult.distance.horizontal ||
					finalResult.distance.vertical;

				// beginners may not be comfortable with the concept of editing the object
				//  passed by reference, so we provide an edit function and pass a clone
				var finalResultClone = $.extend(true, {}, finalResult);

				// emit an event on the instance
				self.__instance._trigger({
					edit: function (result) {
						finalResult = result;
					},
					event: event,
					helper: helper,
					position: finalResultClone,
					type: "position",
				});

				if (self.__options.functionPosition) {
					var result = self.__options.functionPosition.call(
						self,
						self.__instance,
						helper,
						finalResultClone
					);

					if (result) finalResult = result;
				}

				// end the positioning tests session (the user might have had a
				// use for it during the position event, now it's over)
				ruler.destroy();

				// compute the position of the target relatively to the tooltip root
				// element so we can place the arrow and make the needed adjustments
				var arrowCoord, maxVal;

				if (finalResult.side == "top" || finalResult.side == "bottom") {
					arrowCoord = {
						prop: "left",
						val: finalResult.target - finalResult.coord.left,
					};
					maxVal =
						finalResult.size.width - this.__options.minIntersection;
				} else {
					arrowCoord = {
						prop: "top",
						val: finalResult.target - finalResult.coord.top,
					};
					maxVal =
						finalResult.size.height -
						this.__options.minIntersection;
				}

				// cannot lie beyond the boundaries of the tooltip, minus the
				// arrow margin
				if (arrowCoord.val < this.__options.minIntersection) {
					arrowCoord.val = this.__options.minIntersection;
				} else if (arrowCoord.val > maxVal) {
					arrowCoord.val = maxVal;
				}

				var originParentOffset;

				// let's convert the window-relative coordinates into coordinates relative to the
				// future positioned parent that the tooltip will be appended to
				if (helper.geo.origin.fixedLineage) {
					// same as windowOffset when the position is fixed
					originParentOffset = helper.geo.origin.windowOffset;
				} else {
					// this assumes that the parent of the tooltip is located at
					// (0, 0) in the document, typically like when the parent is
					// <body>.
					// If we ever allow other types of parent, .tooltipster-ruler
					// will have to be appended to the parent to inherit css style
					// values that affect the display of the text and such.
					originParentOffset = {
						left:
							helper.geo.origin.windowOffset.left +
							helper.geo.window.scroll.left,
						top:
							helper.geo.origin.windowOffset.top +
							helper.geo.window.scroll.top,
					};
				}

				finalResult.coord = {
					left:
						originParentOffset.left +
						(finalResult.coord.left -
							helper.geo.origin.windowOffset.left),
					top:
						originParentOffset.top +
						(finalResult.coord.top -
							helper.geo.origin.windowOffset.top),
				};

				// set position values on the original tooltip element

				self.__sideChange(self.__instance._$tooltip, finalResult.side);

				if (helper.geo.origin.fixedLineage) {
					self.__instance._$tooltip.css("position", "fixed");
				} else {
					// CSS default
					self.__instance._$tooltip.css("position", "");
				}

				self.__instance._$tooltip
					.css({
						left: finalResult.coord.left,
						top: finalResult.coord.top,
						// we need to set a size even if the tooltip is in its natural size
						// because when the tooltip is positioned beyond the width of the body
						// (which is by default the width of the window; it will happen when
						// you scroll the window horizontally to get to the origin), its text
						// content will otherwise break lines at each word to keep up with the
						// body overflow strategy.
						height: finalResult.size.height,
						width: finalResult.size.width,
					})
					.find(".tooltipster-arrow")
					.css({
						left: "",
						top: "",
					})
					.css(arrowCoord.prop, arrowCoord.val);

				// append the tooltip HTML element to its parent
				self.__instance._$tooltip.appendTo(
					self.__instance.option("parent")
				);

				self.__instance._trigger({
					type: "repositioned",
					event: event,
					position: finalResult,
				});
			},

			/**
			 * Make whatever modifications are needed when the side is changed. This has
			 * been made an independant method for easy inheritance in custom plugins based
			 * on this default plugin.
			 *
			 * @param {object} $obj
			 * @param {string} side
			 * @private
			 */
			__sideChange: function ($obj, side) {
				$obj.removeClass("tooltipster-bottom")
					.removeClass("tooltipster-left")
					.removeClass("tooltipster-right")
					.removeClass("tooltipster-top")
					.addClass("tooltipster-" + side);
			},

			/**
			 * Returns the target that the tooltip should aim at for a given side.
			 * The calculated value is a distance from the edge of the window
			 * (left edge for top/bottom sides, top edge for left/right side). The
			 * tooltip will be centered on that position and the arrow will be
			 * positioned there (as much as possible).
			 *
			 * @param {object} helper
			 * @return {integer}
			 * @private
			 */
			__targetFind: function (helper) {
				var target = {},
					rects = this.__instance._$origin[0].getClientRects();

				// these lines fix a Chrome bug (issue #491)
				if (rects.length > 1) {
					var opacity = this.__instance._$origin.css("opacity");
					if (opacity == 1) {
						this.__instance._$origin.css("opacity", 0.99);
						rects = this.__instance._$origin[0].getClientRects();
						this.__instance._$origin.css("opacity", 1);
					}
				}

				// by default, the target will be the middle of the origin
				if (rects.length < 2) {
					target.top = Math.floor(
						helper.geo.origin.windowOffset.left +
							helper.geo.origin.size.width / 2
					);
					target.bottom = target.top;

					target.left = Math.floor(
						helper.geo.origin.windowOffset.top +
							helper.geo.origin.size.height / 2
					);
					target.right = target.left;
				}
				// if multiple client rects exist, the element may be text split
				// up into multiple lines and the middle of the origin may not be
				// best option anymore. We need to choose the best target client rect
				else {
					// top: the first
					var targetRect = rects[0];
					target.top = Math.floor(
						targetRect.left +
							(targetRect.right - targetRect.left) / 2
					);

					// right: the middle line, rounded down in case there is an even
					// number of lines (looks more centered => check out the
					// demo with 4 split lines)
					if (rects.length > 2) {
						targetRect = rects[Math.ceil(rects.length / 2) - 1];
					} else {
						targetRect = rects[0];
					}
					target.right = Math.floor(
						targetRect.top +
							(targetRect.bottom - targetRect.top) / 2
					);

					// bottom: the last
					targetRect = rects[rects.length - 1];
					target.bottom = Math.floor(
						targetRect.left +
							(targetRect.right - targetRect.left) / 2
					);

					// left: the middle line, rounded up
					if (rects.length > 2) {
						targetRect =
							rects[Math.ceil((rects.length + 1) / 2) - 1];
					} else {
						targetRect = rects[rects.length - 1];
					}

					target.left = Math.floor(
						targetRect.top +
							(targetRect.bottom - targetRect.top) / 2
					);
				}

				return target;
			},
		},
	});

	/* a build task will add "return $;" here */
	return $;
});

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === "function" && define.amd) {
		// AMD
		define(["jquery"], factory);
	} else if (typeof exports === "object") {
		// CommonJS
		factory(require("jquery"));
	} else {
		// Browser globals
		factory(jQuery);
	}
})(function ($) {
	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, " "));
			return config.json ? JSON.parse(s) : s;
		} catch (e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = ($.cookie = function (key, value, options) {
		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === "number") {
				var days = options.expires,
					t = (options.expires = new Date());
				t.setTime(+t + days * 864e5);
			}

			return (document.cookie = [
				encode(key),
				"=",
				stringifyCookieValue(value),
				options.expires
					? "; expires=" + options.expires.toUTCString()
					: "", // use expires attribute, max-age is not supported by IE
				options.path ? "; path=" + options.path : "",
				options.domain ? "; domain=" + options.domain : "",
				options.secure ? "; secure" : "",
			].join(""));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split("; ") : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split("=");
			var name = decode(parts.shift());
			var cookie = parts.join("=");

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	});

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, "", $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};
});

//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
	typeof exports === "object" && typeof module !== "undefined"
		? (module.exports = factory())
		: typeof define === "function" && define.amd
		? define(factory)
		: (global.moment = factory());
})(this, function () {
	"use strict";

	var hookCallback;

	function hooks() {
		return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback(callback) {
		hookCallback = callback;
	}

	function isArray(input) {
		return (
			input instanceof Array ||
			Object.prototype.toString.call(input) === "[object Array]"
		);
	}

	function isObject(input) {
		// IE8 will treat undefined and null as object if it wasn't for
		// input != null
		return (
			input != null &&
			Object.prototype.toString.call(input) === "[object Object]"
		);
	}

	function hasOwnProp(a, b) {
		return Object.prototype.hasOwnProperty.call(a, b);
	}

	function isObjectEmpty(obj) {
		if (Object.getOwnPropertyNames) {
			return Object.getOwnPropertyNames(obj).length === 0;
		} else {
			var k;
			for (k in obj) {
				if (hasOwnProp(obj, k)) {
					return false;
				}
			}
			return true;
		}
	}

	function isUndefined(input) {
		return input === void 0;
	}

	function isNumber(input) {
		return (
			typeof input === "number" ||
			Object.prototype.toString.call(input) === "[object Number]"
		);
	}

	function isDate(input) {
		return (
			input instanceof Date ||
			Object.prototype.toString.call(input) === "[object Date]"
		);
	}

	function map(arr, fn) {
		var res = [],
			i;
		for (i = 0; i < arr.length; ++i) {
			res.push(fn(arr[i], i));
		}
		return res;
	}

	function extend(a, b) {
		for (var i in b) {
			if (hasOwnProp(b, i)) {
				a[i] = b[i];
			}
		}

		if (hasOwnProp(b, "toString")) {
			a.toString = b.toString;
		}

		if (hasOwnProp(b, "valueOf")) {
			a.valueOf = b.valueOf;
		}

		return a;
	}

	function createUTC(input, format, locale, strict) {
		return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
		// We need to deep clone this object.
		return {
			empty: false,
			unusedTokens: [],
			unusedInput: [],
			overflow: -2,
			charsLeftOver: 0,
			nullInput: false,
			invalidEra: null,
			invalidMonth: null,
			invalidFormat: false,
			userInvalidated: false,
			iso: false,
			parsedDateParts: [],
			era: null,
			meridiem: null,
			rfc2822: false,
			weekdayMismatch: false,
		};
	}

	function getParsingFlags(m) {
		if (m._pf == null) {
			m._pf = defaultParsingFlags();
		}
		return m._pf;
	}

	var some;
	if (Array.prototype.some) {
		some = Array.prototype.some;
	} else {
		some = function (fun) {
			var t = Object(this),
				len = t.length >>> 0,
				i;

			for (i = 0; i < len; i++) {
				if (i in t && fun.call(this, t[i], i, t)) {
					return true;
				}
			}

			return false;
		};
	}

	function isValid(m) {
		if (m._isValid == null) {
			var flags = getParsingFlags(m),
				parsedParts = some.call(flags.parsedDateParts, function (i) {
					return i != null;
				}),
				isNowValid =
					!isNaN(m._d.getTime()) &&
					flags.overflow < 0 &&
					!flags.empty &&
					!flags.invalidEra &&
					!flags.invalidMonth &&
					!flags.invalidWeekday &&
					!flags.weekdayMismatch &&
					!flags.nullInput &&
					!flags.invalidFormat &&
					!flags.userInvalidated &&
					(!flags.meridiem || (flags.meridiem && parsedParts));

			if (m._strict) {
				isNowValid =
					isNowValid &&
					flags.charsLeftOver === 0 &&
					flags.unusedTokens.length === 0 &&
					flags.bigHour === undefined;
			}

			if (Object.isFrozen == null || !Object.isFrozen(m)) {
				m._isValid = isNowValid;
			} else {
				return isNowValid;
			}
		}
		return m._isValid;
	}

	function createInvalid(flags) {
		var m = createUTC(NaN);
		if (flags != null) {
			extend(getParsingFlags(m), flags);
		} else {
			getParsingFlags(m).userInvalidated = true;
		}

		return m;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = (hooks.momentProperties = []),
		updateInProgress = false;

	function copyConfig(to, from) {
		var i, prop, val;

		if (!isUndefined(from._isAMomentObject)) {
			to._isAMomentObject = from._isAMomentObject;
		}
		if (!isUndefined(from._i)) {
			to._i = from._i;
		}
		if (!isUndefined(from._f)) {
			to._f = from._f;
		}
		if (!isUndefined(from._l)) {
			to._l = from._l;
		}
		if (!isUndefined(from._strict)) {
			to._strict = from._strict;
		}
		if (!isUndefined(from._tzm)) {
			to._tzm = from._tzm;
		}
		if (!isUndefined(from._isUTC)) {
			to._isUTC = from._isUTC;
		}
		if (!isUndefined(from._offset)) {
			to._offset = from._offset;
		}
		if (!isUndefined(from._pf)) {
			to._pf = getParsingFlags(from);
		}
		if (!isUndefined(from._locale)) {
			to._locale = from._locale;
		}

		if (momentProperties.length > 0) {
			for (i = 0; i < momentProperties.length; i++) {
				prop = momentProperties[i];
				val = from[prop];
				if (!isUndefined(val)) {
					to[prop] = val;
				}
			}
		}

		return to;
	}

	// Moment prototype object
	function Moment(config) {
		copyConfig(this, config);
		this._d = new Date(config._d != null ? config._d.getTime() : NaN);
		if (!this.isValid()) {
			this._d = new Date(NaN);
		}
		// Prevent infinite loop in case updateOffset creates new moment
		// objects.
		if (updateInProgress === false) {
			updateInProgress = true;
			hooks.updateOffset(this);
			updateInProgress = false;
		}
	}

	function isMoment(obj) {
		return (
			obj instanceof Moment ||
			(obj != null && obj._isAMomentObject != null)
		);
	}

	function warn(msg) {
		if (
			hooks.suppressDeprecationWarnings === false &&
			typeof console !== "undefined" &&
			console.warn
		) {
			console.warn("Deprecation warning: " + msg);
		}
	}

	function deprecate(msg, fn) {
		var firstTime = true;

		return extend(function () {
			if (hooks.deprecationHandler != null) {
				hooks.deprecationHandler(null, msg);
			}
			if (firstTime) {
				var args = [],
					arg,
					i,
					key;
				for (i = 0; i < arguments.length; i++) {
					arg = "";
					if (typeof arguments[i] === "object") {
						arg += "\n[" + i + "] ";
						for (key in arguments[0]) {
							if (hasOwnProp(arguments[0], key)) {
								arg += key + ": " + arguments[0][key] + ", ";
							}
						}
						arg = arg.slice(0, -2); // Remove trailing comma and space
					} else {
						arg = arguments[i];
					}
					args.push(arg);
				}
				warn(
					msg +
						"\nArguments: " +
						Array.prototype.slice.call(args).join("") +
						"\n" +
						new Error().stack
				);
				firstTime = false;
			}
			return fn.apply(this, arguments);
		}, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
		if (hooks.deprecationHandler != null) {
			hooks.deprecationHandler(name, msg);
		}
		if (!deprecations[name]) {
			warn(msg);
			deprecations[name] = true;
		}
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
		return (
			(typeof Function !== "undefined" && input instanceof Function) ||
			Object.prototype.toString.call(input) === "[object Function]"
		);
	}

	function set(config) {
		var prop, i;
		for (i in config) {
			if (hasOwnProp(config, i)) {
				prop = config[i];
				if (isFunction(prop)) {
					this[i] = prop;
				} else {
					this["_" + i] = prop;
				}
			}
		}
		this._config = config;
		// Lenient ordinal parsing accepts just a number in addition to
		// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
		// TODO: Remove "ordinalParse" fallback in next major release.
		this._dayOfMonthOrdinalParseLenient = new RegExp(
			(this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
				"|" +
				/\d{1,2}/.source
		);
	}

	function mergeConfigs(parentConfig, childConfig) {
		var res = extend({}, parentConfig),
			prop;
		for (prop in childConfig) {
			if (hasOwnProp(childConfig, prop)) {
				if (
					isObject(parentConfig[prop]) &&
					isObject(childConfig[prop])
				) {
					res[prop] = {};
					extend(res[prop], parentConfig[prop]);
					extend(res[prop], childConfig[prop]);
				} else if (childConfig[prop] != null) {
					res[prop] = childConfig[prop];
				} else {
					delete res[prop];
				}
			}
		}
		for (prop in parentConfig) {
			if (
				hasOwnProp(parentConfig, prop) &&
				!hasOwnProp(childConfig, prop) &&
				isObject(parentConfig[prop])
			) {
				// make sure changes to properties don't modify parent config
				res[prop] = extend({}, res[prop]);
			}
		}
		return res;
	}

	function Locale(config) {
		if (config != null) {
			this.set(config);
		}
	}

	var keys;

	if (Object.keys) {
		keys = Object.keys;
	} else {
		keys = function (obj) {
			var i,
				res = [];
			for (i in obj) {
				if (hasOwnProp(obj, i)) {
					res.push(i);
				}
			}
			return res;
		};
	}

	var defaultCalendar = {
		sameDay: "[Today at] LT",
		nextDay: "[Tomorrow at] LT",
		nextWeek: "dddd [at] LT",
		lastDay: "[Yesterday at] LT",
		lastWeek: "[Last] dddd [at] LT",
		sameElse: "L",
	};

	function calendar(key, mom, now) {
		var output = this._calendar[key] || this._calendar["sameElse"];
		return isFunction(output) ? output.call(mom, now) : output;
	}

	function zeroFill(number, targetLength, forceSign) {
		var absNumber = "" + Math.abs(number),
			zerosToFill = targetLength - absNumber.length,
			sign = number >= 0;
		return (
			(sign ? (forceSign ? "+" : "") : "-") +
			Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
			absNumber
		);
	}

	var formattingTokens =
			/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
		localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
		formatFunctions = {},
		formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken(token, padded, ordinal, callback) {
		var func = callback;
		if (typeof callback === "string") {
			func = function () {
				return this[callback]();
			};
		}
		if (token) {
			formatTokenFunctions[token] = func;
		}
		if (padded) {
			formatTokenFunctions[padded[0]] = function () {
				return zeroFill(
					func.apply(this, arguments),
					padded[1],
					padded[2]
				);
			};
		}
		if (ordinal) {
			formatTokenFunctions[ordinal] = function () {
				return this.localeData().ordinal(
					func.apply(this, arguments),
					token
				);
			};
		}
	}

	function removeFormattingTokens(input) {
		if (input.match(/\[[\s\S]/)) {
			return input.replace(/^\[|\]$/g, "");
		}
		return input.replace(/\\/g, "");
	}

	function makeFormatFunction(format) {
		var array = format.match(formattingTokens),
			i,
			length;

		for (i = 0, length = array.length; i < length; i++) {
			if (formatTokenFunctions[array[i]]) {
				array[i] = formatTokenFunctions[array[i]];
			} else {
				array[i] = removeFormattingTokens(array[i]);
			}
		}

		return function (mom) {
			var output = "",
				i;
			for (i = 0; i < length; i++) {
				output += isFunction(array[i])
					? array[i].call(mom, format)
					: array[i];
			}
			return output;
		};
	}

	// format date using native date object
	function formatMoment(m, format) {
		if (!m.isValid()) {
			return m.localeData().invalidDate();
		}

		format = expandFormat(format, m.localeData());
		formatFunctions[format] =
			formatFunctions[format] || makeFormatFunction(format);

		return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
		var i = 5;

		function replaceLongDateFormatTokens(input) {
			return locale.longDateFormat(input) || input;
		}

		localFormattingTokens.lastIndex = 0;
		while (i >= 0 && localFormattingTokens.test(format)) {
			format = format.replace(
				localFormattingTokens,
				replaceLongDateFormatTokens
			);
			localFormattingTokens.lastIndex = 0;
			i -= 1;
		}

		return format;
	}

	var defaultLongDateFormat = {
		LTS: "h:mm:ss A",
		LT: "h:mm A",
		L: "MM/DD/YYYY",
		LL: "MMMM D, YYYY",
		LLL: "MMMM D, YYYY h:mm A",
		LLLL: "dddd, MMMM D, YYYY h:mm A",
	};

	function longDateFormat(key) {
		var format = this._longDateFormat[key],
			formatUpper = this._longDateFormat[key.toUpperCase()];

		if (format || !formatUpper) {
			return format;
		}

		this._longDateFormat[key] = formatUpper
			.match(formattingTokens)
			.map(function (tok) {
				if (
					tok === "MMMM" ||
					tok === "MM" ||
					tok === "DD" ||
					tok === "dddd"
				) {
					return tok.slice(1);
				}
				return tok;
			})
			.join("");

		return this._longDateFormat[key];
	}

	var defaultInvalidDate = "Invalid date";

	function invalidDate() {
		return this._invalidDate;
	}

	var defaultOrdinal = "%d",
		defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	function ordinal(number) {
		return this._ordinal.replace("%d", number);
	}

	var defaultRelativeTime = {
		future: "in %s",
		past: "%s ago",
		s: "a few seconds",
		ss: "%d seconds",
		m: "a minute",
		mm: "%d minutes",
		h: "an hour",
		hh: "%d hours",
		d: "a day",
		dd: "%d days",
		w: "a week",
		ww: "%d weeks",
		M: "a month",
		MM: "%d months",
		y: "a year",
		yy: "%d years",
	};

	function relativeTime(number, withoutSuffix, string, isFuture) {
		var output = this._relativeTime[string];
		return isFunction(output)
			? output(number, withoutSuffix, string, isFuture)
			: output.replace(/%d/i, number);
	}

	function pastFuture(diff, output) {
		var format = this._relativeTime[diff > 0 ? "future" : "past"];
		return isFunction(format)
			? format(output)
			: format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias(unit, shorthand) {
		var lowerCase = unit.toLowerCase();
		aliases[lowerCase] =
			aliases[lowerCase + "s"] =
			aliases[shorthand] =
				unit;
	}

	function normalizeUnits(units) {
		return typeof units === "string"
			? aliases[units] || aliases[units.toLowerCase()]
			: undefined;
	}

	function normalizeObjectUnits(inputObject) {
		var normalizedInput = {},
			normalizedProp,
			prop;

		for (prop in inputObject) {
			if (hasOwnProp(inputObject, prop)) {
				normalizedProp = normalizeUnits(prop);
				if (normalizedProp) {
					normalizedInput[normalizedProp] = inputObject[prop];
				}
			}
		}

		return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
		priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
		var units = [],
			u;
		for (u in unitsObj) {
			if (hasOwnProp(unitsObj, u)) {
				units.push({ unit: u, priority: priorities[u] });
			}
		}
		units.sort(function (a, b) {
			return a.priority - b.priority;
		});
		return units;
	}

	function isLeapYear(year) {
		return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	function absFloor(number) {
		if (number < 0) {
			// -0 -> 0
			return Math.ceil(number) || 0;
		} else {
			return Math.floor(number);
		}
	}

	function toInt(argumentForCoercion) {
		var coercedNumber = +argumentForCoercion,
			value = 0;

		if (coercedNumber !== 0 && isFinite(coercedNumber)) {
			value = absFloor(coercedNumber);
		}

		return value;
	}

	function makeGetSet(unit, keepTime) {
		return function (value) {
			if (value != null) {
				set$1(this, unit, value);
				hooks.updateOffset(this, keepTime);
				return this;
			} else {
				return get(this, unit);
			}
		};
	}

	function get(mom, unit) {
		return mom.isValid()
			? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]()
			: NaN;
	}

	function set$1(mom, unit, value) {
		if (mom.isValid() && !isNaN(value)) {
			if (
				unit === "FullYear" &&
				isLeapYear(mom.year()) &&
				mom.month() === 1 &&
				mom.date() === 29
			) {
				value = toInt(value);
				mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
					value,
					mom.month(),
					daysInMonth(value, mom.month())
				);
			} else {
				mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
			}
		}
	}

	// MOMENTS

	function stringGet(units) {
		units = normalizeUnits(units);
		if (isFunction(this[units])) {
			return this[units]();
		}
		return this;
	}

	function stringSet(units, value) {
		if (typeof units === "object") {
			units = normalizeObjectUnits(units);
			var prioritized = getPrioritizedUnits(units),
				i;
			for (i = 0; i < prioritized.length; i++) {
				this[prioritized[i].unit](units[prioritized[i].unit]);
			}
		} else {
			units = normalizeUnits(units);
			if (isFunction(this[units])) {
				return this[units](value);
			}
		}
		return this;
	}

	var match1 = /\d/, //       0 - 9
		match2 = /\d\d/, //      00 - 99
		match3 = /\d{3}/, //     000 - 999
		match4 = /\d{4}/, //    0000 - 9999
		match6 = /[+-]?\d{6}/, // -999999 - 999999
		match1to2 = /\d\d?/, //       0 - 99
		match3to4 = /\d\d\d\d?/, //     999 - 9999
		match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
		match1to3 = /\d{1,3}/, //       0 - 999
		match1to4 = /\d{1,4}/, //       0 - 9999
		match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
		matchUnsigned = /\d+/, //       0 - inf
		matchSigned = /[+-]?\d+/, //    -inf - inf
		matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
		matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
		matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
		// any word (or two) characters or numbers including two/three word month in arabic.
		// includes scottish gaelic two word and hyphenated months
		matchWord =
			/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
		regexes;

	regexes = {};

	function addRegexToken(token, regex, strictRegex) {
		regexes[token] = isFunction(regex)
			? regex
			: function (isStrict, localeData) {
					return isStrict && strictRegex ? strictRegex : regex;
			  };
	}

	function getParseRegexForToken(token, config) {
		if (!hasOwnProp(regexes, token)) {
			return new RegExp(unescapeFormat(token));
		}

		return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
		return regexEscape(
			s
				.replace("\\", "")
				.replace(
					/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
					function (matched, p1, p2, p3, p4) {
						return p1 || p2 || p3 || p4;
					}
				)
		);
	}

	function regexEscape(s) {
		return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
	}

	var tokens = {};

	function addParseToken(token, callback) {
		var i,
			func = callback;
		if (typeof token === "string") {
			token = [token];
		}
		if (isNumber(callback)) {
			func = function (input, array) {
				array[callback] = toInt(input);
			};
		}
		for (i = 0; i < token.length; i++) {
			tokens[token[i]] = func;
		}
	}

	function addWeekParseToken(token, callback) {
		addParseToken(token, function (input, array, config, token) {
			config._w = config._w || {};
			callback(input, config._w, config, token);
		});
	}

	function addTimeToArrayFromToken(token, input, config) {
		if (input != null && hasOwnProp(tokens, token)) {
			tokens[token](input, config._a, config, token);
		}
	}

	var YEAR = 0,
		MONTH = 1,
		DATE = 2,
		HOUR = 3,
		MINUTE = 4,
		SECOND = 5,
		MILLISECOND = 6,
		WEEK = 7,
		WEEKDAY = 8;

	function mod(n, x) {
		return ((n % x) + x) % x;
	}

	var indexOf;

	if (Array.prototype.indexOf) {
		indexOf = Array.prototype.indexOf;
	} else {
		indexOf = function (o) {
			// I know
			var i;
			for (i = 0; i < this.length; ++i) {
				if (this[i] === o) {
					return i;
				}
			}
			return -1;
		};
	}

	function daysInMonth(year, month) {
		if (isNaN(year) || isNaN(month)) {
			return NaN;
		}
		var modMonth = mod(month, 12);
		year += (month - modMonth) / 12;
		return modMonth === 1
			? isLeapYear(year)
				? 29
				: 28
			: 31 - ((modMonth % 7) % 2);
	}

	// FORMATTING

	addFormatToken("M", ["MM", 2], "Mo", function () {
		return this.month() + 1;
	});

	addFormatToken("MMM", 0, 0, function (format) {
		return this.localeData().monthsShort(this, format);
	});

	addFormatToken("MMMM", 0, 0, function (format) {
		return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias("month", "M");

	// PRIORITY

	addUnitPriority("month", 8);

	// PARSING

	addRegexToken("M", match1to2);
	addRegexToken("MM", match1to2, match2);
	addRegexToken("MMM", function (isStrict, locale) {
		return locale.monthsShortRegex(isStrict);
	});
	addRegexToken("MMMM", function (isStrict, locale) {
		return locale.monthsRegex(isStrict);
	});

	addParseToken(["M", "MM"], function (input, array) {
		array[MONTH] = toInt(input) - 1;
	});

	addParseToken(["MMM", "MMMM"], function (input, array, config, token) {
		var month = config._locale.monthsParse(input, token, config._strict);
		// if we didn't find a month name, mark the date as invalid.
		if (month != null) {
			array[MONTH] = month;
		} else {
			getParsingFlags(config).invalidMonth = input;
		}
	});

	// LOCALES

	var defaultLocaleMonths =
			"January_February_March_April_May_June_July_August_September_October_November_December".split(
				"_"
			),
		defaultLocaleMonthsShort =
			"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
		defaultMonthsShortRegex = matchWord,
		defaultMonthsRegex = matchWord;

	function localeMonths(m, format) {
		if (!m) {
			return isArray(this._months)
				? this._months
				: this._months["standalone"];
		}
		return isArray(this._months)
			? this._months[m.month()]
			: this._months[
					(this._months.isFormat || MONTHS_IN_FORMAT).test(format)
						? "format"
						: "standalone"
			  ][m.month()];
	}

	function localeMonthsShort(m, format) {
		if (!m) {
			return isArray(this._monthsShort)
				? this._monthsShort
				: this._monthsShort["standalone"];
		}
		return isArray(this._monthsShort)
			? this._monthsShort[m.month()]
			: this._monthsShort[
					MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"
			  ][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
		var i,
			ii,
			mom,
			llc = monthName.toLocaleLowerCase();
		if (!this._monthsParse) {
			// this is not used
			this._monthsParse = [];
			this._longMonthsParse = [];
			this._shortMonthsParse = [];
			for (i = 0; i < 12; ++i) {
				mom = createUTC([2000, i]);
				this._shortMonthsParse[i] = this.monthsShort(
					mom,
					""
				).toLocaleLowerCase();
				this._longMonthsParse[i] = this.months(
					mom,
					""
				).toLocaleLowerCase();
			}
		}

		if (strict) {
			if (format === "MMM") {
				ii = indexOf.call(this._shortMonthsParse, llc);
				return ii !== -1 ? ii : null;
			} else {
				ii = indexOf.call(this._longMonthsParse, llc);
				return ii !== -1 ? ii : null;
			}
		} else {
			if (format === "MMM") {
				ii = indexOf.call(this._shortMonthsParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._longMonthsParse, llc);
				return ii !== -1 ? ii : null;
			} else {
				ii = indexOf.call(this._longMonthsParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._shortMonthsParse, llc);
				return ii !== -1 ? ii : null;
			}
		}
	}

	function localeMonthsParse(monthName, format, strict) {
		var i, mom, regex;

		if (this._monthsParseExact) {
			return handleStrictParse.call(this, monthName, format, strict);
		}

		if (!this._monthsParse) {
			this._monthsParse = [];
			this._longMonthsParse = [];
			this._shortMonthsParse = [];
		}

		// TODO: add sorting
		// Sorting makes sure if one month (or abbr) is a prefix of another
		// see sorting in computeMonthsParse
		for (i = 0; i < 12; i++) {
			// make the regex if we don't have it already
			mom = createUTC([2000, i]);
			if (strict && !this._longMonthsParse[i]) {
				this._longMonthsParse[i] = new RegExp(
					"^" + this.months(mom, "").replace(".", "") + "$",
					"i"
				);
				this._shortMonthsParse[i] = new RegExp(
					"^" + this.monthsShort(mom, "").replace(".", "") + "$",
					"i"
				);
			}
			if (!strict && !this._monthsParse[i]) {
				regex =
					"^" +
					this.months(mom, "") +
					"|^" +
					this.monthsShort(mom, "");
				this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
			}
			// test the regex
			if (
				strict &&
				format === "MMMM" &&
				this._longMonthsParse[i].test(monthName)
			) {
				return i;
			} else if (
				strict &&
				format === "MMM" &&
				this._shortMonthsParse[i].test(monthName)
			) {
				return i;
			} else if (!strict && this._monthsParse[i].test(monthName)) {
				return i;
			}
		}
	}

	// MOMENTS

	function setMonth(mom, value) {
		var dayOfMonth;

		if (!mom.isValid()) {
			// No op
			return mom;
		}

		if (typeof value === "string") {
			if (/^\d+$/.test(value)) {
				value = toInt(value);
			} else {
				value = mom.localeData().monthsParse(value);
				// TODO: Another silent failure?
				if (!isNumber(value)) {
					return mom;
				}
			}
		}

		dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
		mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
		return mom;
	}

	function getSetMonth(value) {
		if (value != null) {
			setMonth(this, value);
			hooks.updateOffset(this, true);
			return this;
		} else {
			return get(this, "Month");
		}
	}

	function getDaysInMonth() {
		return daysInMonth(this.year(), this.month());
	}

	function monthsShortRegex(isStrict) {
		if (this._monthsParseExact) {
			if (!hasOwnProp(this, "_monthsRegex")) {
				computeMonthsParse.call(this);
			}
			if (isStrict) {
				return this._monthsShortStrictRegex;
			} else {
				return this._monthsShortRegex;
			}
		} else {
			if (!hasOwnProp(this, "_monthsShortRegex")) {
				this._monthsShortRegex = defaultMonthsShortRegex;
			}
			return this._monthsShortStrictRegex && isStrict
				? this._monthsShortStrictRegex
				: this._monthsShortRegex;
		}
	}

	function monthsRegex(isStrict) {
		if (this._monthsParseExact) {
			if (!hasOwnProp(this, "_monthsRegex")) {
				computeMonthsParse.call(this);
			}
			if (isStrict) {
				return this._monthsStrictRegex;
			} else {
				return this._monthsRegex;
			}
		} else {
			if (!hasOwnProp(this, "_monthsRegex")) {
				this._monthsRegex = defaultMonthsRegex;
			}
			return this._monthsStrictRegex && isStrict
				? this._monthsStrictRegex
				: this._monthsRegex;
		}
	}

	function computeMonthsParse() {
		function cmpLenRev(a, b) {
			return b.length - a.length;
		}

		var shortPieces = [],
			longPieces = [],
			mixedPieces = [],
			i,
			mom;
		for (i = 0; i < 12; i++) {
			// make the regex if we don't have it already
			mom = createUTC([2000, i]);
			shortPieces.push(this.monthsShort(mom, ""));
			longPieces.push(this.months(mom, ""));
			mixedPieces.push(this.months(mom, ""));
			mixedPieces.push(this.monthsShort(mom, ""));
		}
		// Sorting makes sure if one month (or abbr) is a prefix of another it
		// will match the longer piece.
		shortPieces.sort(cmpLenRev);
		longPieces.sort(cmpLenRev);
		mixedPieces.sort(cmpLenRev);
		for (i = 0; i < 12; i++) {
			shortPieces[i] = regexEscape(shortPieces[i]);
			longPieces[i] = regexEscape(longPieces[i]);
		}
		for (i = 0; i < 24; i++) {
			mixedPieces[i] = regexEscape(mixedPieces[i]);
		}

		this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
		this._monthsShortRegex = this._monthsRegex;
		this._monthsStrictRegex = new RegExp(
			"^(" + longPieces.join("|") + ")",
			"i"
		);
		this._monthsShortStrictRegex = new RegExp(
			"^(" + shortPieces.join("|") + ")",
			"i"
		);
	}

	// FORMATTING

	addFormatToken("Y", 0, 0, function () {
		var y = this.year();
		return y <= 9999 ? zeroFill(y, 4) : "+" + y;
	});

	addFormatToken(0, ["YY", 2], 0, function () {
		return this.year() % 100;
	});

	addFormatToken(0, ["YYYY", 4], 0, "year");
	addFormatToken(0, ["YYYYY", 5], 0, "year");
	addFormatToken(0, ["YYYYYY", 6, true], 0, "year");

	// ALIASES

	addUnitAlias("year", "y");

	// PRIORITIES

	addUnitPriority("year", 1);

	// PARSING

	addRegexToken("Y", matchSigned);
	addRegexToken("YY", match1to2, match2);
	addRegexToken("YYYY", match1to4, match4);
	addRegexToken("YYYYY", match1to6, match6);
	addRegexToken("YYYYYY", match1to6, match6);

	addParseToken(["YYYYY", "YYYYYY"], YEAR);
	addParseToken("YYYY", function (input, array) {
		array[YEAR] =
			input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken("YY", function (input, array) {
		array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken("Y", function (input, array) {
		array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
		return isLeapYear(year) ? 366 : 365;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
		return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet("FullYear", true);

	function getIsLeapYear() {
		return isLeapYear(this.year());
	}

	function createDate(y, m, d, h, M, s, ms) {
		// can't just apply() to create a date:
		// https://stackoverflow.com/q/181348
		var date;
		// the date constructor remaps years 0-99 to 1900-1999
		if (y < 100 && y >= 0) {
			// preserve leap years using a full 400 year cycle, then reset
			date = new Date(y + 400, m, d, h, M, s, ms);
			if (isFinite(date.getFullYear())) {
				date.setFullYear(y);
			}
		} else {
			date = new Date(y, m, d, h, M, s, ms);
		}

		return date;
	}

	function createUTCDate(y) {
		var date, args;
		// the Date.UTC function remaps years 0-99 to 1900-1999
		if (y < 100 && y >= 0) {
			args = Array.prototype.slice.call(arguments);
			// preserve leap years using a full 400 year cycle, then reset
			args[0] = y + 400;
			date = new Date(Date.UTC.apply(null, args));
			if (isFinite(date.getUTCFullYear())) {
				date.setUTCFullYear(y);
			}
		} else {
			date = new Date(Date.UTC.apply(null, arguments));
		}

		return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
		var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
			fwd = 7 + dow - doy,
			// first-week day local weekday -- which local weekday is fwd
			fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

		return -fwdlw + fwd - 1;
	}

	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
		var localWeekday = (7 + weekday - dow) % 7,
			weekOffset = firstWeekOffset(year, dow, doy),
			dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
			resYear,
			resDayOfYear;

		if (dayOfYear <= 0) {
			resYear = year - 1;
			resDayOfYear = daysInYear(resYear) + dayOfYear;
		} else if (dayOfYear > daysInYear(year)) {
			resYear = year + 1;
			resDayOfYear = dayOfYear - daysInYear(year);
		} else {
			resYear = year;
			resDayOfYear = dayOfYear;
		}

		return {
			year: resYear,
			dayOfYear: resDayOfYear,
		};
	}

	function weekOfYear(mom, dow, doy) {
		var weekOffset = firstWeekOffset(mom.year(), dow, doy),
			week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
			resWeek,
			resYear;

		if (week < 1) {
			resYear = mom.year() - 1;
			resWeek = week + weeksInYear(resYear, dow, doy);
		} else if (week > weeksInYear(mom.year(), dow, doy)) {
			resWeek = week - weeksInYear(mom.year(), dow, doy);
			resYear = mom.year() + 1;
		} else {
			resYear = mom.year();
			resWeek = week;
		}

		return {
			week: resWeek,
			year: resYear,
		};
	}

	function weeksInYear(year, dow, doy) {
		var weekOffset = firstWeekOffset(year, dow, doy),
			weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
		return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken("w", ["ww", 2], "wo", "week");
	addFormatToken("W", ["WW", 2], "Wo", "isoWeek");

	// ALIASES

	addUnitAlias("week", "w");
	addUnitAlias("isoWeek", "W");

	// PRIORITIES

	addUnitPriority("week", 5);
	addUnitPriority("isoWeek", 5);

	// PARSING

	addRegexToken("w", match1to2);
	addRegexToken("ww", match1to2, match2);
	addRegexToken("W", match1to2);
	addRegexToken("WW", match1to2, match2);

	addWeekParseToken(
		["w", "ww", "W", "WW"],
		function (input, week, config, token) {
			week[token.substr(0, 1)] = toInt(input);
		}
	);

	// HELPERS

	// LOCALES

	function localeWeek(mom) {
		return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
		dow: 0, // Sunday is the first day of the week.
		doy: 6, // The week that contains Jan 6th is the first week of the year.
	};

	function localeFirstDayOfWeek() {
		return this._week.dow;
	}

	function localeFirstDayOfYear() {
		return this._week.doy;
	}

	// MOMENTS

	function getSetWeek(input) {
		var week = this.localeData().week(this);
		return input == null ? week : this.add((input - week) * 7, "d");
	}

	function getSetISOWeek(input) {
		var week = weekOfYear(this, 1, 4).week;
		return input == null ? week : this.add((input - week) * 7, "d");
	}

	// FORMATTING

	addFormatToken("d", 0, "do", "day");

	addFormatToken("dd", 0, 0, function (format) {
		return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken("ddd", 0, 0, function (format) {
		return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken("dddd", 0, 0, function (format) {
		return this.localeData().weekdays(this, format);
	});

	addFormatToken("e", 0, 0, "weekday");
	addFormatToken("E", 0, 0, "isoWeekday");

	// ALIASES

	addUnitAlias("day", "d");
	addUnitAlias("weekday", "e");
	addUnitAlias("isoWeekday", "E");

	// PRIORITY
	addUnitPriority("day", 11);
	addUnitPriority("weekday", 11);
	addUnitPriority("isoWeekday", 11);

	// PARSING

	addRegexToken("d", match1to2);
	addRegexToken("e", match1to2);
	addRegexToken("E", match1to2);
	addRegexToken("dd", function (isStrict, locale) {
		return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken("ddd", function (isStrict, locale) {
		return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken("dddd", function (isStrict, locale) {
		return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(
		["dd", "ddd", "dddd"],
		function (input, week, config, token) {
			var weekday = config._locale.weekdaysParse(
				input,
				token,
				config._strict
			);
			// if we didn't get a weekday name, mark the date as invalid
			if (weekday != null) {
				week.d = weekday;
			} else {
				getParsingFlags(config).invalidWeekday = input;
			}
		}
	);

	addWeekParseToken(["d", "e", "E"], function (input, week, config, token) {
		week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
		if (typeof input !== "string") {
			return input;
		}

		if (!isNaN(input)) {
			return parseInt(input, 10);
		}

		input = locale.weekdaysParse(input);
		if (typeof input === "number") {
			return input;
		}

		return null;
	}

	function parseIsoWeekday(input, locale) {
		if (typeof input === "string") {
			return locale.weekdaysParse(input) % 7 || 7;
		}
		return isNaN(input) ? null : input;
	}

	// LOCALES
	function shiftWeekdays(ws, n) {
		return ws.slice(n, 7).concat(ws.slice(0, n));
	}

	var defaultLocaleWeekdays =
			"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
				"_"
			),
		defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		defaultWeekdaysRegex = matchWord,
		defaultWeekdaysShortRegex = matchWord,
		defaultWeekdaysMinRegex = matchWord;

	function localeWeekdays(m, format) {
		var weekdays = isArray(this._weekdays)
			? this._weekdays
			: this._weekdays[
					m && m !== true && this._weekdays.isFormat.test(format)
						? "format"
						: "standalone"
			  ];
		return m === true
			? shiftWeekdays(weekdays, this._week.dow)
			: m
			? weekdays[m.day()]
			: weekdays;
	}

	function localeWeekdaysShort(m) {
		return m === true
			? shiftWeekdays(this._weekdaysShort, this._week.dow)
			: m
			? this._weekdaysShort[m.day()]
			: this._weekdaysShort;
	}

	function localeWeekdaysMin(m) {
		return m === true
			? shiftWeekdays(this._weekdaysMin, this._week.dow)
			: m
			? this._weekdaysMin[m.day()]
			: this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
		var i,
			ii,
			mom,
			llc = weekdayName.toLocaleLowerCase();
		if (!this._weekdaysParse) {
			this._weekdaysParse = [];
			this._shortWeekdaysParse = [];
			this._minWeekdaysParse = [];

			for (i = 0; i < 7; ++i) {
				mom = createUTC([2000, 1]).day(i);
				this._minWeekdaysParse[i] = this.weekdaysMin(
					mom,
					""
				).toLocaleLowerCase();
				this._shortWeekdaysParse[i] = this.weekdaysShort(
					mom,
					""
				).toLocaleLowerCase();
				this._weekdaysParse[i] = this.weekdays(
					mom,
					""
				).toLocaleLowerCase();
			}
		}

		if (strict) {
			if (format === "dddd") {
				ii = indexOf.call(this._weekdaysParse, llc);
				return ii !== -1 ? ii : null;
			} else if (format === "ddd") {
				ii = indexOf.call(this._shortWeekdaysParse, llc);
				return ii !== -1 ? ii : null;
			} else {
				ii = indexOf.call(this._minWeekdaysParse, llc);
				return ii !== -1 ? ii : null;
			}
		} else {
			if (format === "dddd") {
				ii = indexOf.call(this._weekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._shortWeekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._minWeekdaysParse, llc);
				return ii !== -1 ? ii : null;
			} else if (format === "ddd") {
				ii = indexOf.call(this._shortWeekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._weekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._minWeekdaysParse, llc);
				return ii !== -1 ? ii : null;
			} else {
				ii = indexOf.call(this._minWeekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._weekdaysParse, llc);
				if (ii !== -1) {
					return ii;
				}
				ii = indexOf.call(this._shortWeekdaysParse, llc);
				return ii !== -1 ? ii : null;
			}
		}
	}

	function localeWeekdaysParse(weekdayName, format, strict) {
		var i, mom, regex;

		if (this._weekdaysParseExact) {
			return handleStrictParse$1.call(this, weekdayName, format, strict);
		}

		if (!this._weekdaysParse) {
			this._weekdaysParse = [];
			this._minWeekdaysParse = [];
			this._shortWeekdaysParse = [];
			this._fullWeekdaysParse = [];
		}

		for (i = 0; i < 7; i++) {
			// make the regex if we don't have it already

			mom = createUTC([2000, 1]).day(i);
			if (strict && !this._fullWeekdaysParse[i]) {
				this._fullWeekdaysParse[i] = new RegExp(
					"^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
					"i"
				);
				this._shortWeekdaysParse[i] = new RegExp(
					"^" +
						this.weekdaysShort(mom, "").replace(".", "\\.?") +
						"$",
					"i"
				);
				this._minWeekdaysParse[i] = new RegExp(
					"^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
					"i"
				);
			}
			if (!this._weekdaysParse[i]) {
				regex =
					"^" +
					this.weekdays(mom, "") +
					"|^" +
					this.weekdaysShort(mom, "") +
					"|^" +
					this.weekdaysMin(mom, "");
				this._weekdaysParse[i] = new RegExp(
					regex.replace(".", ""),
					"i"
				);
			}
			// test the regex
			if (
				strict &&
				format === "dddd" &&
				this._fullWeekdaysParse[i].test(weekdayName)
			) {
				return i;
			} else if (
				strict &&
				format === "ddd" &&
				this._shortWeekdaysParse[i].test(weekdayName)
			) {
				return i;
			} else if (
				strict &&
				format === "dd" &&
				this._minWeekdaysParse[i].test(weekdayName)
			) {
				return i;
			} else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
				return i;
			}
		}
	}

	// MOMENTS

	function getSetDayOfWeek(input) {
		if (!this.isValid()) {
			return input != null ? this : NaN;
		}
		var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
		if (input != null) {
			input = parseWeekday(input, this.localeData());
			return this.add(input - day, "d");
		} else {
			return day;
		}
	}

	function getSetLocaleDayOfWeek(input) {
		if (!this.isValid()) {
			return input != null ? this : NaN;
		}
		var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
		return input == null ? weekday : this.add(input - weekday, "d");
	}

	function getSetISODayOfWeek(input) {
		if (!this.isValid()) {
			return input != null ? this : NaN;
		}

		// behaves the same as moment#day except
		// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
		// as a setter, sunday should belong to the previous week.

		if (input != null) {
			var weekday = parseIsoWeekday(input, this.localeData());
			return this.day(this.day() % 7 ? weekday : weekday - 7);
		} else {
			return this.day() || 7;
		}
	}

	function weekdaysRegex(isStrict) {
		if (this._weekdaysParseExact) {
			if (!hasOwnProp(this, "_weekdaysRegex")) {
				computeWeekdaysParse.call(this);
			}
			if (isStrict) {
				return this._weekdaysStrictRegex;
			} else {
				return this._weekdaysRegex;
			}
		} else {
			if (!hasOwnProp(this, "_weekdaysRegex")) {
				this._weekdaysRegex = defaultWeekdaysRegex;
			}
			return this._weekdaysStrictRegex && isStrict
				? this._weekdaysStrictRegex
				: this._weekdaysRegex;
		}
	}

	function weekdaysShortRegex(isStrict) {
		if (this._weekdaysParseExact) {
			if (!hasOwnProp(this, "_weekdaysRegex")) {
				computeWeekdaysParse.call(this);
			}
			if (isStrict) {
				return this._weekdaysShortStrictRegex;
			} else {
				return this._weekdaysShortRegex;
			}
		} else {
			if (!hasOwnProp(this, "_weekdaysShortRegex")) {
				this._weekdaysShortRegex = defaultWeekdaysShortRegex;
			}
			return this._weekdaysShortStrictRegex && isStrict
				? this._weekdaysShortStrictRegex
				: this._weekdaysShortRegex;
		}
	}

	function weekdaysMinRegex(isStrict) {
		if (this._weekdaysParseExact) {
			if (!hasOwnProp(this, "_weekdaysRegex")) {
				computeWeekdaysParse.call(this);
			}
			if (isStrict) {
				return this._weekdaysMinStrictRegex;
			} else {
				return this._weekdaysMinRegex;
			}
		} else {
			if (!hasOwnProp(this, "_weekdaysMinRegex")) {
				this._weekdaysMinRegex = defaultWeekdaysMinRegex;
			}
			return this._weekdaysMinStrictRegex && isStrict
				? this._weekdaysMinStrictRegex
				: this._weekdaysMinRegex;
		}
	}

	function computeWeekdaysParse() {
		function cmpLenRev(a, b) {
			return b.length - a.length;
		}

		var minPieces = [],
			shortPieces = [],
			longPieces = [],
			mixedPieces = [],
			i,
			mom,
			minp,
			shortp,
			longp;
		for (i = 0; i < 7; i++) {
			// make the regex if we don't have it already
			mom = createUTC([2000, 1]).day(i);
			minp = regexEscape(this.weekdaysMin(mom, ""));
			shortp = regexEscape(this.weekdaysShort(mom, ""));
			longp = regexEscape(this.weekdays(mom, ""));
			minPieces.push(minp);
			shortPieces.push(shortp);
			longPieces.push(longp);
			mixedPieces.push(minp);
			mixedPieces.push(shortp);
			mixedPieces.push(longp);
		}
		// Sorting makes sure if one weekday (or abbr) is a prefix of another it
		// will match the longer piece.
		minPieces.sort(cmpLenRev);
		shortPieces.sort(cmpLenRev);
		longPieces.sort(cmpLenRev);
		mixedPieces.sort(cmpLenRev);

		this._weekdaysRegex = new RegExp(
			"^(" + mixedPieces.join("|") + ")",
			"i"
		);
		this._weekdaysShortRegex = this._weekdaysRegex;
		this._weekdaysMinRegex = this._weekdaysRegex;

		this._weekdaysStrictRegex = new RegExp(
			"^(" + longPieces.join("|") + ")",
			"i"
		);
		this._weekdaysShortStrictRegex = new RegExp(
			"^(" + shortPieces.join("|") + ")",
			"i"
		);
		this._weekdaysMinStrictRegex = new RegExp(
			"^(" + minPieces.join("|") + ")",
			"i"
		);
	}

	// FORMATTING

	function hFormat() {
		return this.hours() % 12 || 12;
	}

	function kFormat() {
		return this.hours() || 24;
	}

	addFormatToken("H", ["HH", 2], 0, "hour");
	addFormatToken("h", ["hh", 2], 0, hFormat);
	addFormatToken("k", ["kk", 2], 0, kFormat);

	addFormatToken("hmm", 0, 0, function () {
		return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken("hmmss", 0, 0, function () {
		return (
			"" +
			hFormat.apply(this) +
			zeroFill(this.minutes(), 2) +
			zeroFill(this.seconds(), 2)
		);
	});

	addFormatToken("Hmm", 0, 0, function () {
		return "" + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken("Hmmss", 0, 0, function () {
		return (
			"" +
			this.hours() +
			zeroFill(this.minutes(), 2) +
			zeroFill(this.seconds(), 2)
		);
	});

	function meridiem(token, lowercase) {
		addFormatToken(token, 0, 0, function () {
			return this.localeData().meridiem(
				this.hours(),
				this.minutes(),
				lowercase
			);
		});
	}

	meridiem("a", true);
	meridiem("A", false);

	// ALIASES

	addUnitAlias("hour", "h");

	// PRIORITY
	addUnitPriority("hour", 13);

	// PARSING

	function matchMeridiem(isStrict, locale) {
		return locale._meridiemParse;
	}

	addRegexToken("a", matchMeridiem);
	addRegexToken("A", matchMeridiem);
	addRegexToken("H", match1to2);
	addRegexToken("h", match1to2);
	addRegexToken("k", match1to2);
	addRegexToken("HH", match1to2, match2);
	addRegexToken("hh", match1to2, match2);
	addRegexToken("kk", match1to2, match2);

	addRegexToken("hmm", match3to4);
	addRegexToken("hmmss", match5to6);
	addRegexToken("Hmm", match3to4);
	addRegexToken("Hmmss", match5to6);

	addParseToken(["H", "HH"], HOUR);
	addParseToken(["k", "kk"], function (input, array, config) {
		var kInput = toInt(input);
		array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(["a", "A"], function (input, array, config) {
		config._isPm = config._locale.isPM(input);
		config._meridiem = input;
	});
	addParseToken(["h", "hh"], function (input, array, config) {
		array[HOUR] = toInt(input);
		getParsingFlags(config).bigHour = true;
	});
	addParseToken("hmm", function (input, array, config) {
		var pos = input.length - 2;
		array[HOUR] = toInt(input.substr(0, pos));
		array[MINUTE] = toInt(input.substr(pos));
		getParsingFlags(config).bigHour = true;
	});
	addParseToken("hmmss", function (input, array, config) {
		var pos1 = input.length - 4,
			pos2 = input.length - 2;
		array[HOUR] = toInt(input.substr(0, pos1));
		array[MINUTE] = toInt(input.substr(pos1, 2));
		array[SECOND] = toInt(input.substr(pos2));
		getParsingFlags(config).bigHour = true;
	});
	addParseToken("Hmm", function (input, array, config) {
		var pos = input.length - 2;
		array[HOUR] = toInt(input.substr(0, pos));
		array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken("Hmmss", function (input, array, config) {
		var pos1 = input.length - 4,
			pos2 = input.length - 2;
		array[HOUR] = toInt(input.substr(0, pos1));
		array[MINUTE] = toInt(input.substr(pos1, 2));
		array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM(input) {
		// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
		// Using charAt should be more compatible.
		return (input + "").toLowerCase().charAt(0) === "p";
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
		// Setting the hour should keep the time, because the user explicitly
		// specified which hour they want. So trying to maintain the same hour (in
		// a new timezone) makes sense. Adding/subtracting hours does not follow
		// this rule.
		getSetHour = makeGetSet("Hours", true);

	function localeMeridiem(hours, minutes, isLower) {
		if (hours > 11) {
			return isLower ? "pm" : "PM";
		} else {
			return isLower ? "am" : "AM";
		}
	}

	var baseConfig = {
		calendar: defaultCalendar,
		longDateFormat: defaultLongDateFormat,
		invalidDate: defaultInvalidDate,
		ordinal: defaultOrdinal,
		dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
		relativeTime: defaultRelativeTime,

		months: defaultLocaleMonths,
		monthsShort: defaultLocaleMonthsShort,

		week: defaultLocaleWeek,

		weekdays: defaultLocaleWeekdays,
		weekdaysMin: defaultLocaleWeekdaysMin,
		weekdaysShort: defaultLocaleWeekdaysShort,

		meridiemParse: defaultLocaleMeridiemParse,
	};

	// internal storage for locale config files
	var locales = {},
		localeFamilies = {},
		globalLocale;

	function commonPrefix(arr1, arr2) {
		var i,
			minl = Math.min(arr1.length, arr2.length);
		for (i = 0; i < minl; i += 1) {
			if (arr1[i] !== arr2[i]) {
				return i;
			}
		}
		return minl;
	}

	function normalizeLocale(key) {
		return key ? key.toLowerCase().replace("_", "-") : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
		var i = 0,
			j,
			next,
			locale,
			split;

		while (i < names.length) {
			split = normalizeLocale(names[i]).split("-");
			j = split.length;
			next = normalizeLocale(names[i + 1]);
			next = next ? next.split("-") : null;
			while (j > 0) {
				locale = loadLocale(split.slice(0, j).join("-"));
				if (locale) {
					return locale;
				}
				if (
					next &&
					next.length >= j &&
					commonPrefix(split, next) >= j - 1
				) {
					//the next array item is better than a shallower substring of this one
					break;
				}
				j--;
			}
			i++;
		}
		return globalLocale;
	}

	function loadLocale(name) {
		var oldLocale = null,
			aliasedRequire;
		// TODO: Find a better way to register and load all the locales in Node
		if (
			locales[name] === undefined &&
			typeof module !== "undefined" &&
			module &&
			module.exports
		) {
			try {
				oldLocale = globalLocale._abbr;
				aliasedRequire = require;
				aliasedRequire("./locale/" + name);
				getSetGlobalLocale(oldLocale);
			} catch (e) {
				// mark as not found to avoid repeating expensive file require call causing high CPU
				// when trying to find en-US, en_US, en-us for every format call
				locales[name] = null; // null means not found
			}
		}
		return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale(key, values) {
		var data;
		if (key) {
			if (isUndefined(values)) {
				data = getLocale(key);
			} else {
				data = defineLocale(key, values);
			}

			if (data) {
				// moment.duration._locale = moment._locale = data;
				globalLocale = data;
			} else {
				if (typeof console !== "undefined" && console.warn) {
					//warn user if arguments are passed but the locale could not be set
					console.warn(
						"Locale " +
							key +
							" not found. Did you forget to load it?"
					);
				}
			}
		}

		return globalLocale._abbr;
	}

	function defineLocale(name, config) {
		if (config !== null) {
			var locale,
				parentConfig = baseConfig;
			config.abbr = name;
			if (locales[name] != null) {
				deprecateSimple(
					"defineLocaleOverride",
					"use moment.updateLocale(localeName, config) to change " +
						"an existing locale. moment.defineLocale(localeName, " +
						"config) should only be used for creating a new locale " +
						"See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
				);
				parentConfig = locales[name]._config;
			} else if (config.parentLocale != null) {
				if (locales[config.parentLocale] != null) {
					parentConfig = locales[config.parentLocale]._config;
				} else {
					locale = loadLocale(config.parentLocale);
					if (locale != null) {
						parentConfig = locale._config;
					} else {
						if (!localeFamilies[config.parentLocale]) {
							localeFamilies[config.parentLocale] = [];
						}
						localeFamilies[config.parentLocale].push({
							name: name,
							config: config,
						});
						return null;
					}
				}
			}
			locales[name] = new Locale(mergeConfigs(parentConfig, config));

			if (localeFamilies[name]) {
				localeFamilies[name].forEach(function (x) {
					defineLocale(x.name, x.config);
				});
			}

			// backwards compat for now: also set the locale
			// make sure we set the locale AFTER all child locales have been
			// created, so we won't end up with the child locale set.
			getSetGlobalLocale(name);

			return locales[name];
		} else {
			// useful for testing
			delete locales[name];
			return null;
		}
	}

	function updateLocale(name, config) {
		if (config != null) {
			var locale,
				tmpLocale,
				parentConfig = baseConfig;

			if (locales[name] != null && locales[name].parentLocale != null) {
				// Update existing child locale in-place to avoid memory-leaks
				locales[name].set(mergeConfigs(locales[name]._config, config));
			} else {
				// MERGE
				tmpLocale = loadLocale(name);
				if (tmpLocale != null) {
					parentConfig = tmpLocale._config;
				}
				config = mergeConfigs(parentConfig, config);
				if (tmpLocale == null) {
					// updateLocale is called for creating a new locale
					// Set abbr so it will have a name (getters return
					// undefined otherwise).
					config.abbr = name;
				}
				locale = new Locale(config);
				locale.parentLocale = locales[name];
				locales[name] = locale;
			}

			// backwards compat for now: also set the locale
			getSetGlobalLocale(name);
		} else {
			// pass null for config to unupdate, useful for tests
			if (locales[name] != null) {
				if (locales[name].parentLocale != null) {
					locales[name] = locales[name].parentLocale;
					if (name === getSetGlobalLocale()) {
						getSetGlobalLocale(name);
					}
				} else if (locales[name] != null) {
					delete locales[name];
				}
			}
		}
		return locales[name];
	}

	// returns locale data
	function getLocale(key) {
		var locale;

		if (key && key._locale && key._locale._abbr) {
			key = key._locale._abbr;
		}

		if (!key) {
			return globalLocale;
		}

		if (!isArray(key)) {
			//short-circuit everything else
			locale = loadLocale(key);
			if (locale) {
				return locale;
			}
			key = [key];
		}

		return chooseLocale(key);
	}

	function listLocales() {
		return keys(locales);
	}

	function checkOverflow(m) {
		var overflow,
			a = m._a;

		if (a && getParsingFlags(m).overflow === -2) {
			overflow =
				a[MONTH] < 0 || a[MONTH] > 11
					? MONTH
					: a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
					? DATE
					: a[HOUR] < 0 ||
					  a[HOUR] > 24 ||
					  (a[HOUR] === 24 &&
							(a[MINUTE] !== 0 ||
								a[SECOND] !== 0 ||
								a[MILLISECOND] !== 0))
					? HOUR
					: a[MINUTE] < 0 || a[MINUTE] > 59
					? MINUTE
					: a[SECOND] < 0 || a[SECOND] > 59
					? SECOND
					: a[MILLISECOND] < 0 || a[MILLISECOND] > 999
					? MILLISECOND
					: -1;

			if (
				getParsingFlags(m)._overflowDayOfYear &&
				(overflow < YEAR || overflow > DATE)
			) {
				overflow = DATE;
			}
			if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
				overflow = WEEK;
			}
			if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
				overflow = WEEKDAY;
			}

			getParsingFlags(m).overflow = overflow;
		}

		return m;
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex =
			/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		basicIsoRegex =
			/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
		isoDates = [
			["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
			["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
			["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
			["GGGG-[W]WW", /\d{4}-W\d\d/, false],
			["YYYY-DDD", /\d{4}-\d{3}/],
			["YYYY-MM", /\d{4}-\d\d/, false],
			["YYYYYYMMDD", /[+-]\d{10}/],
			["YYYYMMDD", /\d{8}/],
			["GGGG[W]WWE", /\d{4}W\d{3}/],
			["GGGG[W]WW", /\d{4}W\d{2}/, false],
			["YYYYDDD", /\d{7}/],
			["YYYYMM", /\d{6}/, false],
			["YYYY", /\d{4}/, false],
		],
		// iso time formats and regexes
		isoTimes = [
			["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
			["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
			["HH:mm:ss", /\d\d:\d\d:\d\d/],
			["HH:mm", /\d\d:\d\d/],
			["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
			["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
			["HHmmss", /\d\d\d\d\d\d/],
			["HHmm", /\d\d\d\d/],
			["HH", /\d\d/],
		],
		aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
		// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
		rfc2822 =
			/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
		obsOffsets = {
			UT: 0,
			GMT: 0,
			EDT: -4 * 60,
			EST: -5 * 60,
			CDT: -5 * 60,
			CST: -6 * 60,
			MDT: -6 * 60,
			MST: -7 * 60,
			PDT: -7 * 60,
			PST: -8 * 60,
		};

	// date from iso format
	function configFromISO(config) {
		var i,
			l,
			string = config._i,
			match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
			allowTime,
			dateFormat,
			timeFormat,
			tzFormat;

		if (match) {
			getParsingFlags(config).iso = true;

			for (i = 0, l = isoDates.length; i < l; i++) {
				if (isoDates[i][1].exec(match[1])) {
					dateFormat = isoDates[i][0];
					allowTime = isoDates[i][2] !== false;
					break;
				}
			}
			if (dateFormat == null) {
				config._isValid = false;
				return;
			}
			if (match[3]) {
				for (i = 0, l = isoTimes.length; i < l; i++) {
					if (isoTimes[i][1].exec(match[3])) {
						// match[2] should be 'T' or space
						timeFormat = (match[2] || " ") + isoTimes[i][0];
						break;
					}
				}
				if (timeFormat == null) {
					config._isValid = false;
					return;
				}
			}
			if (!allowTime && timeFormat != null) {
				config._isValid = false;
				return;
			}
			if (match[4]) {
				if (tzRegex.exec(match[4])) {
					tzFormat = "Z";
				} else {
					config._isValid = false;
					return;
				}
			}
			config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
			configFromStringAndFormat(config);
		} else {
			config._isValid = false;
		}
	}

	function extractFromRFC2822Strings(
		yearStr,
		monthStr,
		dayStr,
		hourStr,
		minuteStr,
		secondStr
	) {
		var result = [
			untruncateYear(yearStr),
			defaultLocaleMonthsShort.indexOf(monthStr),
			parseInt(dayStr, 10),
			parseInt(hourStr, 10),
			parseInt(minuteStr, 10),
		];

		if (secondStr) {
			result.push(parseInt(secondStr, 10));
		}

		return result;
	}

	function untruncateYear(yearStr) {
		var year = parseInt(yearStr, 10);
		if (year <= 49) {
			return 2000 + year;
		} else if (year <= 999) {
			return 1900 + year;
		}
		return year;
	}

	function preprocessRFC2822(s) {
		// Remove comments and folding whitespace and replace multiple-spaces with a single space
		return s
			.replace(/\([^)]*\)|[\n\t]/g, " ")
			.replace(/(\s\s+)/g, " ")
			.replace(/^\s\s*/, "")
			.replace(/\s\s*$/, "");
	}

	function checkWeekday(weekdayStr, parsedInput, config) {
		if (weekdayStr) {
			// TODO: Replace the vanilla JS Date object with an independent day-of-week check.
			var weekdayProvided =
					defaultLocaleWeekdaysShort.indexOf(weekdayStr),
				weekdayActual = new Date(
					parsedInput[0],
					parsedInput[1],
					parsedInput[2]
				).getDay();
			if (weekdayProvided !== weekdayActual) {
				getParsingFlags(config).weekdayMismatch = true;
				config._isValid = false;
				return false;
			}
		}
		return true;
	}

	function calculateOffset(obsOffset, militaryOffset, numOffset) {
		if (obsOffset) {
			return obsOffsets[obsOffset];
		} else if (militaryOffset) {
			// the only allowed military tz is Z
			return 0;
		} else {
			var hm = parseInt(numOffset, 10),
				m = hm % 100,
				h = (hm - m) / 100;
			return h * 60 + m;
		}
	}

	// date and time from ref 2822 format
	function configFromRFC2822(config) {
		var match = rfc2822.exec(preprocessRFC2822(config._i)),
			parsedArray;
		if (match) {
			parsedArray = extractFromRFC2822Strings(
				match[4],
				match[3],
				match[2],
				match[5],
				match[6],
				match[7]
			);
			if (!checkWeekday(match[1], parsedArray, config)) {
				return;
			}

			config._a = parsedArray;
			config._tzm = calculateOffset(match[8], match[9], match[10]);

			config._d = createUTCDate.apply(null, config._a);
			config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

			getParsingFlags(config).rfc2822 = true;
		} else {
			config._isValid = false;
		}
	}

	// date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	function configFromString(config) {
		var matched = aspNetJsonRegex.exec(config._i);
		if (matched !== null) {
			config._d = new Date(+matched[1]);
			return;
		}

		configFromISO(config);
		if (config._isValid === false) {
			delete config._isValid;
		} else {
			return;
		}

		configFromRFC2822(config);
		if (config._isValid === false) {
			delete config._isValid;
		} else {
			return;
		}

		if (config._strict) {
			config._isValid = false;
		} else {
			// Final attempt, use Input Fallback
			hooks.createFromInputFallback(config);
		}
	}

	hooks.createFromInputFallback = deprecate(
		"value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), " +
			"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are " +
			"discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
		function (config) {
			config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
		}
	);

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
		if (a != null) {
			return a;
		}
		if (b != null) {
			return b;
		}
		return c;
	}

	function currentDateArray(config) {
		// hooks is actually the exported moment object
		var nowValue = new Date(hooks.now());
		if (config._useUTC) {
			return [
				nowValue.getUTCFullYear(),
				nowValue.getUTCMonth(),
				nowValue.getUTCDate(),
			];
		}
		return [
			nowValue.getFullYear(),
			nowValue.getMonth(),
			nowValue.getDate(),
		];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray(config) {
		var i,
			date,
			input = [],
			currentDate,
			expectedWeekday,
			yearToUse;

		if (config._d) {
			return;
		}

		currentDate = currentDateArray(config);

		//compute day of the year from weeks and weekdays
		if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
			dayOfYearFromWeekInfo(config);
		}

		//if the day of the year is set, figure out what it is
		if (config._dayOfYear != null) {
			yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

			if (
				config._dayOfYear > daysInYear(yearToUse) ||
				config._dayOfYear === 0
			) {
				getParsingFlags(config)._overflowDayOfYear = true;
			}

			date = createUTCDate(yearToUse, 0, config._dayOfYear);
			config._a[MONTH] = date.getUTCMonth();
			config._a[DATE] = date.getUTCDate();
		}

		// Default to current date.
		// * if no year, month, day of month are given, default to today
		// * if day of month is given, default month and year
		// * if month is given, default only year
		// * if year is given, don't default anything
		for (i = 0; i < 3 && config._a[i] == null; ++i) {
			config._a[i] = input[i] = currentDate[i];
		}

		// Zero out whatever was not defaulted, including time
		for (; i < 7; i++) {
			config._a[i] = input[i] =
				config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
		}

		// Check for 24:00:00.000
		if (
			config._a[HOUR] === 24 &&
			config._a[MINUTE] === 0 &&
			config._a[SECOND] === 0 &&
			config._a[MILLISECOND] === 0
		) {
			config._nextDay = true;
			config._a[HOUR] = 0;
		}

		config._d = (config._useUTC ? createUTCDate : createDate).apply(
			null,
			input
		);
		expectedWeekday = config._useUTC
			? config._d.getUTCDay()
			: config._d.getDay();

		// Apply timezone offset from input. The actual utcOffset can be changed
		// with parseZone.
		if (config._tzm != null) {
			config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
		}

		if (config._nextDay) {
			config._a[HOUR] = 24;
		}

		// check for mismatching day of week
		if (
			config._w &&
			typeof config._w.d !== "undefined" &&
			config._w.d !== expectedWeekday
		) {
			getParsingFlags(config).weekdayMismatch = true;
		}
	}

	function dayOfYearFromWeekInfo(config) {
		var w,
			weekYear,
			week,
			weekday,
			dow,
			doy,
			temp,
			weekdayOverflow,
			curWeek;

		w = config._w;
		if (w.GG != null || w.W != null || w.E != null) {
			dow = 1;
			doy = 4;

			// TODO: We need to take the current isoWeekYear, but that depends on
			// how we interpret now (local, utc, fixed offset). So create
			// a now version of current config (take local/utc/offset flags, and
			// create now).
			weekYear = defaults(
				w.GG,
				config._a[YEAR],
				weekOfYear(createLocal(), 1, 4).year
			);
			week = defaults(w.W, 1);
			weekday = defaults(w.E, 1);
			if (weekday < 1 || weekday > 7) {
				weekdayOverflow = true;
			}
		} else {
			dow = config._locale._week.dow;
			doy = config._locale._week.doy;

			curWeek = weekOfYear(createLocal(), dow, doy);

			weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

			// Default to current week.
			week = defaults(w.w, curWeek.week);

			if (w.d != null) {
				// weekday -- low day numbers are considered next week
				weekday = w.d;
				if (weekday < 0 || weekday > 6) {
					weekdayOverflow = true;
				}
			} else if (w.e != null) {
				// local weekday -- counting starts from beginning of week
				weekday = w.e + dow;
				if (w.e < 0 || w.e > 6) {
					weekdayOverflow = true;
				}
			} else {
				// default to beginning of week
				weekday = dow;
			}
		}
		if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
			getParsingFlags(config)._overflowWeeks = true;
		} else if (weekdayOverflow != null) {
			getParsingFlags(config)._overflowWeekday = true;
		} else {
			temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
			config._a[YEAR] = temp.year;
			config._dayOfYear = temp.dayOfYear;
		}
	}

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
		// TODO: Move this to another part of the creation flow to prevent circular deps
		if (config._f === hooks.ISO_8601) {
			configFromISO(config);
			return;
		}
		if (config._f === hooks.RFC_2822) {
			configFromRFC2822(config);
			return;
		}
		config._a = [];
		getParsingFlags(config).empty = true;

		// This array is used to make a Date, either with `new Date` or `Date.UTC`
		var string = "" + config._i,
			i,
			parsedInput,
			tokens,
			token,
			skipped,
			stringLength = string.length,
			totalParsedInputLength = 0,
			era;

		tokens =
			expandFormat(config._f, config._locale).match(formattingTokens) ||
			[];

		for (i = 0; i < tokens.length; i++) {
			token = tokens[i];
			parsedInput = (string.match(getParseRegexForToken(token, config)) ||
				[])[0];
			if (parsedInput) {
				skipped = string.substr(0, string.indexOf(parsedInput));
				if (skipped.length > 0) {
					getParsingFlags(config).unusedInput.push(skipped);
				}
				string = string.slice(
					string.indexOf(parsedInput) + parsedInput.length
				);
				totalParsedInputLength += parsedInput.length;
			}
			// don't parse if it's not a known token
			if (formatTokenFunctions[token]) {
				if (parsedInput) {
					getParsingFlags(config).empty = false;
				} else {
					getParsingFlags(config).unusedTokens.push(token);
				}
				addTimeToArrayFromToken(token, parsedInput, config);
			} else if (config._strict && !parsedInput) {
				getParsingFlags(config).unusedTokens.push(token);
			}
		}

		// add remaining unparsed input length to the string
		getParsingFlags(config).charsLeftOver =
			stringLength - totalParsedInputLength;
		if (string.length > 0) {
			getParsingFlags(config).unusedInput.push(string);
		}

		// clear _12h flag if hour is <= 12
		if (
			config._a[HOUR] <= 12 &&
			getParsingFlags(config).bigHour === true &&
			config._a[HOUR] > 0
		) {
			getParsingFlags(config).bigHour = undefined;
		}

		getParsingFlags(config).parsedDateParts = config._a.slice(0);
		getParsingFlags(config).meridiem = config._meridiem;
		// handle meridiem
		config._a[HOUR] = meridiemFixWrap(
			config._locale,
			config._a[HOUR],
			config._meridiem
		);

		// handle era
		era = getParsingFlags(config).era;
		if (era !== null) {
			config._a[YEAR] = config._locale.erasConvertYear(
				era,
				config._a[YEAR]
			);
		}

		configFromArray(config);
		checkOverflow(config);
	}

	function meridiemFixWrap(locale, hour, meridiem) {
		var isPm;

		if (meridiem == null) {
			// nothing to do
			return hour;
		}
		if (locale.meridiemHour != null) {
			return locale.meridiemHour(hour, meridiem);
		} else if (locale.isPM != null) {
			// Fallback
			isPm = locale.isPM(meridiem);
			if (isPm && hour < 12) {
				hour += 12;
			}
			if (!isPm && hour === 12) {
				hour = 0;
			}
			return hour;
		} else {
			// this is not supposed to happen
			return hour;
		}
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
		var tempConfig,
			bestMoment,
			scoreToBeat,
			i,
			currentScore,
			validFormatFound,
			bestFormatIsValid = false;

		if (config._f.length === 0) {
			getParsingFlags(config).invalidFormat = true;
			config._d = new Date(NaN);
			return;
		}

		for (i = 0; i < config._f.length; i++) {
			currentScore = 0;
			validFormatFound = false;
			tempConfig = copyConfig({}, config);
			if (config._useUTC != null) {
				tempConfig._useUTC = config._useUTC;
			}
			tempConfig._f = config._f[i];
			configFromStringAndFormat(tempConfig);

			if (isValid(tempConfig)) {
				validFormatFound = true;
			}

			// if there is any input that was not parsed add a penalty for that format
			currentScore += getParsingFlags(tempConfig).charsLeftOver;

			//or tokens
			currentScore +=
				getParsingFlags(tempConfig).unusedTokens.length * 10;

			getParsingFlags(tempConfig).score = currentScore;

			if (!bestFormatIsValid) {
				if (
					scoreToBeat == null ||
					currentScore < scoreToBeat ||
					validFormatFound
				) {
					scoreToBeat = currentScore;
					bestMoment = tempConfig;
					if (validFormatFound) {
						bestFormatIsValid = true;
					}
				}
			} else {
				if (currentScore < scoreToBeat) {
					scoreToBeat = currentScore;
					bestMoment = tempConfig;
				}
			}
		}

		extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
		if (config._d) {
			return;
		}

		var i = normalizeObjectUnits(config._i),
			dayOrDate = i.day === undefined ? i.date : i.day;
		config._a = map(
			[
				i.year,
				i.month,
				dayOrDate,
				i.hour,
				i.minute,
				i.second,
				i.millisecond,
			],
			function (obj) {
				return obj && parseInt(obj, 10);
			}
		);

		configFromArray(config);
	}

	function createFromConfig(config) {
		var res = new Moment(checkOverflow(prepareConfig(config)));
		if (res._nextDay) {
			// Adding is smart enough around DST
			res.add(1, "d");
			res._nextDay = undefined;
		}

		return res;
	}

	function prepareConfig(config) {
		var input = config._i,
			format = config._f;

		config._locale = config._locale || getLocale(config._l);

		if (input === null || (format === undefined && input === "")) {
			return createInvalid({ nullInput: true });
		}

		if (typeof input === "string") {
			config._i = input = config._locale.preparse(input);
		}

		if (isMoment(input)) {
			return new Moment(checkOverflow(input));
		} else if (isDate(input)) {
			config._d = input;
		} else if (isArray(format)) {
			configFromStringAndArray(config);
		} else if (format) {
			configFromStringAndFormat(config);
		} else {
			configFromInput(config);
		}

		if (!isValid(config)) {
			config._d = null;
		}

		return config;
	}

	function configFromInput(config) {
		var input = config._i;
		if (isUndefined(input)) {
			config._d = new Date(hooks.now());
		} else if (isDate(input)) {
			config._d = new Date(input.valueOf());
		} else if (typeof input === "string") {
			configFromString(config);
		} else if (isArray(input)) {
			config._a = map(input.slice(0), function (obj) {
				return parseInt(obj, 10);
			});
			configFromArray(config);
		} else if (isObject(input)) {
			configFromObject(config);
		} else if (isNumber(input)) {
			// from milliseconds
			config._d = new Date(input);
		} else {
			hooks.createFromInputFallback(config);
		}
	}

	function createLocalOrUTC(input, format, locale, strict, isUTC) {
		var c = {};

		if (format === true || format === false) {
			strict = format;
			format = undefined;
		}

		if (locale === true || locale === false) {
			strict = locale;
			locale = undefined;
		}

		if (
			(isObject(input) && isObjectEmpty(input)) ||
			(isArray(input) && input.length === 0)
		) {
			input = undefined;
		}
		// object construction must be done this way.
		// https://github.com/moment/moment/issues/1423
		c._isAMomentObject = true;
		c._useUTC = c._isUTC = isUTC;
		c._l = locale;
		c._i = input;
		c._f = format;
		c._strict = strict;

		return createFromConfig(c);
	}

	function createLocal(input, format, locale, strict) {
		return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
			"moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other < this ? this : other;
				} else {
					return createInvalid();
				}
			}
		),
		prototypeMax = deprecate(
			"moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other > this ? this : other;
				} else {
					return createInvalid();
				}
			}
		);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
		var res, i;
		if (moments.length === 1 && isArray(moments[0])) {
			moments = moments[0];
		}
		if (!moments.length) {
			return createLocal();
		}
		res = moments[0];
		for (i = 1; i < moments.length; ++i) {
			if (!moments[i].isValid() || moments[i][fn](res)) {
				res = moments[i];
			}
		}
		return res;
	}

	// TODO: Use [].sort instead?
	function min() {
		var args = [].slice.call(arguments, 0);

		return pickBy("isBefore", args);
	}

	function max() {
		var args = [].slice.call(arguments, 0);

		return pickBy("isAfter", args);
	}

	var now = function () {
		return Date.now ? Date.now() : +new Date();
	};

	var ordering = [
		"year",
		"quarter",
		"month",
		"week",
		"day",
		"hour",
		"minute",
		"second",
		"millisecond",
	];

	function isDurationValid(m) {
		var key,
			unitHasDecimal = false,
			i;
		for (key in m) {
			if (
				hasOwnProp(m, key) &&
				!(
					indexOf.call(ordering, key) !== -1 &&
					(m[key] == null || !isNaN(m[key]))
				)
			) {
				return false;
			}
		}

		for (i = 0; i < ordering.length; ++i) {
			if (m[ordering[i]]) {
				if (unitHasDecimal) {
					return false; // only allow non-integers for smallest unit
				}
				if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
					unitHasDecimal = true;
				}
			}
		}

		return true;
	}

	function isValid$1() {
		return this._isValid;
	}

	function createInvalid$1() {
		return createDuration(NaN);
	}

	function Duration(duration) {
		var normalizedInput = normalizeObjectUnits(duration),
			years = normalizedInput.year || 0,
			quarters = normalizedInput.quarter || 0,
			months = normalizedInput.month || 0,
			weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
			days = normalizedInput.day || 0,
			hours = normalizedInput.hour || 0,
			minutes = normalizedInput.minute || 0,
			seconds = normalizedInput.second || 0,
			milliseconds = normalizedInput.millisecond || 0;

		this._isValid = isDurationValid(normalizedInput);

		// representation for dateAddRemove
		this._milliseconds =
			+milliseconds +
			seconds * 1e3 + // 1000
			minutes * 6e4 + // 1000 * 60
			hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
		// Because of dateAddRemove treats 24 hours as different from a
		// day when working around DST, we need to store them separately
		this._days = +days + weeks * 7;
		// It is impossible to translate months into days without knowing
		// which months you are are talking about, so we have to store
		// it separately.
		this._months = +months + quarters * 3 + years * 12;

		this._data = {};

		this._locale = getLocale();

		this._bubble();
	}

	function isDuration(obj) {
		return obj instanceof Duration;
	}

	function absRound(number) {
		if (number < 0) {
			return Math.round(-1 * number) * -1;
		} else {
			return Math.round(number);
		}
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
		var len = Math.min(array1.length, array2.length),
			lengthDiff = Math.abs(array1.length - array2.length),
			diffs = 0,
			i;
		for (i = 0; i < len; i++) {
			if (
				(dontConvert && array1[i] !== array2[i]) ||
				(!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
			) {
				diffs++;
			}
		}
		return diffs + lengthDiff;
	}

	// FORMATTING

	function offset(token, separator) {
		addFormatToken(token, 0, 0, function () {
			var offset = this.utcOffset(),
				sign = "+";
			if (offset < 0) {
				offset = -offset;
				sign = "-";
			}
			return (
				sign +
				zeroFill(~~(offset / 60), 2) +
				separator +
				zeroFill(~~offset % 60, 2)
			);
		});
	}

	offset("Z", ":");
	offset("ZZ", "");

	// PARSING

	addRegexToken("Z", matchShortOffset);
	addRegexToken("ZZ", matchShortOffset);
	addParseToken(["Z", "ZZ"], function (input, array, config) {
		config._useUTC = true;
		config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
		var matches = (string || "").match(matcher),
			chunk,
			parts,
			minutes;

		if (matches === null) {
			return null;
		}

		chunk = matches[matches.length - 1] || [];
		parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
		minutes = +(parts[1] * 60) + toInt(parts[2]);

		return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
		var res, diff;
		if (model._isUTC) {
			res = model.clone();
			diff =
				(isMoment(input) || isDate(input)
					? input.valueOf()
					: createLocal(input).valueOf()) - res.valueOf();
			// Use low-level api, because this fn is low-level api.
			res._d.setTime(res._d.valueOf() + diff);
			hooks.updateOffset(res, false);
			return res;
		} else {
			return createLocal(input).local();
		}
	}

	function getDateOffset(m) {
		// On Firefox.24 Date#getTimezoneOffset returns a floating point.
		// https://github.com/moment/moment/pull/1871
		return -Math.round(m._d.getTimezoneOffset());
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset(input, keepLocalTime, keepMinutes) {
		var offset = this._offset || 0,
			localAdjust;
		if (!this.isValid()) {
			return input != null ? this : NaN;
		}
		if (input != null) {
			if (typeof input === "string") {
				input = offsetFromString(matchShortOffset, input);
				if (input === null) {
					return this;
				}
			} else if (Math.abs(input) < 16 && !keepMinutes) {
				input = input * 60;
			}
			if (!this._isUTC && keepLocalTime) {
				localAdjust = getDateOffset(this);
			}
			this._offset = input;
			this._isUTC = true;
			if (localAdjust != null) {
				this.add(localAdjust, "m");
			}
			if (offset !== input) {
				if (!keepLocalTime || this._changeInProgress) {
					addSubtract(
						this,
						createDuration(input - offset, "m"),
						1,
						false
					);
				} else if (!this._changeInProgress) {
					this._changeInProgress = true;
					hooks.updateOffset(this, true);
					this._changeInProgress = null;
				}
			}
			return this;
		} else {
			return this._isUTC ? offset : getDateOffset(this);
		}
	}

	function getSetZone(input, keepLocalTime) {
		if (input != null) {
			if (typeof input !== "string") {
				input = -input;
			}

			this.utcOffset(input, keepLocalTime);

			return this;
		} else {
			return -this.utcOffset();
		}
	}

	function setOffsetToUTC(keepLocalTime) {
		return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal(keepLocalTime) {
		if (this._isUTC) {
			this.utcOffset(0, keepLocalTime);
			this._isUTC = false;

			if (keepLocalTime) {
				this.subtract(getDateOffset(this), "m");
			}
		}
		return this;
	}

	function setOffsetToParsedOffset() {
		if (this._tzm != null) {
			this.utcOffset(this._tzm, false, true);
		} else if (typeof this._i === "string") {
			var tZone = offsetFromString(matchOffset, this._i);
			if (tZone != null) {
				this.utcOffset(tZone);
			} else {
				this.utcOffset(0, true);
			}
		}
		return this;
	}

	function hasAlignedHourOffset(input) {
		if (!this.isValid()) {
			return false;
		}
		input = input ? createLocal(input).utcOffset() : 0;

		return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime() {
		return (
			this.utcOffset() > this.clone().month(0).utcOffset() ||
			this.utcOffset() > this.clone().month(5).utcOffset()
		);
	}

	function isDaylightSavingTimeShifted() {
		if (!isUndefined(this._isDSTShifted)) {
			return this._isDSTShifted;
		}

		var c = {},
			other;

		copyConfig(c, this);
		c = prepareConfig(c);

		if (c._a) {
			other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
			this._isDSTShifted =
				this.isValid() && compareArrays(c._a, other.toArray()) > 0;
		} else {
			this._isDSTShifted = false;
		}

		return this._isDSTShifted;
	}

	function isLocal() {
		return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset() {
		return this.isValid() ? this._isUTC : false;
	}

	function isUtc() {
		return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
		// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		// and further modified to allow for strings containing both week and day
		isoRegex =
			/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	function createDuration(input, key) {
		var duration = input,
			// matching against regexp is expensive, do it on demand
			match = null,
			sign,
			ret,
			diffRes;

		if (isDuration(input)) {
			duration = {
				ms: input._milliseconds,
				d: input._days,
				M: input._months,
			};
		} else if (isNumber(input) || !isNaN(+input)) {
			duration = {};
			if (key) {
				duration[key] = +input;
			} else {
				duration.milliseconds = +input;
			}
		} else if ((match = aspNetRegex.exec(input))) {
			sign = match[1] === "-" ? -1 : 1;
			duration = {
				y: 0,
				d: toInt(match[DATE]) * sign,
				h: toInt(match[HOUR]) * sign,
				m: toInt(match[MINUTE]) * sign,
				s: toInt(match[SECOND]) * sign,
				ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
			};
		} else if ((match = isoRegex.exec(input))) {
			sign = match[1] === "-" ? -1 : 1;
			duration = {
				y: parseIso(match[2], sign),
				M: parseIso(match[3], sign),
				w: parseIso(match[4], sign),
				d: parseIso(match[5], sign),
				h: parseIso(match[6], sign),
				m: parseIso(match[7], sign),
				s: parseIso(match[8], sign),
			};
		} else if (duration == null) {
			// checks for null or undefined
			duration = {};
		} else if (
			typeof duration === "object" &&
			("from" in duration || "to" in duration)
		) {
			diffRes = momentsDifference(
				createLocal(duration.from),
				createLocal(duration.to)
			);

			duration = {};
			duration.ms = diffRes.milliseconds;
			duration.M = diffRes.months;
		}

		ret = new Duration(duration);

		if (isDuration(input) && hasOwnProp(input, "_locale")) {
			ret._locale = input._locale;
		}

		if (isDuration(input) && hasOwnProp(input, "_isValid")) {
			ret._isValid = input._isValid;
		}

		return ret;
	}

	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;

	function parseIso(inp, sign) {
		// We'd normally use ~~inp for this, but unfortunately it also
		// converts floats to ints.
		// inp may be undefined, so careful calling replace on it.
		var res = inp && parseFloat(inp.replace(",", "."));
		// apply sign while we're at it
		return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
		var res = {};

		res.months =
			other.month() - base.month() + (other.year() - base.year()) * 12;
		if (base.clone().add(res.months, "M").isAfter(other)) {
			--res.months;
		}

		res.milliseconds = +other - +base.clone().add(res.months, "M");

		return res;
	}

	function momentsDifference(base, other) {
		var res;
		if (!(base.isValid() && other.isValid())) {
			return { milliseconds: 0, months: 0 };
		}

		other = cloneWithOffset(other, base);
		if (base.isBefore(other)) {
			res = positiveMomentsDifference(base, other);
		} else {
			res = positiveMomentsDifference(other, base);
			res.milliseconds = -res.milliseconds;
			res.months = -res.months;
		}

		return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
		return function (val, period) {
			var dur, tmp;
			//invert the arguments, but complain about it
			if (period !== null && !isNaN(+period)) {
				deprecateSimple(
					name,
					"moment()." +
						name +
						"(period, number) is deprecated. Please use moment()." +
						name +
						"(number, period). " +
						"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
				);
				tmp = val;
				val = period;
				period = tmp;
			}

			dur = createDuration(val, period);
			addSubtract(this, dur, direction);
			return this;
		};
	}

	function addSubtract(mom, duration, isAdding, updateOffset) {
		var milliseconds = duration._milliseconds,
			days = absRound(duration._days),
			months = absRound(duration._months);

		if (!mom.isValid()) {
			// No op
			return;
		}

		updateOffset = updateOffset == null ? true : updateOffset;

		if (months) {
			setMonth(mom, get(mom, "Month") + months * isAdding);
		}
		if (days) {
			set$1(mom, "Date", get(mom, "Date") + days * isAdding);
		}
		if (milliseconds) {
			mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
		}
		if (updateOffset) {
			hooks.updateOffset(mom, days || months);
		}
	}

	var add = createAdder(1, "add"),
		subtract = createAdder(-1, "subtract");

	function isString(input) {
		return typeof input === "string" || input instanceof String;
	}

	// type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	function isMomentInput(input) {
		return (
			isMoment(input) ||
			isDate(input) ||
			isString(input) ||
			isNumber(input) ||
			isNumberOrStringArray(input) ||
			isMomentInputObject(input) ||
			input === null ||
			input === undefined
		);
	}

	function isMomentInputObject(input) {
		var objectTest = isObject(input) && !isObjectEmpty(input),
			propertyTest = false,
			properties = [
				"years",
				"year",
				"y",
				"months",
				"month",
				"M",
				"days",
				"day",
				"d",
				"dates",
				"date",
				"D",
				"hours",
				"hour",
				"h",
				"minutes",
				"minute",
				"m",
				"seconds",
				"second",
				"s",
				"milliseconds",
				"millisecond",
				"ms",
			],
			i,
			property;

		for (i = 0; i < properties.length; i += 1) {
			property = properties[i];
			propertyTest = propertyTest || hasOwnProp(input, property);
		}

		return objectTest && propertyTest;
	}

	function isNumberOrStringArray(input) {
		var arrayTest = isArray(input),
			dataTypeTest = false;
		if (arrayTest) {
			dataTypeTest =
				input.filter(function (item) {
					return !isNumber(item) && isString(input);
				}).length === 0;
		}
		return arrayTest && dataTypeTest;
	}

	function isCalendarSpec(input) {
		var objectTest = isObject(input) && !isObjectEmpty(input),
			propertyTest = false,
			properties = [
				"sameDay",
				"nextDay",
				"lastDay",
				"nextWeek",
				"lastWeek",
				"sameElse",
			],
			i,
			property;

		for (i = 0; i < properties.length; i += 1) {
			property = properties[i];
			propertyTest = propertyTest || hasOwnProp(input, property);
		}

		return objectTest && propertyTest;
	}

	function getCalendarFormat(myMoment, now) {
		var diff = myMoment.diff(now, "days", true);
		return diff < -6
			? "sameElse"
			: diff < -1
			? "lastWeek"
			: diff < 0
			? "lastDay"
			: diff < 1
			? "sameDay"
			: diff < 2
			? "nextDay"
			: diff < 7
			? "nextWeek"
			: "sameElse";
	}

	function calendar$1(time, formats) {
		// Support for single parameter, formats only overload to the calendar function
		if (arguments.length === 1) {
			if (!arguments[0]) {
				time = undefined;
				formats = undefined;
			} else if (isMomentInput(arguments[0])) {
				time = arguments[0];
				formats = undefined;
			} else if (isCalendarSpec(arguments[0])) {
				formats = arguments[0];
				time = undefined;
			}
		}
		// We want to compare the start of today, vs this.
		// Getting start-of-today depends on whether we're local/utc/offset or not.
		var now = time || createLocal(),
			sod = cloneWithOffset(now, this).startOf("day"),
			format = hooks.calendarFormat(this, sod) || "sameElse",
			output =
				formats &&
				(isFunction(formats[format])
					? formats[format].call(this, now)
					: formats[format]);

		return this.format(
			output || this.localeData().calendar(format, this, createLocal(now))
		);
	}

	function clone() {
		return new Moment(this);
	}

	function isAfter(input, units) {
		var localInput = isMoment(input) ? input : createLocal(input);
		if (!(this.isValid() && localInput.isValid())) {
			return false;
		}
		units = normalizeUnits(units) || "millisecond";
		if (units === "millisecond") {
			return this.valueOf() > localInput.valueOf();
		} else {
			return localInput.valueOf() < this.clone().startOf(units).valueOf();
		}
	}

	function isBefore(input, units) {
		var localInput = isMoment(input) ? input : createLocal(input);
		if (!(this.isValid() && localInput.isValid())) {
			return false;
		}
		units = normalizeUnits(units) || "millisecond";
		if (units === "millisecond") {
			return this.valueOf() < localInput.valueOf();
		} else {
			return this.clone().endOf(units).valueOf() < localInput.valueOf();
		}
	}

	function isBetween(from, to, units, inclusivity) {
		var localFrom = isMoment(from) ? from : createLocal(from),
			localTo = isMoment(to) ? to : createLocal(to);
		if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
			return false;
		}
		inclusivity = inclusivity || "()";
		return (
			(inclusivity[0] === "("
				? this.isAfter(localFrom, units)
				: !this.isBefore(localFrom, units)) &&
			(inclusivity[1] === ")"
				? this.isBefore(localTo, units)
				: !this.isAfter(localTo, units))
		);
	}

	function isSame(input, units) {
		var localInput = isMoment(input) ? input : createLocal(input),
			inputMs;
		if (!(this.isValid() && localInput.isValid())) {
			return false;
		}
		units = normalizeUnits(units) || "millisecond";
		if (units === "millisecond") {
			return this.valueOf() === localInput.valueOf();
		} else {
			inputMs = localInput.valueOf();
			return (
				this.clone().startOf(units).valueOf() <= inputMs &&
				inputMs <= this.clone().endOf(units).valueOf()
			);
		}
	}

	function isSameOrAfter(input, units) {
		return this.isSame(input, units) || this.isAfter(input, units);
	}

	function isSameOrBefore(input, units) {
		return this.isSame(input, units) || this.isBefore(input, units);
	}

	function diff(input, units, asFloat) {
		var that, zoneDelta, output;

		if (!this.isValid()) {
			return NaN;
		}

		that = cloneWithOffset(input, this);

		if (!that.isValid()) {
			return NaN;
		}

		zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

		units = normalizeUnits(units);

		switch (units) {
			case "year":
				output = monthDiff(this, that) / 12;
				break;
			case "month":
				output = monthDiff(this, that);
				break;
			case "quarter":
				output = monthDiff(this, that) / 3;
				break;
			case "second":
				output = (this - that) / 1e3;
				break; // 1000
			case "minute":
				output = (this - that) / 6e4;
				break; // 1000 * 60
			case "hour":
				output = (this - that) / 36e5;
				break; // 1000 * 60 * 60
			case "day":
				output = (this - that - zoneDelta) / 864e5;
				break; // 1000 * 60 * 60 * 24, negate dst
			case "week":
				output = (this - that - zoneDelta) / 6048e5;
				break; // 1000 * 60 * 60 * 24 * 7, negate dst
			default:
				output = this - that;
		}

		return asFloat ? output : absFloor(output);
	}

	function monthDiff(a, b) {
		if (a.date() < b.date()) {
			// end-of-month calculations work correct when the start month has more
			// days than the end month.
			return -monthDiff(b, a);
		}
		// difference in months
		var wholeMonthDiff =
				(b.year() - a.year()) * 12 + (b.month() - a.month()),
			// b is in (anchor - 1 month, anchor + 1 month)
			anchor = a.clone().add(wholeMonthDiff, "months"),
			anchor2,
			adjust;

		if (b - anchor < 0) {
			anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
			// linear across the month
			adjust = (b - anchor) / (anchor - anchor2);
		} else {
			anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
			// linear across the month
			adjust = (b - anchor) / (anchor2 - anchor);
		}

		//check for negative zero, return zero if negative zero
		return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
	hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";

	function toString() {
		return this.clone()
			.locale("en")
			.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
	}

	function toISOString(keepOffset) {
		if (!this.isValid()) {
			return null;
		}
		var utc = keepOffset !== true,
			m = utc ? this.clone().utc() : this;
		if (m.year() < 0 || m.year() > 9999) {
			return formatMoment(
				m,
				utc
					? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
					: "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
			);
		}
		if (isFunction(Date.prototype.toISOString)) {
			// native implementation is ~50x faster, use it when we can
			if (utc) {
				return this.toDate().toISOString();
			} else {
				return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
					.toISOString()
					.replace("Z", formatMoment(m, "Z"));
			}
		}
		return formatMoment(
			m,
			utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
		);
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect() {
		if (!this.isValid()) {
			return "moment.invalid(/* " + this._i + " */)";
		}
		var func = "moment",
			zone = "",
			prefix,
			year,
			datetime,
			suffix;
		if (!this.isLocal()) {
			func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
			zone = "Z";
		}
		prefix = "[" + func + '("]';
		year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
		datetime = "-MM-DD[T]HH:mm:ss.SSS";
		suffix = zone + '[")]';

		return this.format(prefix + year + datetime + suffix);
	}

	function format(inputString) {
		if (!inputString) {
			inputString = this.isUtc()
				? hooks.defaultFormatUtc
				: hooks.defaultFormat;
		}
		var output = formatMoment(this, inputString);
		return this.localeData().postformat(output);
	}

	function from(time, withoutSuffix) {
		if (
			this.isValid() &&
			((isMoment(time) && time.isValid()) || createLocal(time).isValid())
		) {
			return createDuration({ to: this, from: time })
				.locale(this.locale())
				.humanize(!withoutSuffix);
		} else {
			return this.localeData().invalidDate();
		}
	}

	function fromNow(withoutSuffix) {
		return this.from(createLocal(), withoutSuffix);
	}

	function to(time, withoutSuffix) {
		if (
			this.isValid() &&
			((isMoment(time) && time.isValid()) || createLocal(time).isValid())
		) {
			return createDuration({ from: this, to: time })
				.locale(this.locale())
				.humanize(!withoutSuffix);
		} else {
			return this.localeData().invalidDate();
		}
	}

	function toNow(withoutSuffix) {
		return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale(key) {
		var newLocaleData;

		if (key === undefined) {
			return this._locale._abbr;
		} else {
			newLocaleData = getLocale(key);
			if (newLocaleData != null) {
				this._locale = newLocaleData;
			}
			return this;
		}
	}

	var lang = deprecate(
		"moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
		function (key) {
			if (key === undefined) {
				return this.localeData();
			} else {
				return this.locale(key);
			}
		}
	);

	function localeData() {
		return this._locale;
	}

	var MS_PER_SECOND = 1000,
		MS_PER_MINUTE = 60 * MS_PER_SECOND,
		MS_PER_HOUR = 60 * MS_PER_MINUTE,
		MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	// actual modulo - handles negative numbers (for dates before 1970):
	function mod$1(dividend, divisor) {
		return ((dividend % divisor) + divisor) % divisor;
	}

	function localStartOfDate(y, m, d) {
		// the date constructor remaps years 0-99 to 1900-1999
		if (y < 100 && y >= 0) {
			// preserve leap years using a full 400 year cycle, then reset
			return new Date(y + 400, m, d) - MS_PER_400_YEARS;
		} else {
			return new Date(y, m, d).valueOf();
		}
	}

	function utcStartOfDate(y, m, d) {
		// Date.UTC remaps years 0-99 to 1900-1999
		if (y < 100 && y >= 0) {
			// preserve leap years using a full 400 year cycle, then reset
			return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
		} else {
			return Date.UTC(y, m, d);
		}
	}

	function startOf(units) {
		var time, startOfDate;
		units = normalizeUnits(units);
		if (units === undefined || units === "millisecond" || !this.isValid()) {
			return this;
		}

		startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		switch (units) {
			case "year":
				time = startOfDate(this.year(), 0, 1);
				break;
			case "quarter":
				time = startOfDate(
					this.year(),
					this.month() - (this.month() % 3),
					1
				);
				break;
			case "month":
				time = startOfDate(this.year(), this.month(), 1);
				break;
			case "week":
				time = startOfDate(
					this.year(),
					this.month(),
					this.date() - this.weekday()
				);
				break;
			case "isoWeek":
				time = startOfDate(
					this.year(),
					this.month(),
					this.date() - (this.isoWeekday() - 1)
				);
				break;
			case "day":
			case "date":
				time = startOfDate(this.year(), this.month(), this.date());
				break;
			case "hour":
				time = this._d.valueOf();
				time -= mod$1(
					time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
					MS_PER_HOUR
				);
				break;
			case "minute":
				time = this._d.valueOf();
				time -= mod$1(time, MS_PER_MINUTE);
				break;
			case "second":
				time = this._d.valueOf();
				time -= mod$1(time, MS_PER_SECOND);
				break;
		}

		this._d.setTime(time);
		hooks.updateOffset(this, true);
		return this;
	}

	function endOf(units) {
		var time, startOfDate;
		units = normalizeUnits(units);
		if (units === undefined || units === "millisecond" || !this.isValid()) {
			return this;
		}

		startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		switch (units) {
			case "year":
				time = startOfDate(this.year() + 1, 0, 1) - 1;
				break;
			case "quarter":
				time =
					startOfDate(
						this.year(),
						this.month() - (this.month() % 3) + 3,
						1
					) - 1;
				break;
			case "month":
				time = startOfDate(this.year(), this.month() + 1, 1) - 1;
				break;
			case "week":
				time =
					startOfDate(
						this.year(),
						this.month(),
						this.date() - this.weekday() + 7
					) - 1;
				break;
			case "isoWeek":
				time =
					startOfDate(
						this.year(),
						this.month(),
						this.date() - (this.isoWeekday() - 1) + 7
					) - 1;
				break;
			case "day":
			case "date":
				time =
					startOfDate(this.year(), this.month(), this.date() + 1) - 1;
				break;
			case "hour":
				time = this._d.valueOf();
				time +=
					MS_PER_HOUR -
					mod$1(
						time +
							(this._isUTC
								? 0
								: this.utcOffset() * MS_PER_MINUTE),
						MS_PER_HOUR
					) -
					1;
				break;
			case "minute":
				time = this._d.valueOf();
				time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
				break;
			case "second":
				time = this._d.valueOf();
				time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
				break;
		}

		this._d.setTime(time);
		hooks.updateOffset(this, true);
		return this;
	}

	function valueOf() {
		return this._d.valueOf() - (this._offset || 0) * 60000;
	}

	function unix() {
		return Math.floor(this.valueOf() / 1000);
	}

	function toDate() {
		return new Date(this.valueOf());
	}

	function toArray() {
		var m = this;
		return [
			m.year(),
			m.month(),
			m.date(),
			m.hour(),
			m.minute(),
			m.second(),
			m.millisecond(),
		];
	}

	function toObject() {
		var m = this;
		return {
			years: m.year(),
			months: m.month(),
			date: m.date(),
			hours: m.hours(),
			minutes: m.minutes(),
			seconds: m.seconds(),
			milliseconds: m.milliseconds(),
		};
	}

	function toJSON() {
		// new Date(NaN).toJSON() === null
		return this.isValid() ? this.toISOString() : null;
	}

	function isValid$2() {
		return isValid(this);
	}

	function parsingFlags() {
		return extend({}, getParsingFlags(this));
	}

	function invalidAt() {
		return getParsingFlags(this).overflow;
	}

	function creationData() {
		return {
			input: this._i,
			format: this._f,
			locale: this._locale,
			isUTC: this._isUTC,
			strict: this._strict,
		};
	}

	addFormatToken("N", 0, 0, "eraAbbr");
	addFormatToken("NN", 0, 0, "eraAbbr");
	addFormatToken("NNN", 0, 0, "eraAbbr");
	addFormatToken("NNNN", 0, 0, "eraName");
	addFormatToken("NNNNN", 0, 0, "eraNarrow");

	addFormatToken("y", ["y", 1], "yo", "eraYear");
	addFormatToken("y", ["yy", 2], 0, "eraYear");
	addFormatToken("y", ["yyy", 3], 0, "eraYear");
	addFormatToken("y", ["yyyy", 4], 0, "eraYear");

	addRegexToken("N", matchEraAbbr);
	addRegexToken("NN", matchEraAbbr);
	addRegexToken("NNN", matchEraAbbr);
	addRegexToken("NNNN", matchEraName);
	addRegexToken("NNNNN", matchEraNarrow);

	addParseToken(
		["N", "NN", "NNN", "NNNN", "NNNNN"],
		function (input, array, config, token) {
			var era = config._locale.erasParse(input, token, config._strict);
			if (era) {
				getParsingFlags(config).era = era;
			} else {
				getParsingFlags(config).invalidEra = input;
			}
		}
	);

	addRegexToken("y", matchUnsigned);
	addRegexToken("yy", matchUnsigned);
	addRegexToken("yyy", matchUnsigned);
	addRegexToken("yyyy", matchUnsigned);
	addRegexToken("yo", matchEraYearOrdinal);

	addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
	addParseToken(["yo"], function (input, array, config, token) {
		var match;
		if (config._locale._eraYearOrdinalRegex) {
			match = input.match(config._locale._eraYearOrdinalRegex);
		}

		if (config._locale.eraYearOrdinalParse) {
			array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
		} else {
			array[YEAR] = parseInt(input, 10);
		}
	});

	function localeEras(m, format) {
		var i,
			l,
			date,
			eras = this._eras || getLocale("en")._eras;
		for (i = 0, l = eras.length; i < l; ++i) {
			switch (typeof eras[i].since) {
				case "string":
					// truncate time
					date = hooks(eras[i].since).startOf("day");
					eras[i].since = date.valueOf();
					break;
			}

			switch (typeof eras[i].until) {
				case "undefined":
					eras[i].until = +Infinity;
					break;
				case "string":
					// truncate time
					date = hooks(eras[i].until).startOf("day").valueOf();
					eras[i].until = date.valueOf();
					break;
			}
		}
		return eras;
	}

	function localeErasParse(eraName, format, strict) {
		var i,
			l,
			eras = this.eras(),
			name,
			abbr,
			narrow;
		eraName = eraName.toUpperCase();

		for (i = 0, l = eras.length; i < l; ++i) {
			name = eras[i].name.toUpperCase();
			abbr = eras[i].abbr.toUpperCase();
			narrow = eras[i].narrow.toUpperCase();

			if (strict) {
				switch (format) {
					case "N":
					case "NN":
					case "NNN":
						if (abbr === eraName) {
							return eras[i];
						}
						break;

					case "NNNN":
						if (name === eraName) {
							return eras[i];
						}
						break;

					case "NNNNN":
						if (narrow === eraName) {
							return eras[i];
						}
						break;
				}
			} else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
				return eras[i];
			}
		}
	}

	function localeErasConvertYear(era, year) {
		var dir = era.since <= era.until ? +1 : -1;
		if (year === undefined) {
			return hooks(era.since).year();
		} else {
			return hooks(era.since).year() + (year - era.offset) * dir;
		}
	}

	function getEraName() {
		var i,
			l,
			val,
			eras = this.localeData().eras();
		for (i = 0, l = eras.length; i < l; ++i) {
			// truncate time
			val = this.clone().startOf("day").valueOf();

			if (eras[i].since <= val && val <= eras[i].until) {
				return eras[i].name;
			}
			if (eras[i].until <= val && val <= eras[i].since) {
				return eras[i].name;
			}
		}

		return "";
	}

	function getEraNarrow() {
		var i,
			l,
			val,
			eras = this.localeData().eras();
		for (i = 0, l = eras.length; i < l; ++i) {
			// truncate time
			val = this.clone().startOf("day").valueOf();

			if (eras[i].since <= val && val <= eras[i].until) {
				return eras[i].narrow;
			}
			if (eras[i].until <= val && val <= eras[i].since) {
				return eras[i].narrow;
			}
		}

		return "";
	}

	function getEraAbbr() {
		var i,
			l,
			val,
			eras = this.localeData().eras();
		for (i = 0, l = eras.length; i < l; ++i) {
			// truncate time
			val = this.clone().startOf("day").valueOf();

			if (eras[i].since <= val && val <= eras[i].until) {
				return eras[i].abbr;
			}
			if (eras[i].until <= val && val <= eras[i].since) {
				return eras[i].abbr;
			}
		}

		return "";
	}

	function getEraYear() {
		var i,
			l,
			dir,
			val,
			eras = this.localeData().eras();
		for (i = 0, l = eras.length; i < l; ++i) {
			dir = eras[i].since <= eras[i].until ? +1 : -1;

			// truncate time
			val = this.clone().startOf("day").valueOf();

			if (
				(eras[i].since <= val && val <= eras[i].until) ||
				(eras[i].until <= val && val <= eras[i].since)
			) {
				return (
					(this.year() - hooks(eras[i].since).year()) * dir +
					eras[i].offset
				);
			}
		}

		return this.year();
	}

	function erasNameRegex(isStrict) {
		if (!hasOwnProp(this, "_erasNameRegex")) {
			computeErasParse.call(this);
		}
		return isStrict ? this._erasNameRegex : this._erasRegex;
	}

	function erasAbbrRegex(isStrict) {
		if (!hasOwnProp(this, "_erasAbbrRegex")) {
			computeErasParse.call(this);
		}
		return isStrict ? this._erasAbbrRegex : this._erasRegex;
	}

	function erasNarrowRegex(isStrict) {
		if (!hasOwnProp(this, "_erasNarrowRegex")) {
			computeErasParse.call(this);
		}
		return isStrict ? this._erasNarrowRegex : this._erasRegex;
	}

	function matchEraAbbr(isStrict, locale) {
		return locale.erasAbbrRegex(isStrict);
	}

	function matchEraName(isStrict, locale) {
		return locale.erasNameRegex(isStrict);
	}

	function matchEraNarrow(isStrict, locale) {
		return locale.erasNarrowRegex(isStrict);
	}

	function matchEraYearOrdinal(isStrict, locale) {
		return locale._eraYearOrdinalRegex || matchUnsigned;
	}

	function computeErasParse() {
		var abbrPieces = [],
			namePieces = [],
			narrowPieces = [],
			mixedPieces = [],
			i,
			l,
			eras = this.eras();

		for (i = 0, l = eras.length; i < l; ++i) {
			namePieces.push(regexEscape(eras[i].name));
			abbrPieces.push(regexEscape(eras[i].abbr));
			narrowPieces.push(regexEscape(eras[i].narrow));

			mixedPieces.push(regexEscape(eras[i].name));
			mixedPieces.push(regexEscape(eras[i].abbr));
			mixedPieces.push(regexEscape(eras[i].narrow));
		}

		this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
		this._erasNameRegex = new RegExp(
			"^(" + namePieces.join("|") + ")",
			"i"
		);
		this._erasAbbrRegex = new RegExp(
			"^(" + abbrPieces.join("|") + ")",
			"i"
		);
		this._erasNarrowRegex = new RegExp(
			"^(" + narrowPieces.join("|") + ")",
			"i"
		);
	}

	// FORMATTING

	addFormatToken(0, ["gg", 2], 0, function () {
		return this.weekYear() % 100;
	});

	addFormatToken(0, ["GG", 2], 0, function () {
		return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken(token, getter) {
		addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken("gggg", "weekYear");
	addWeekYearFormatToken("ggggg", "weekYear");
	addWeekYearFormatToken("GGGG", "isoWeekYear");
	addWeekYearFormatToken("GGGGG", "isoWeekYear");

	// ALIASES

	addUnitAlias("weekYear", "gg");
	addUnitAlias("isoWeekYear", "GG");

	// PRIORITY

	addUnitPriority("weekYear", 1);
	addUnitPriority("isoWeekYear", 1);

	// PARSING

	addRegexToken("G", matchSigned);
	addRegexToken("g", matchSigned);
	addRegexToken("GG", match1to2, match2);
	addRegexToken("gg", match1to2, match2);
	addRegexToken("GGGG", match1to4, match4);
	addRegexToken("gggg", match1to4, match4);
	addRegexToken("GGGGG", match1to6, match6);
	addRegexToken("ggggg", match1to6, match6);

	addWeekParseToken(
		["gggg", "ggggg", "GGGG", "GGGGG"],
		function (input, week, config, token) {
			week[token.substr(0, 2)] = toInt(input);
		}
	);

	addWeekParseToken(["gg", "GG"], function (input, week, config, token) {
		week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear(input) {
		return getSetWeekYearHelper.call(
			this,
			input,
			this.week(),
			this.weekday(),
			this.localeData()._week.dow,
			this.localeData()._week.doy
		);
	}

	function getSetISOWeekYear(input) {
		return getSetWeekYearHelper.call(
			this,
			input,
			this.isoWeek(),
			this.isoWeekday(),
			1,
			4
		);
	}

	function getISOWeeksInYear() {
		return weeksInYear(this.year(), 1, 4);
	}

	function getISOWeeksInISOWeekYear() {
		return weeksInYear(this.isoWeekYear(), 1, 4);
	}

	function getWeeksInYear() {
		var weekInfo = this.localeData()._week;
		return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getWeeksInWeekYear() {
		var weekInfo = this.localeData()._week;
		return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
		var weeksTarget;
		if (input == null) {
			return weekOfYear(this, dow, doy).year;
		} else {
			weeksTarget = weeksInYear(input, dow, doy);
			if (week > weeksTarget) {
				week = weeksTarget;
			}
			return setWeekAll.call(this, input, week, weekday, dow, doy);
		}
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
		var dayOfYearData = dayOfYearFromWeeks(
				weekYear,
				week,
				weekday,
				dow,
				doy
			),
			date = createUTCDate(
				dayOfYearData.year,
				0,
				dayOfYearData.dayOfYear
			);

		this.year(date.getUTCFullYear());
		this.month(date.getUTCMonth());
		this.date(date.getUTCDate());
		return this;
	}

	// FORMATTING

	addFormatToken("Q", 0, "Qo", "quarter");

	// ALIASES

	addUnitAlias("quarter", "Q");

	// PRIORITY

	addUnitPriority("quarter", 7);

	// PARSING

	addRegexToken("Q", match1);
	addParseToken("Q", function (input, array) {
		array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter(input) {
		return input == null
			? Math.ceil((this.month() + 1) / 3)
			: this.month((input - 1) * 3 + (this.month() % 3));
	}

	// FORMATTING

	addFormatToken("D", ["DD", 2], "Do", "date");

	// ALIASES

	addUnitAlias("date", "D");

	// PRIORITY
	addUnitPriority("date", 9);

	// PARSING

	addRegexToken("D", match1to2);
	addRegexToken("DD", match1to2, match2);
	addRegexToken("Do", function (isStrict, locale) {
		// TODO: Remove "ordinalParse" fallback in next major release.
		return isStrict
			? locale._dayOfMonthOrdinalParse || locale._ordinalParse
			: locale._dayOfMonthOrdinalParseLenient;
	});

	addParseToken(["D", "DD"], DATE);
	addParseToken("Do", function (input, array) {
		array[DATE] = toInt(input.match(match1to2)[0]);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet("Date", true);

	// FORMATTING

	addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");

	// ALIASES

	addUnitAlias("dayOfYear", "DDD");

	// PRIORITY
	addUnitPriority("dayOfYear", 4);

	// PARSING

	addRegexToken("DDD", match1to3);
	addRegexToken("DDDD", match3);
	addParseToken(["DDD", "DDDD"], function (input, array, config) {
		config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear(input) {
		var dayOfYear =
			Math.round(
				(this.clone().startOf("day") - this.clone().startOf("year")) /
					864e5
			) + 1;
		return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
	}

	// FORMATTING

	addFormatToken("m", ["mm", 2], 0, "minute");

	// ALIASES

	addUnitAlias("minute", "m");

	// PRIORITY

	addUnitPriority("minute", 14);

	// PARSING

	addRegexToken("m", match1to2);
	addRegexToken("mm", match1to2, match2);
	addParseToken(["m", "mm"], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet("Minutes", false);

	// FORMATTING

	addFormatToken("s", ["ss", 2], 0, "second");

	// ALIASES

	addUnitAlias("second", "s");

	// PRIORITY

	addUnitPriority("second", 15);

	// PARSING

	addRegexToken("s", match1to2);
	addRegexToken("ss", match1to2, match2);
	addParseToken(["s", "ss"], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet("Seconds", false);

	// FORMATTING

	addFormatToken("S", 0, 0, function () {
		return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ["SS", 2], 0, function () {
		return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ["SSS", 3], 0, "millisecond");
	addFormatToken(0, ["SSSS", 4], 0, function () {
		return this.millisecond() * 10;
	});
	addFormatToken(0, ["SSSSS", 5], 0, function () {
		return this.millisecond() * 100;
	});
	addFormatToken(0, ["SSSSSS", 6], 0, function () {
		return this.millisecond() * 1000;
	});
	addFormatToken(0, ["SSSSSSS", 7], 0, function () {
		return this.millisecond() * 10000;
	});
	addFormatToken(0, ["SSSSSSSS", 8], 0, function () {
		return this.millisecond() * 100000;
	});
	addFormatToken(0, ["SSSSSSSSS", 9], 0, function () {
		return this.millisecond() * 1000000;
	});

	// ALIASES

	addUnitAlias("millisecond", "ms");

	// PRIORITY

	addUnitPriority("millisecond", 16);

	// PARSING

	addRegexToken("S", match1to3, match1);
	addRegexToken("SS", match1to3, match2);
	addRegexToken("SSS", match1to3, match3);

	var token, getSetMillisecond;
	for (token = "SSSS"; token.length <= 9; token += "S") {
		addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
		array[MILLISECOND] = toInt(("0." + input) * 1000);
	}

	for (token = "S"; token.length <= 9; token += "S") {
		addParseToken(token, parseMs);
	}

	getSetMillisecond = makeGetSet("Milliseconds", false);

	// FORMATTING

	addFormatToken("z", 0, 0, "zoneAbbr");
	addFormatToken("zz", 0, 0, "zoneName");

	// MOMENTS

	function getZoneAbbr() {
		return this._isUTC ? "UTC" : "";
	}

	function getZoneName() {
		return this._isUTC ? "Coordinated Universal Time" : "";
	}

	var proto = Moment.prototype;

	proto.add = add;
	proto.calendar = calendar$1;
	proto.clone = clone;
	proto.diff = diff;
	proto.endOf = endOf;
	proto.format = format;
	proto.from = from;
	proto.fromNow = fromNow;
	proto.to = to;
	proto.toNow = toNow;
	proto.get = stringGet;
	proto.invalidAt = invalidAt;
	proto.isAfter = isAfter;
	proto.isBefore = isBefore;
	proto.isBetween = isBetween;
	proto.isSame = isSame;
	proto.isSameOrAfter = isSameOrAfter;
	proto.isSameOrBefore = isSameOrBefore;
	proto.isValid = isValid$2;
	proto.lang = lang;
	proto.locale = locale;
	proto.localeData = localeData;
	proto.max = prototypeMax;
	proto.min = prototypeMin;
	proto.parsingFlags = parsingFlags;
	proto.set = stringSet;
	proto.startOf = startOf;
	proto.subtract = subtract;
	proto.toArray = toArray;
	proto.toObject = toObject;
	proto.toDate = toDate;
	proto.toISOString = toISOString;
	proto.inspect = inspect;
	if (typeof Symbol !== "undefined" && Symbol.for != null) {
		proto[Symbol.for("nodejs.util.inspect.custom")] = function () {
			return "Moment<" + this.format() + ">";
		};
	}
	proto.toJSON = toJSON;
	proto.toString = toString;
	proto.unix = unix;
	proto.valueOf = valueOf;
	proto.creationData = creationData;
	proto.eraName = getEraName;
	proto.eraNarrow = getEraNarrow;
	proto.eraAbbr = getEraAbbr;
	proto.eraYear = getEraYear;
	proto.year = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	proto.weekYear = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	proto.quarter = proto.quarters = getSetQuarter;
	proto.month = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	proto.week = proto.weeks = getSetWeek;
	proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	proto.weeksInYear = getWeeksInYear;
	proto.weeksInWeekYear = getWeeksInWeekYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	proto.date = getSetDayOfMonth;
	proto.day = proto.days = getSetDayOfWeek;
	proto.weekday = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear = getSetDayOfYear;
	proto.hour = proto.hours = getSetHour;
	proto.minute = proto.minutes = getSetMinute;
	proto.second = proto.seconds = getSetSecond;
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	proto.utcOffset = getSetOffset;
	proto.utc = setOffsetToUTC;
	proto.local = setOffsetToLocal;
	proto.parseZone = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST = isDaylightSavingTime;
	proto.isLocal = isLocal;
	proto.isUtcOffset = isUtcOffset;
	proto.isUtc = isUtc;
	proto.isUTC = isUtc;
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	proto.dates = deprecate(
		"dates accessor is deprecated. Use date instead.",
		getSetDayOfMonth
	);
	proto.months = deprecate(
		"months accessor is deprecated. Use month instead",
		getSetMonth
	);
	proto.years = deprecate(
		"years accessor is deprecated. Use year instead",
		getSetYear
	);
	proto.zone = deprecate(
		"moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
		getSetZone
	);
	proto.isDSTShifted = deprecate(
		"isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
		isDaylightSavingTimeShifted
	);

	function createUnix(input) {
		return createLocal(input * 1000);
	}

	function createInZone() {
		return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat(string) {
		return string;
	}

	var proto$1 = Locale.prototype;

	proto$1.calendar = calendar;
	proto$1.longDateFormat = longDateFormat;
	proto$1.invalidDate = invalidDate;
	proto$1.ordinal = ordinal;
	proto$1.preparse = preParsePostFormat;
	proto$1.postformat = preParsePostFormat;
	proto$1.relativeTime = relativeTime;
	proto$1.pastFuture = pastFuture;
	proto$1.set = set;
	proto$1.eras = localeEras;
	proto$1.erasParse = localeErasParse;
	proto$1.erasConvertYear = localeErasConvertYear;
	proto$1.erasAbbrRegex = erasAbbrRegex;
	proto$1.erasNameRegex = erasNameRegex;
	proto$1.erasNarrowRegex = erasNarrowRegex;

	proto$1.months = localeMonths;
	proto$1.monthsShort = localeMonthsShort;
	proto$1.monthsParse = localeMonthsParse;
	proto$1.monthsRegex = monthsRegex;
	proto$1.monthsShortRegex = monthsShortRegex;
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	proto$1.weekdays = localeWeekdays;
	proto$1.weekdaysMin = localeWeekdaysMin;
	proto$1.weekdaysShort = localeWeekdaysShort;
	proto$1.weekdaysParse = localeWeekdaysParse;

	proto$1.weekdaysRegex = weekdaysRegex;
	proto$1.weekdaysShortRegex = weekdaysShortRegex;
	proto$1.weekdaysMinRegex = weekdaysMinRegex;

	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;

	function get$1(format, index, field, setter) {
		var locale = getLocale(),
			utc = createUTC().set(setter, index);
		return locale[field](utc, format);
	}

	function listMonthsImpl(format, index, field) {
		if (isNumber(format)) {
			index = format;
			format = undefined;
		}

		format = format || "";

		if (index != null) {
			return get$1(format, index, field, "month");
		}

		var i,
			out = [];
		for (i = 0; i < 12; i++) {
			out[i] = get$1(format, i, field, "month");
		}
		return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl(localeSorted, format, index, field) {
		if (typeof localeSorted === "boolean") {
			if (isNumber(format)) {
				index = format;
				format = undefined;
			}

			format = format || "";
		} else {
			format = localeSorted;
			index = format;
			localeSorted = false;

			if (isNumber(format)) {
				index = format;
				format = undefined;
			}

			format = format || "";
		}

		var locale = getLocale(),
			shift = localeSorted ? locale._week.dow : 0,
			i,
			out = [];

		if (index != null) {
			return get$1(format, (index + shift) % 7, field, "day");
		}

		for (i = 0; i < 7; i++) {
			out[i] = get$1(format, (i + shift) % 7, field, "day");
		}
		return out;
	}

	function listMonths(format, index) {
		return listMonthsImpl(format, index, "months");
	}

	function listMonthsShort(format, index) {
		return listMonthsImpl(format, index, "monthsShort");
	}

	function listWeekdays(localeSorted, format, index) {
		return listWeekdaysImpl(localeSorted, format, index, "weekdays");
	}

	function listWeekdaysShort(localeSorted, format, index) {
		return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
	}

	function listWeekdaysMin(localeSorted, format, index) {
		return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
	}

	getSetGlobalLocale("en", {
		eras: [
			{
				since: "0001-01-01",
				until: +Infinity,
				offset: 1,
				name: "Anno Domini",
				narrow: "AD",
				abbr: "AD",
			},
			{
				since: "0000-12-31",
				until: -Infinity,
				offset: 1,
				name: "Before Christ",
				narrow: "BC",
				abbr: "BC",
			},
		],
		dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
		ordinal: function (number) {
			var b = number % 10,
				output =
					toInt((number % 100) / 10) === 1
						? "th"
						: b === 1
						? "st"
						: b === 2
						? "nd"
						: b === 3
						? "rd"
						: "th";
			return number + output;
		},
	});

	// Side effect imports

	hooks.lang = deprecate(
		"moment.lang is deprecated. Use moment.locale instead.",
		getSetGlobalLocale
	);
	hooks.langData = deprecate(
		"moment.langData is deprecated. Use moment.localeData instead.",
		getLocale
	);

	var mathAbs = Math.abs;

	function abs() {
		var data = this._data;

		this._milliseconds = mathAbs(this._milliseconds);
		this._days = mathAbs(this._days);
		this._months = mathAbs(this._months);

		data.milliseconds = mathAbs(data.milliseconds);
		data.seconds = mathAbs(data.seconds);
		data.minutes = mathAbs(data.minutes);
		data.hours = mathAbs(data.hours);
		data.months = mathAbs(data.months);
		data.years = mathAbs(data.years);

		return this;
	}

	function addSubtract$1(duration, input, value, direction) {
		var other = createDuration(input, value);

		duration._milliseconds += direction * other._milliseconds;
		duration._days += direction * other._days;
		duration._months += direction * other._months;

		return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1(input, value) {
		return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1(input, value) {
		return addSubtract$1(this, input, value, -1);
	}

	function absCeil(number) {
		if (number < 0) {
			return Math.floor(number);
		} else {
			return Math.ceil(number);
		}
	}

	function bubble() {
		var milliseconds = this._milliseconds,
			days = this._days,
			months = this._months,
			data = this._data,
			seconds,
			minutes,
			hours,
			years,
			monthsFromDays;

		// if we have a mix of positive and negative values, bubble down first
		// check: https://github.com/moment/moment/issues/2166
		if (
			!(
				(milliseconds >= 0 && days >= 0 && months >= 0) ||
				(milliseconds <= 0 && days <= 0 && months <= 0)
			)
		) {
			milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
			days = 0;
			months = 0;
		}

		// The following code bubbles up values, see the tests for
		// examples of what that means.
		data.milliseconds = milliseconds % 1000;

		seconds = absFloor(milliseconds / 1000);
		data.seconds = seconds % 60;

		minutes = absFloor(seconds / 60);
		data.minutes = minutes % 60;

		hours = absFloor(minutes / 60);
		data.hours = hours % 24;

		days += absFloor(hours / 24);

		// convert days to months
		monthsFromDays = absFloor(daysToMonths(days));
		months += monthsFromDays;
		days -= absCeil(monthsToDays(monthsFromDays));

		// 12 months -> 1 year
		years = absFloor(months / 12);
		months %= 12;

		data.days = days;
		data.months = months;
		data.years = years;

		return this;
	}

	function daysToMonths(days) {
		// 400 years have 146097 days (taking into account leap year rules)
		// 400 years have 12 months === 4800
		return (days * 4800) / 146097;
	}

	function monthsToDays(months) {
		// the reverse of daysToMonths
		return (months * 146097) / 4800;
	}

	function as(units) {
		if (!this.isValid()) {
			return NaN;
		}
		var days,
			months,
			milliseconds = this._milliseconds;

		units = normalizeUnits(units);

		if (units === "month" || units === "quarter" || units === "year") {
			days = this._days + milliseconds / 864e5;
			months = this._months + daysToMonths(days);
			switch (units) {
				case "month":
					return months;
				case "quarter":
					return months / 3;
				case "year":
					return months / 12;
			}
		} else {
			// handle milliseconds separately because of floating point math errors (issue #1867)
			days = this._days + Math.round(monthsToDays(this._months));
			switch (units) {
				case "week":
					return days / 7 + milliseconds / 6048e5;
				case "day":
					return days + milliseconds / 864e5;
				case "hour":
					return days * 24 + milliseconds / 36e5;
				case "minute":
					return days * 1440 + milliseconds / 6e4;
				case "second":
					return days * 86400 + milliseconds / 1000;
				// Math.floor prevents floating point math errors here
				case "millisecond":
					return Math.floor(days * 864e5) + milliseconds;
				default:
					throw new Error("Unknown unit " + units);
			}
		}
	}

	// TODO: Use this.as('ms')?
	function valueOf$1() {
		if (!this.isValid()) {
			return NaN;
		}
		return (
			this._milliseconds +
			this._days * 864e5 +
			(this._months % 12) * 2592e6 +
			toInt(this._months / 12) * 31536e6
		);
	}

	function makeAs(alias) {
		return function () {
			return this.as(alias);
		};
	}

	var asMilliseconds = makeAs("ms"),
		asSeconds = makeAs("s"),
		asMinutes = makeAs("m"),
		asHours = makeAs("h"),
		asDays = makeAs("d"),
		asWeeks = makeAs("w"),
		asMonths = makeAs("M"),
		asQuarters = makeAs("Q"),
		asYears = makeAs("y");

	function clone$1() {
		return createDuration(this);
	}

	function get$2(units) {
		units = normalizeUnits(units);
		return this.isValid() ? this[units + "s"]() : NaN;
	}

	function makeGetter(name) {
		return function () {
			return this.isValid() ? this._data[name] : NaN;
		};
	}

	var milliseconds = makeGetter("milliseconds"),
		seconds = makeGetter("seconds"),
		minutes = makeGetter("minutes"),
		hours = makeGetter("hours"),
		days = makeGetter("days"),
		months = makeGetter("months"),
		years = makeGetter("years");

	function weeks() {
		return absFloor(this.days() / 7);
	}

	var round = Math.round,
		thresholds = {
			ss: 44, // a few seconds to seconds
			s: 45, // seconds to minute
			m: 45, // minutes to hour
			h: 22, // hours to day
			d: 26, // days to month/week
			w: null, // weeks to month
			M: 11, // months to year
		};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(
		string,
		number,
		withoutSuffix,
		isFuture,
		locale
	) {
		return locale.relativeTime(
			number || 1,
			!!withoutSuffix,
			string,
			isFuture
		);
	}

	function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
		var duration = createDuration(posNegDuration).abs(),
			seconds = round(duration.as("s")),
			minutes = round(duration.as("m")),
			hours = round(duration.as("h")),
			days = round(duration.as("d")),
			months = round(duration.as("M")),
			weeks = round(duration.as("w")),
			years = round(duration.as("y")),
			a =
				(seconds <= thresholds.ss && ["s", seconds]) ||
				(seconds < thresholds.s && ["ss", seconds]) ||
				(minutes <= 1 && ["m"]) ||
				(minutes < thresholds.m && ["mm", minutes]) ||
				(hours <= 1 && ["h"]) ||
				(hours < thresholds.h && ["hh", hours]) ||
				(days <= 1 && ["d"]) ||
				(days < thresholds.d && ["dd", days]);

		if (thresholds.w != null) {
			a =
				a ||
				(weeks <= 1 && ["w"]) ||
				(weeks < thresholds.w && ["ww", weeks]);
		}
		a = a ||
			(months <= 1 && ["M"]) ||
			(months < thresholds.M && ["MM", months]) ||
			(years <= 1 && ["y"]) || ["yy", years];

		a[2] = withoutSuffix;
		a[3] = +posNegDuration > 0;
		a[4] = locale;
		return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding(roundingFunction) {
		if (roundingFunction === undefined) {
			return round;
		}
		if (typeof roundingFunction === "function") {
			round = roundingFunction;
			return true;
		}
		return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold(threshold, limit) {
		if (thresholds[threshold] === undefined) {
			return false;
		}
		if (limit === undefined) {
			return thresholds[threshold];
		}
		thresholds[threshold] = limit;
		if (threshold === "s") {
			thresholds.ss = limit - 1;
		}
		return true;
	}

	function humanize(argWithSuffix, argThresholds) {
		if (!this.isValid()) {
			return this.localeData().invalidDate();
		}

		var withSuffix = false,
			th = thresholds,
			locale,
			output;

		if (typeof argWithSuffix === "object") {
			argThresholds = argWithSuffix;
			argWithSuffix = false;
		}
		if (typeof argWithSuffix === "boolean") {
			withSuffix = argWithSuffix;
		}
		if (typeof argThresholds === "object") {
			th = Object.assign({}, thresholds, argThresholds);
			if (argThresholds.s != null && argThresholds.ss == null) {
				th.ss = argThresholds.s - 1;
			}
		}

		locale = this.localeData();
		output = relativeTime$1(this, !withSuffix, th, locale);

		if (withSuffix) {
			output = locale.pastFuture(+this, output);
		}

		return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function sign(x) {
		return (x > 0) - (x < 0) || +x;
	}

	function toISOString$1() {
		// for ISO strings we do not use the normal bubbling rules:
		//  * milliseconds bubble up until they become hours
		//  * days do not bubble at all
		//  * months bubble up until they become years
		// This is because there is no context-free conversion between hours and days
		// (think of clock changes)
		// and also not between days and months (28-31 days per month)
		if (!this.isValid()) {
			return this.localeData().invalidDate();
		}

		var seconds = abs$1(this._milliseconds) / 1000,
			days = abs$1(this._days),
			months = abs$1(this._months),
			minutes,
			hours,
			years,
			s,
			total = this.asSeconds(),
			totalSign,
			ymSign,
			daysSign,
			hmsSign;

		if (!total) {
			// this is the same as C#'s (Noda) and python (isodate)...
			// but not other JS (goog.date)
			return "P0D";
		}

		// 3600 seconds -> 60 minutes -> 1 hour
		minutes = absFloor(seconds / 60);
		hours = absFloor(minutes / 60);
		seconds %= 60;
		minutes %= 60;

		// 12 months -> 1 year
		years = absFloor(months / 12);
		months %= 12;

		// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
		s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";

		totalSign = total < 0 ? "-" : "";
		ymSign = sign(this._months) !== sign(total) ? "-" : "";
		daysSign = sign(this._days) !== sign(total) ? "-" : "";
		hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";

		return (
			totalSign +
			"P" +
			(years ? ymSign + years + "Y" : "") +
			(months ? ymSign + months + "M" : "") +
			(days ? daysSign + days + "D" : "") +
			(hours || minutes || seconds ? "T" : "") +
			(hours ? hmsSign + hours + "H" : "") +
			(minutes ? hmsSign + minutes + "M" : "") +
			(seconds ? hmsSign + s + "S" : "")
		);
	}

	var proto$2 = Duration.prototype;

	proto$2.isValid = isValid$1;
	proto$2.abs = abs;
	proto$2.add = add$1;
	proto$2.subtract = subtract$1;
	proto$2.as = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds = asSeconds;
	proto$2.asMinutes = asMinutes;
	proto$2.asHours = asHours;
	proto$2.asDays = asDays;
	proto$2.asWeeks = asWeeks;
	proto$2.asMonths = asMonths;
	proto$2.asQuarters = asQuarters;
	proto$2.asYears = asYears;
	proto$2.valueOf = valueOf$1;
	proto$2._bubble = bubble;
	proto$2.clone = clone$1;
	proto$2.get = get$2;
	proto$2.milliseconds = milliseconds;
	proto$2.seconds = seconds;
	proto$2.minutes = minutes;
	proto$2.hours = hours;
	proto$2.days = days;
	proto$2.weeks = weeks;
	proto$2.months = months;
	proto$2.years = years;
	proto$2.humanize = humanize;
	proto$2.toISOString = toISOString$1;
	proto$2.toString = toISOString$1;
	proto$2.toJSON = toISOString$1;
	proto$2.locale = locale;
	proto$2.localeData = localeData;

	proto$2.toIsoString = deprecate(
		"toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
		toISOString$1
	);
	proto$2.lang = lang;

	// FORMATTING

	addFormatToken("X", 0, 0, "unix");
	addFormatToken("x", 0, 0, "valueOf");

	// PARSING

	addRegexToken("x", matchSigned);
	addRegexToken("X", matchTimestamp);
	addParseToken("X", function (input, array, config) {
		config._d = new Date(parseFloat(input) * 1000);
	});
	addParseToken("x", function (input, array, config) {
		config._d = new Date(toInt(input));
	});

	//! moment.js

	hooks.version = "2.29.1";

	setHookCallback(createLocal);

	hooks.fn = proto;
	hooks.min = min;
	hooks.max = max;
	hooks.now = now;
	hooks.utc = createUTC;
	hooks.unix = createUnix;
	hooks.months = listMonths;
	hooks.isDate = isDate;
	hooks.locale = getSetGlobalLocale;
	hooks.invalid = createInvalid;
	hooks.duration = createDuration;
	hooks.isMoment = isMoment;
	hooks.weekdays = listWeekdays;
	hooks.parseZone = createInZone;
	hooks.localeData = getLocale;
	hooks.isDuration = isDuration;
	hooks.monthsShort = listMonthsShort;
	hooks.weekdaysMin = listWeekdaysMin;
	hooks.defineLocale = defineLocale;
	hooks.updateLocale = updateLocale;
	hooks.locales = listLocales;
	hooks.weekdaysShort = listWeekdaysShort;
	hooks.normalizeUnits = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat = getCalendarFormat;
	hooks.prototype = proto;

	// currently HTML5 input type only supports 24-hour formats
	hooks.HTML5_FMT = {
		DATETIME_LOCAL: "YYYY-MM-DDTHH:mm", // <input type="datetime-local" />
		DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss", // <input type="datetime-local" step="1" />
		DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS", // <input type="datetime-local" step="0.001" />
		DATE: "YYYY-MM-DD", // <input type="date" />
		TIME: "HH:mm", // <input type="time" />
		TIME_SECONDS: "HH:mm:ss", // <input type="time" step="1" />
		TIME_MS: "HH:mm:ss.SSS", // <input type="time" step="0.001" />
		WEEK: "GGGG-[W]WW", // <input type="week" />
		MONTH: "YYYY-MM", // <input type="month" />
	};

	return hooks;
});
</script><script type="text/javascript" src="/ResourcePackages/Msf/assets/js/volunteer/mock-api.min.js"></script><script type="text/javascript" src="/ResourcePackages/Msf/assets/js/volunteer/app.min.js"></script><script type="text/javascript" src="/ResourcePackages/Msf/assets/js/volunteer/stories.min.js"></script><script type="text/javascript">
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 144);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                __webpack_require__(147)("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(146)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
        ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return /^nm$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            ); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        },
    });

    return af;

})));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ar;

})));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Amine Roukh: https://github.com/Amine27
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi
//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'جانفي',
            'فيفري',
            'مارس',
            'أفريل',
            'ماي',
            'جوان',
            'جويلية',
            'أوت',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arDz = moment.defineLocale('ar-dz', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arDz;

})));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arKw = moment.defineLocale('ar-kw', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arKw;

})));


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            0: '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arLy;

})));


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arMa = moment.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arMa;

})));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return arSa;

})));


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arTn;

})));


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı',
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
        ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
            '_'
        ),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'bir neçə saniyə',
            ss: '%d saniyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il',
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return az;

})));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            dd: 'дзень_дні_дзён',
            MM: 'месяц_месяцы_месяцаў',
            yy: 'год_гады_гадоў',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
                '_'
            ),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
                '_'
            ),
        },
        monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split(
            '_'
        ),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
                '_'
            ),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
                '_'
            ),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) &&
                        number % 100 !== 12 &&
                        number % 100 !== 13
                        ? number + '-і'
                        : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return be;

})));


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bg = moment.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Миналата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Миналия] dddd [в] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            ss: '%d секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            w: 'седмица',
            ww: '%d седмици',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bg;

})));


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
            '_'
        ),
        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
        },
        calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return bm;

})));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bn = moment.defineLocale('bn', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort: 'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
            '_'
        ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bn;

})));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali (Bangladesh) [bn-bd]
//! author : Asraf Hossain Patoary : https://github.com/ashwoolford

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bnBd = moment.defineLocale('bn-bd', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort: 'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
            '_'
        ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },

        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'রাত') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ভোর') {
                return hour;
            } else if (meridiem === 'সকাল') {
                return hour;
            } else if (meridiem === 'দুপুর') {
                return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'বিকাল') {
                return hour + 12;
            } else if (meridiem === 'সন্ধ্যা') {
                return hour + 12;
            }
        },

        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 6) {
                return 'ভোর';
            } else if (hour < 12) {
                return 'সকাল';
            } else if (hour < 15) {
                return 'দুপুর';
            } else if (hour < 18) {
                return 'বিকাল';
            } else if (hour < 20) {
                return 'সন্ধ্যা';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bnBd;

})));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '༡',
            2: '༢',
            3: '༣',
            4: '༤',
            5: '༥',
            6: '༦',
            7: '༧',
            8: '༨',
            9: '༩',
            0: '༠',
        },
        numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0',
        };

    var bo = moment.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
            '_'
        ),
        monthsShort: 'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
            '_'
        ),
        monthsShortRegex: /^(ཟླ་\d{1,2})/,
        monthsParseExact: true,
        weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
            '_'
        ),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
            '_'
        ),
        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            ss: '%d སྐར་ཆ།',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ',
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bo;

})));


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh',
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z',
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var monthsParse = [
            /^gen/i,
            /^c[ʼ\']hwe/i,
            /^meu/i,
            /^ebr/i,
            /^mae/i,
            /^(mez|eve)/i,
            /^gou/i,
            /^eos/i,
            /^gwe/i,
            /^her/i,
            /^du/i,
            /^ker/i,
        ],
        monthsRegex = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        monthsStrictRegex = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
        monthsShortStrictRegex = /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        fullWeekdaysParse = [
            /^sul/i,
            /^lun/i,
            /^meurzh/i,
            /^merc[ʼ\']her/i,
            /^yaou/i,
            /^gwener/i,
            /^sadorn/i,
        ],
        shortWeekdaysParse = [
            /^Sul/i,
            /^Lun/i,
            /^Meu/i,
            /^Mer/i,
            /^Yao/i,
            /^Gwe/i,
            /^Sad/i,
        ],
        minWeekdaysParse = [
            /^Su/i,
            /^Lu/i,
            /^Me([^r]|$)/i,
            /^Mer/i,
            /^Ya/i,
            /^Gw/i,
            /^Sa/i,
        ];

    var br = moment.defineLocale('br', {
        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
            '_'
        ),
        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParse: minWeekdaysParse,
        fullWeekdaysParse: fullWeekdaysParse,
        shortWeekdaysParse: shortWeekdaysParse,
        minWeekdaysParse: minWeekdaysParse,

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warcʼhoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Decʼh da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s ʼzo',
            s: 'un nebeud segondennoù',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
        isPM: function (token) {
            return token === 'g.m.';
        },
        meridiem: function (hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
        },
    });

    return br;

})));


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bs;

})));


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ca = moment.defineLocale('ca', {
        months: {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
                '_'
            ),
            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [passat a ' +
                    (this.hours() !== 1 ? 'les' : 'la') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ca;

})));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
            '_'
        ),
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
        monthsParse = [
            /^led/i,
            /^úno/i,
            /^bře/i,
            /^dub/i,
            /^kvě/i,
            /^(čvn|červen$|června)/i,
            /^(čvc|červenec|července)/i,
            /^srp/i,
            /^zář/i,
            /^říj/i,
            /^lis/i,
            /^pro/i,
        ],
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex: /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex: /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY',
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cs;

})));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cv = moment.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
            '_'
        ),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
            '_'
        ),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output)
                    ? 'рен'
                    : /ҫул$/i.exec(output)
                    ? 'тан'
                    : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            ss: '%d ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return cv;

})));


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
        ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
            '_'
        ),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
            '_'
        ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed', // 1af to 10fed
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed', // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cy;

})));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return da;

})));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
            '_'
        ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return de;

})));


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort: 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
            '_'
        ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deAt;

})));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
            '_'
        ),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deCh;

})));


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު',
        ],
        weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު',
        ];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /މކ|މފ/,
        isPM: function (input) {
            return 'މފ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            ss: 'd% ސިކުންތު',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return dv;

})));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
            '_'
        ),
        monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
            '_'
        ),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (
                typeof format === 'string' &&
                /D/.test(format.substring(0, format.indexOf('MMMM')))
            ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
            '_'
        ),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L',
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            ss: '%d δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια',
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4st is the first week of the year.
        },
    });

    return el;

})));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enAu;

})));


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enCa;

})));


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enGb;

})));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enIe;

})));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Israel) [en-il]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIl = moment.defineLocale('en-il', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enIl;

})));


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (India) [en-in]
//! author : Jatin Agrawal : https://github.com/jatinag22

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIn = moment.defineLocale('en-in', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return enIn;

})));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enNz;

})));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Singapore) [en-sg]
//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enSg = moment.defineLocale('en-sg', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enSg;

})));


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean
//! comment : Vivakvo corrected the translation by colindean and miestasmia

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj',
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eo;

})));


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
            '_'
        ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return es;

})));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
            '_'
        ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return esDo;

})));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Mexico) [es-mx]
//! author : JC Franco : https://github.com/jcfranco

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
            '_'
        ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esMx = moment.defineLocale('es-mx', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return esMx;

})));


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta
//! author : chrisrodz : https://github.com/chrisrodz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
            '_'
        ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return esUs;

})));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['ühe minuti', 'üks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['ühe tunni', 'tund aega', 'üks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['ühe päeva', 'üks päev'],
            M: ['kuu aja', 'kuu aega', 'üks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['ühe aasta', 'aasta', 'üks aasta'],
            yy: [number + ' aasta', number + ' aastat'],
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
        ),
        monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split(
            '_'
        ),
        weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
            '_'
        ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return et;

})));


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
        ),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
            '_'
        ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eu;

})));


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '۱',
            2: '۲',
            3: '۳',
            4: '۴',
            5: '۵',
            6: '۶',
            7: '۷',
            8: '۸',
            9: '۹',
            0: '۰',
        },
        numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0',
        };

    var fa = moment.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
            '_'
        ),
        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
            '_'
        ),
        weekdays: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
            '_'
        ),
        weekdaysShort: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
            '_'
        ),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            ss: '%d ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string
                .replace(/[۰-۹]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return fa;

})));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
            ' '
        ),
        numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'neljän',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9],
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                result = isFuture ? 'sekunnin' : 'sekuntia';
                break;
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10
            ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
            : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
        ),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
            '_'
        ),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
            '_'
        ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fi;

})));


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Filipino [fil]
//! author : Dan Hagman : https://github.com/hagmandan
//! author : Matthew Co : https://github.com/matthewdeeco

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fil = moment.defineLocale('fil', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fil;

})));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123
//! author : Kristian Sakarisson : https://github.com/sakarisson

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
            '_'
        ),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaður',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fo;

})));


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsStrictRegex = /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsShortStrictRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
        monthsRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsParse = [
            /^janv/i,
            /^févr/i,
            /^mars/i,
            /^avr/i,
            /^mai/i,
            /^juin/i,
            /^juil/i,
            /^août/i,
            /^sept/i,
            /^oct/i,
            /^nov/i,
            /^déc/i,
        ];

    var fr = moment.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
            '_'
        ),
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fr;

})));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
    });

    return frCa;

})));


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return frCh;

})));


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split(
            '_'
        ),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split(
            '_'
        );

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
            '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fy;

})));


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Irish or Irish Gaelic [ga]
//! author : André Silva : https://github.com/askpt

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Eanáir',
            'Feabhra',
            'Márta',
            'Aibreán',
            'Bealtaine',
            'Meitheamh',
            'Iúil',
            'Lúnasa',
            'Meán Fómhair',
            'Deireadh Fómhair',
            'Samhain',
            'Nollaig',
        ],
        monthsShort = [
            'Ean',
            'Feabh',
            'Márt',
            'Aib',
            'Beal',
            'Meith',
            'Iúil',
            'Lún',
            'M.F.',
            'D.F.',
            'Samh',
            'Noll',
        ],
        weekdays = [
            'Dé Domhnaigh',
            'Dé Luain',
            'Dé Máirt',
            'Dé Céadaoin',
            'Déardaoin',
            'Dé hAoine',
            'Dé Sathairn',
        ],
        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d míonna',
            y: 'bliain',
            yy: '%d bliain',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ga;

})));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Am Faoilleach',
            'An Gearran',
            'Am Màrt',
            'An Giblean',
            'An Cèitean',
            'An t-Ògmhios',
            'An t-Iuchar',
            'An Lùnastal',
            'An t-Sultain',
            'An Dàmhair',
            'An t-Samhain',
            'An Dùbhlachd',
        ],
        monthsShort = [
            'Faoi',
            'Gear',
            'Màrt',
            'Gibl',
            'Cèit',
            'Ògmh',
            'Iuch',
            'Lùn',
            'Sult',
            'Dàmh',
            'Samh',
            'Dùbh',
        ],
        weekdays = [
            'Didòmhnaich',
            'Diluain',
            'Dimàirt',
            'Diciadain',
            'Diardaoin',
            'Dihaoine',
            'Disathairne',
        ],
        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gd;

})));


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function () {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gl;

})));


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Devanagari script [gom-deva]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
            m: ['एका मिणटान', 'एक मिनूट'],
            mm: [number + ' मिणटांनी', number + ' मिणटां'],
            h: ['एका वरान', 'एक वर'],
            hh: [number + ' वरांनी', number + ' वरां'],
            d: ['एका दिसान', 'एक दीस'],
            dd: [number + ' दिसांनी', number + ' दीस'],
            M: ['एका म्हयन्यान', 'एक म्हयनो'],
            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
            y: ['एका वर्सान', 'एक वर्स'],
            yy: [number + ' वर्सांनी', number + ' वर्सां'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomDeva = moment.defineLocale('gom-deva', {
        months: {
            standalone: 'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
                '_'
            ),
            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort: 'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [वाजतां]',
            LTS: 'A h:mm:ss [वाजतां]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
        },
        calendar: {
            sameDay: '[आयज] LT',
            nextDay: '[फाल्यां] LT',
            nextWeek: '[फुडलो] dddd[,] LT',
            lastDay: '[काल] LT',
            lastWeek: '[फाटलो] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s आदीं',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'वेर' only applies to day of the month
                case 'D':
                    return number + 'वेर';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळीं') {
                return hour;
            } else if (meridiem === 'दनपारां') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'सांजे') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'राती';
            } else if (hour < 12) {
                return 'सकाळीं';
            } else if (hour < 16) {
                return 'दनपारां';
            } else if (hour < 20) {
                return 'सांजे';
            } else {
                return 'राती';
            }
        },
    });

    return gomDeva;

})));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: {
            standalone: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
                '_'
            ),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /rati|sokallim|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokallim';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        },
    });

    return gomLatn;

})));


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '૧',
            2: '૨',
            3: '૩',
            4: '૪',
            5: '૫',
            6: '૬',
            7: '૭',
            8: '૮',
            9: '૯',
            0: '૦',
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0',
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
            '_'
        ),
        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
            '_'
        ),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પહેલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ',
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return gu;

})));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var he = moment.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
            '_'
        ),
        monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split(
            '_'
        ),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            ss: '%d שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            },
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        },
    });

    return he;

})));


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        },
        monthsParse = [
            /^जन/i,
            /^फ़र|फर/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सितं|सित/i,
            /^अक्टू/i,
            /^नव|नवं/i,
            /^दिसं|दिस/i,
        ],
        shortMonthsParse = [
            /^जन/i,
            /^फ़र/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सित/i,
            /^अक्टू/i,
            /^नव/i,
            /^दिस/i,
        ];

    var hi = moment.defineLocale('hi', {
        months: {
            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
                '_'
            ),
            standalone: 'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
                '_'
            ),
        },
        monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split(
            '_'
        ),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
        },

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: shortMonthsParse,

        monthsRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsShortRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsStrictRegex: /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,

        monthsShortStrictRegex: /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,

        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            ss: '%d सेकंड',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return hi;

})));


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
                '_'
            ),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
                '_'
            ),
        },
        monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prošlu] [nedjelju] [u] LT';
                    case 3:
                        return '[prošlu] [srijedu] [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hr;

})));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner
//! author : Peter Viszt  : https://github.com/passatgt

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(
        ' '
    );
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix
                    ? 'néhány másodperc'
                    : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix)
                    ? ' másodperc'
                    : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (
            (isFuture ? '' : '[múlt] ') +
            '[' +
            weekEndings[this.day()] +
            '] LT[-kor]'
        );
    }

    var hu = moment.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
            '_'
        ),
        monthsShort: 'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm',
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return hu;

})));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
                '_'
            ),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
                '_'
            ),
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
            '_'
        ),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            ss: '%d վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի',
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hyAm;

})));


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return id;

})));


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nokkrar sekúndur'
                    : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
                    );
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return (
                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
                    );
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture
                            ? 'klukkustundir'
                            : 'klukkustundum')
                    );
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
            '_'
        ),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return is;

})));


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz
//! author: Marco : https://github.com/Manfre98

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: function () {
                return (
                    '[Oggi a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextDay: function () {
                return (
                    '[Domani a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextWeek: function () {
                return (
                    'dddd [a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastDay: function () {
                return (
                    '[Ieri a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return (
                            '[La scorsa] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                    default:
                        return (
                            '[Lo scorso] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return it;

})));


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian (Switzerland) [it-ch]
//! author : xfh : https://github.com/xfh

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var itCh = moment.defineLocale('it-ch', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return itCh;

})));


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ja = moment.defineLocale('ja', {
        eras: [
            {
                since: '2019-05-01',
                offset: 1,
                name: '令和',
                narrow: '㋿',
                abbr: 'R',
            },
            {
                since: '1989-01-08',
                until: '2019-04-30',
                offset: 1,
                name: '平成',
                narrow: '㍻',
                abbr: 'H',
            },
            {
                since: '1926-12-25',
                until: '1989-01-07',
                offset: 1,
                name: '昭和',
                narrow: '㍼',
                abbr: 'S',
            },
            {
                since: '1912-07-30',
                until: '1926-12-24',
                offset: 1,
                name: '大正',
                narrow: '㍽',
                abbr: 'T',
            },
            {
                since: '1873-01-01',
                until: '1912-07-29',
                offset: 6,
                name: '明治',
                narrow: '㍾',
                abbr: 'M',
            },
            {
                since: '0001-01-01',
                until: '1873-12-31',
                offset: 1,
                name: '西暦',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: '紀元前',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        eraYearOrdinalRegex: /(元|\d+)年/,
        eraYearOrdinalParse: function (input, match) {
            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
        },
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日(ddd) HH:mm',
        },
        meridiemParse: /午前|午後/i,
        isPM: function (input) {
            return input === '午後';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay: '[昨日] LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function (number, period) {
            switch (period) {
                case 'y':
                    return number === 1 ? '元年' : number + '年';
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            ss: '%d秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年',
        },
    });

    return ja;

})));


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return jv;

})));


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/IrakliJani

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ka = moment.defineLocale('ka', {
        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
            '_'
        ),
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
                '_'
            ),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
                '_'
            ),
            isFormat: /(წინა|შემდეგ)/,
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return s.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/, function (
                    $0,
                    $1,
                    $2
                ) {
                    return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
                });
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
                return s;
            },
            s: 'რამდენიმე წამი',
            ss: '%d წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი',
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
            ) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7,
        },
    });

    return ka;

})));


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші',
    };

    var kk = moment.defineLocale('kk', {
        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
            '_'
        ),
        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
            '_'
        ),
        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            ss: '%d секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return kk;

})));


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '១',
            2: '២',
            3: '៣',
            4: '៤',
            5: '៥',
            6: '៦',
            7: '៧',
            8: '៨',
            9: '៩',
            0: '០',
        },
        numberMap = {
            '១': '1',
            '២': '2',
            '៣': '3',
            '៤': '4',
            '៥': '5',
            '៦': '6',
            '៧': '7',
            '៨': '8',
            '៩': '9',
            '០': '0',
        };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ',
        },
        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
        ordinal: 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return km;

})));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '೧',
            2: '೨',
            3: '೩',
            4: '೪',
            5: '೫',
            6: '೬',
            7: '೭',
            8: '೮',
            9: '೯',
            0: '೦',
        },
        numberMap = {
            '೧': '1',
            '೨': '2',
            '೩': '3',
            '೪': '4',
            '೫': '5',
            '೬': '6',
            '೭': '7',
            '೮': '8',
            '೯': '9',
            '೦': '0',
        };

    var kn = moment.defineLocale('kn', {
        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
            '_'
        ),
        monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
            '_'
        ),
        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss: '%d ಸೆಕೆಂಡುಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ',
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal: function (number) {
            return number + 'ನೇ';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return kn;

})));


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ko = moment.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
            '_'
        ),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm',
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse: /오전|오후/,
        isPM: function (token) {
            return token === '오후';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
    });

    return ko;

})));


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kurdish [ku]
//! author : Shahram Mebashar : https://github.com/ShahramMebashar

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        months = [
            'کانونی دووەم',
            'شوبات',
            'ئازار',
            'نیسان',
            'ئایار',
            'حوزەیران',
            'تەمموز',
            'ئاب',
            'ئەیلوول',
            'تشرینی یەكەم',
            'تشرینی دووەم',
            'كانونی یەکەم',
        ];

    var ku = moment.defineLocale('ku', {
        months: months,
        monthsShort: months,
        weekdays: 'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
            '_'
        ),
        weekdaysShort: 'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split(
            '_'
        ),
        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar: {
            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
            nextDay: '[به‌یانی كاتژمێر] LT',
            nextWeek: 'dddd [كاتژمێر] LT',
            lastDay: '[دوێنێ كاتژمێر] LT',
            lastWeek: 'dddd [كاتژمێر] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'له‌ %s',
            past: '%s',
            s: 'چه‌ند چركه‌یه‌ك',
            ss: 'چركه‌ %d',
            m: 'یه‌ك خوله‌ك',
            mm: '%d خوله‌ك',
            h: 'یه‌ك كاتژمێر',
            hh: '%d كاتژمێر',
            d: 'یه‌ك ڕۆژ',
            dd: '%d ڕۆژ',
            M: 'یه‌ك مانگ',
            MM: '%d مانگ',
            y: 'یه‌ك ساڵ',
            yy: '%d ساڵ',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ku;

})));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү',
    };

    var ky = moment.defineLocale('ky', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
            '_'
        ),
        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
            '_'
        ),
        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
            '_'
        ),
        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кечээ саат] LT',
            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            ss: '%d секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ky;

})));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
            '_'
        ),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            },
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lb;

})));


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var lo = moment.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
            '_'
        ),
        monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
            '_'
        ),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss: '%d ວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ',
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function (number) {
            return 'ທີ່' + number;
        },
    });

    return lo;

})));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundė_sekundžių_sekundes',
        m: 'minutė_minutės_minutę',
        mm: 'minutės_minučių_minutes',
        h: 'valanda_valandos_valandą',
        hh: 'valandos_valandų_valandas',
        d: 'diena_dienos_dieną',
        dd: 'dienos_dienų_dienas',
        M: 'mėnuo_mėnesio_mėnesį',
        MM: 'mėnesiai_mėnesių_mėnesius',
        y: 'metai_metų_metus',
        yy: 'metai_metų_metus',
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix
            ? forms(key)[0]
            : isFuture
            ? forms(key)[1]
            : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return (
                result + translateSingular(number, withoutSuffix, key[0], isFuture)
            );
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
                '_'
            ),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
                '_'
            ),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
                '_'
            ),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
                '_'
            ),
            isFormat: /dddd HH:mm/,
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lt;

})));


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        h: 'stundas_stundām_stunda_stundas'.split('_'),
        hh: 'stundas_stundām_stunda_stundas'.split('_'),
        d: 'dienas_dienām_diena_dienas'.split('_'),
        dd: 'dienas_dienām_diena_dienas'.split('_'),
        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        y: 'gada_gadiem_gads_gadi'.split('_'),
        yy: 'gada_gadiem_gads_gadi'.split('_'),
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
            '_'
        ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lv;

})));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return me;

})));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
            '_'
        ),
        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
            '_'
        ),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mi;

})));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0
//! author : Sashko Todorov : https://github.com/bkyceh

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mk = moment.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пред %s',
            s: 'неколку секунди',
            ss: '%d секунди',
            m: 'една минута',
            mm: '%d минути',
            h: 'еден час',
            hh: '%d часа',
            d: 'еден ден',
            dd: '%d дена',
            M: 'еден месец',
            MM: '%d месеци',
            y: 'една година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return mk;

})));


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ml = moment.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
            '_'
        ),
        monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
            '_'
        ),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            ss: '%d സെക്കൻഡ്',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം',
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        },
    });

    return ml;

})));


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Mongolian [mn]
//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
            '_'
        ),
        monthsShort: '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY оны MMMMын D',
            LLL: 'YYYY оны MMMMын D HH:mm',
            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM: function (input) {
            return input === 'ҮХ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar: {
            sameDay: '[Өнөөдөр] LT',
            nextDay: '[Маргааш] LT',
            nextWeek: '[Ирэх] dddd LT',
            lastDay: '[Өчигдөр] LT',
            lastWeek: '[Өнгөрсөн] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s дараа',
            past: '%s өмнө',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        },
    });

    return mn;

})));


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';
                    break;
                case 'ss':
                    output = '%d सेकंद';
                    break;
                case 'm':
                    output = 'एक मिनिट';
                    break;
                case 'mm':
                    output = '%d मिनिटे';
                    break;
                case 'h':
                    output = 'एक तास';
                    break;
                case 'hh':
                    output = '%d तास';
                    break;
                case 'd':
                    output = 'एक दिवस';
                    break;
                case 'dd':
                    output = '%d दिवस';
                    break;
                case 'M':
                    output = 'एक महिना';
                    break;
                case 'MM':
                    output = '%d महिने';
                    break;
                case 'y':
                    output = 'एक वर्ष';
                    break;
                case 'yy':
                    output = '%d वर्षे';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';
                    break;
                case 'ss':
                    output = '%d सेकंदां';
                    break;
                case 'm':
                    output = 'एका मिनिटा';
                    break;
                case 'mm':
                    output = '%d मिनिटां';
                    break;
                case 'h':
                    output = 'एका तासा';
                    break;
                case 'hh':
                    output = '%d तासां';
                    break;
                case 'd':
                    output = 'एका दिवसा';
                    break;
                case 'dd':
                    output = '%d दिवसां';
                    break;
                case 'M':
                    output = 'एका महिन्या';
                    break;
                case 'MM':
                    output = '%d महिन्यां';
                    break;
                case 'y':
                    output = 'एका वर्षा';
                    break;
                case 'yy':
                    output = '%d वर्षां';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
            '_'
        ),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr,
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
                return hour;
            } else if (
                meridiem === 'दुपारी' ||
                meridiem === 'सायंकाळी' ||
                meridiem === 'रात्री'
            ) {
                return hour >= 12 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
                return 'पहाटे';
            } else if (hour < 12) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return mr;

})));


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ms;

})));


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return msMy;

})));


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mt = moment.defineLocale('mt', {
        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays: 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
            '_'
        ),
        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[Għada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraħ fil-]LT',
            lastWeek: 'dddd [li għadda] [fil-]LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'f’ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegħa',
            hh: '%d siegħat',
            d: 'ġurnata',
            dd: '%d ġranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mt;

})));


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '၁',
            2: '၂',
            3: '၃',
            4: '၄',
            5: '၅',
            6: '၆',
            7: '၇',
            8: '၈',
            9: '၉',
            0: '၀',
        },
        numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0',
        };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
            '_'
        ),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
            '_'
        ),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss: '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်',
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return my;

})));


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nb;

})));


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    var ne = moment.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
            '_'
        ),
        monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
            '_'
        ),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            ss: '%d सेकेण्ड',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ne;

})));


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split(
            '_'
        ),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split(
            '_'
        ),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split(
            '_'
        ),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split(
            '_'
        ),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nlBe;

})));


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! authors : https://github.com/mechuwind
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nn;

})));


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Occitan, lengadocian dialecte [oc-lnc]
//! author : Quentin PAGÈS : https://github.com/Quenty31

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ocLnc = moment.defineLocale('oc-lnc', {
        months: {
            standalone: 'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
                '_'
            ),
            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort: 'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: '[uèi a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[ièr a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4,
        },
    });

    return ocLnc;

})));


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '੧',
            2: '੨',
            3: '੩',
            4: '੪',
            5: '੫',
            6: '੬',
            7: '੭',
            8: '੮',
            9: '੯',
            0: '੦',
        },
        numberMap = {
            '੧': '1',
            '੨': '2',
            '੩': '3',
            '੪': '4',
            '੫': '5',
            '੬': '6',
            '੭': '7',
            '੮': '8',
            '੯': '9',
            '੦': '0',
        };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
            '_'
        ),
        monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
            '_'
        ),
        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
            '_'
        ),
        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
        },
        calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: '[ਅਗਲਾ] dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            ss: '%d ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ',
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return paIn;

})));


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
            '_'
        ),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
            '_'
        ),
        monthsParse = [
            /^sty/i,
            /^lut/i,
            /^mar/i,
            /^kwi/i,
            /^maj/i,
            /^cze/i,
            /^lip/i,
            /^sie/i,
            /^wrz/i,
            /^paź/i,
            /^lis/i,
            /^gru/i,
        ];
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'ww':
                return result + (plural(number) ? 'tygodnie' : 'tygodni');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split(
            '_'
        ),
        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            w: 'tydzień',
            ww: translate,
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pl;

})));


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
            '_'
        ),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pt;

})));


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
            '_'
        ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        invalidDate: 'Data inválida',
    });

    return ptBr;

})));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly
//! author : Emanuel Cepoi : https://github.com/cepem

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                ss: 'secunde',
                mm: 'minute',
                hh: 'ore',
                dd: 'zile',
                ww: 'săptămâni',
                MM: 'luni',
                yy: 'ani',
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
        ),
        monthsShort: 'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o săptămână',
            ww: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural,
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ro;

})));


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            hh: 'час_часа_часов',
            dd: 'день_дня_дней',
            ww: 'неделя_недели_недель',
            MM: 'месяц_месяца_месяцев',
            yy: 'год_года_лет',
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [
        /^янв/i,
        /^фев/i,
        /^мар/i,
        /^апр/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^авг/i,
        /^сен/i,
        /^окт/i,
        /^ноя/i,
        /^дек/i,
    ];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
                '_'
            ),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
                '_'
            ),
        },
        monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
                '_'
            ),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
                '_'
            ),
        },
        weekdays: {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
                '_'
            ),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
                '_'
            ),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
        },
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соответствует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., H:mm',
            LLLL: 'dddd, D MMMM YYYY г., H:mm',
        },
        calendar: {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            w: 'неделя',
            ww: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ru;

})));


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوري',
            'فيبروري',
            'مارچ',
            'اپريل',
            'مئي',
            'جون',
            'جولاءِ',
            'آگسٽ',
            'سيپٽمبر',
            'آڪٽوبر',
            'نومبر',
            'ڊسمبر',
        ],
        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            ss: '%d سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sd;

})));


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var se = moment.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
            '_'
        ),
        monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split(
            '_'
        ),
        weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
            '_'
        ),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return se;

})));


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
            '_'
        ),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
            '_'
        ),
        weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
            '_'
        ),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            ss: 'තත්පර %d',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal: function (number) {
            return number + ' වැනි';
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        },
    });

    return si;

})));


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
            '_'
        ),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sk;

})));


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nekaj sekund'
                    : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sl;

})));


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
            '_'
        ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
            '_'
        ),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sq;

})));


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sr;

})));


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
            '_'
        ),
        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'дан',
            dd: translator.translate,
            M: 'месец',
            MM: translator.translate,
            y: 'годину',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return srCyrl;

})));


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
            '_'
        ),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
            '_'
        ),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka',
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ss;

})));


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? ':e'
                        : b === 1
                        ? ':a'
                        : b === 2
                        ? ':a'
                        : b === 3
                        ? ':e'
                        : ':e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sv;

})));


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
            '_'
        ),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sw;

})));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '௧',
            2: '௨',
            3: '௩',
            4: '௪',
            5: '௫',
            6: '௬',
            7: '௭',
            8: '௮',
            9: '௯',
            0: '௦',
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0',
        };

    var ta = moment.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
            '_'
        ),
        monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
            '_'
        ),
        weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
            '_'
        ),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
            '_'
        ),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm',
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            ss: '%d விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்',
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal: function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ta;

})));


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var te = moment.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
            '_'
        ),
        monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
            '_'
        ),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            ss: '%d సెకన్లు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు',
        },
        dayOfMonthOrdinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return te;

})));


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo
//! author : Sonia Simoes : https://github.com/soniasimoes

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tet;

})));


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tajik [tg]
//! author : Orif N. Jr. : https://github.com/orif-jr

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум',
    };

    var tg = moment.defineLocale('tg', {
        months: {
            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
                '_'
            ),
            standalone: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
                '_'
            ),
        },
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
            '_'
        ),
        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Имрӯз соати] LT',
            nextDay: '[Фардо соати] LT',
            lastDay: '[Дирӯз соати] LT',
            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'баъди %s',
            past: '%s пеш',
            s: 'якчанд сония',
            m: 'як дақиқа',
            mm: '%d дақиқа',
            h: 'як соат',
            hh: '%d соат',
            d: 'як рӯз',
            dd: '%d рӯз',
            M: 'як моҳ',
            MM: '%d моҳ',
            y: 'як сол',
            yy: '%d сол',
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1th is the first week of the year.
        },
    });

    return tg;

})));


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var th = moment.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
            '_'
        ),
        monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            ss: '%d วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            w: '1 สัปดาห์',
            ww: '%d สัปดาห์',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี',
        },
    });

    return th;

})));


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkmen [tk]
//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inji",
        5: "'inji",
        8: "'inji",
        70: "'inji",
        80: "'inji",
        2: "'nji",
        7: "'nji",
        20: "'nji",
        50: "'nji",
        3: "'ünji",
        4: "'ünji",
        100: "'ünji",
        6: "'njy",
        9: "'unjy",
        10: "'unjy",
        30: "'unjy",
        60: "'ynjy",
        90: "'ynjy",
    };

    var tk = moment.defineLocale('tk', {
        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
            '_'
        ),
        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[düýn] LT',
            lastWeek: '[geçen] dddd [sagat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s soň',
            past: '%s öň',
            s: 'birnäçe sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir aý',
            MM: '%d aý',
            y: 'bir ýyl',
            yy: '%d ýyl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'unjy";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tk;

})));


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlPh;

})));


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'leS'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'waQ'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'nem'
                : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'Hu’'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'wen'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'ben'
                : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
            '_'
        ),
        monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L',
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlh;

})));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı",
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
            '_'
        ),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
            '_'
        ),
        weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'öö' : 'ÖÖ';
            } else {
                return isLower ? 'ös' : 'ÖS';
            }
        },
        meridiemParse: /öö|ÖÖ|ös|ÖS/,
        isPM: function (input) {
            return input === 'ös' || input === 'ÖS';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'ıncı";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tr;

})));


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return "d'o" === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? "d'o" : "D'O";
            } else {
                return isLower ? "d'a" : "D'A";
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n míut", "'iens míut"],
            mm: [number + ' míuts', '' + number + ' míuts'],
            h: ["'n þora", "'iensa þora"],
            hh: [number + ' þoras', '' + number + ' þoras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars'],
        };
        return isFuture
            ? format[key][0]
            : withoutSuffix
            ? format[key][0]
            : format[key][1];
    }

    return tzl;

})));


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzm = moment.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
            '_'
        ),
        monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
            '_'
        ),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            ss: '%d ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzm;

})));


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
            '_'
        ),
        monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
            '_'
        ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzmLatn;

})));


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uyghur (China) [ug-cn]
//! author: boyaq : https://github.com/boyaq

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل',
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return ugCn;

})));


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            dd: 'день_дні_днів',
            MM: 'місяць_місяці_місяців',
            yy: 'рік_роки_років',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                nominative: 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
                    '_'
                ),
                accusative: 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
                    '_'
                ),
                genitive: 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
                    '_'
                ),
            },
            nounCase;

        if (m === true) {
            return weekdays['nominative']
                .slice(1, 7)
                .concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
            ? 'accusative'
            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
            ? 'genitive'
            : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
                '_'
            ),
            standalone: 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
                '_'
            ),
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
            '_'
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural,
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uk;

})));


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوری',
            'فروری',
            'مارچ',
            'اپریل',
            'مئی',
            'جون',
            'جولائی',
            'اگست',
            'ستمبر',
            'اکتوبر',
            'نومبر',
            'دسمبر',
        ],
        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            ss: '%d سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ur;

})));


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uz = moment.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
            '_'
        ),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            ss: '%d фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return uz;

})));


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
            '_'
        ),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uzLatn;

})));


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk
//! author : Chien Kira : https://github.com/chienkira

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var vi = moment.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
            '_'
        ),
        monthsShort: 'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
            '_'
        ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return /^ch$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần trước lúc] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            ss: '%d giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            w: 'một tuần',
            ww: '%d tuần',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return vi;

})));


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
            '_'
        ),
        monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
            '_'
        ),
        monthsParseExact: true,
        weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
            '_'
        ),
        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            ss: '%d s~écóñ~ds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return xPseudo;

})));


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var yo = moment.defineLocale('yo', {
        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
            '_'
        ),
        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            ss: 'aayá %d',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d',
        },
        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: 'ọjọ́ %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return yo;

})));


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng
//! author : uu109 : https://github.com/uu109

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhCn = moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[下]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            lastDay: '[昨天]LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[上]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            ss: '%d 秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            w: '1 周',
            ww: '%d 周',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return zhCn;

})));


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd
//! author : Anthony : https://github.com/anthonylau

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhHk = moment.defineLocale('zh-hk', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1200) {
                return '上午';
            } else if (hm === 1200) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhHk;

})));


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Macau) [zh-mo]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Tan Yuanhong : https://github.com/le0tan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhMo = moment.defineLocale('zh-mo', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhMo;

})));


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhTw;

})));


/***/ }),
/* 136 */,
/* 137 */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(145);


/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(137);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



(function ($) {
  var $searchPersonal = $('.js-search-personal');
  var $findNoResult = $('.js-find-no-result');
  var $findBelowEighteen = $('.js-find-below-eighteen');
  var $cardsSkeleton = $('.js-cards-skeleton');
  var $cardTitle = $('.js-cards-title');
  var $listCardItem = $('.js-list-card-item');
  var $showAllProgrammes = $('.js-show-all-programmes');
  var $findNoResultReset = $('.js-find-no-result-reset');
  var $btnShowMoreProgrammes = $('.js-btn-show-programmes');

  if (!$searchPersonal[0]) {
    return;
  }

  var PAGE_SIZE = 18;
  var loading = false;
  var page = 0;
  var programmeFinderUrl = $searchPersonal.data('programme-finder-url');
  var isUrlParameter = $searchPersonal.hasClass('is-url-parameter');
  var templateImagePath = $searchPersonal.data('image-path');
  var $filterSelect2Container = $searchPersonal.find('.js-filter-item-select-container');
  var $buttonSearch = $searchPersonal.find('.js-btn-search');
  var $btnReset = $searchPersonal.find('.js-btn-reset');

  function getParameterByName(name) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;
    //eslint-disable-next-line
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);

    if (!results) {
      return null;
    }

    if (!results[2]) {
      return '';
    }

    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }

  var renderTemplateCard = function renderTemplateCard(item) {
    return "\n      <div class=\"card\">\n        <a href=\"".concat(item.link, "\">\n          <div class=\"card__image\">\n            <img src=\"").concat(templateImagePath + item.image, "\" alt=\"\"/>\n          </div>\n          <div class=\"card__content\">\n            <div class=\"card__title js-card-title\">").concat(window.utils.escapeHtml(item.title), "</div>\n            <div class=\"card__desc\">").concat(item.description, "</div>\n          </div>\n        </a>\n      </div>\n    ");
  };

  var handleResetCard = function handleResetCard(params) {
    $findNoResult.addClass('hidden');
    $cardsSkeleton.addClass('hidden');
    $findBelowEighteen.addClass('hidden');
    $cardTitle.removeClass('hidden');
    $listCardItem.removeClass('hidden');

    if (params.refreshFilter) {
      $filterSelect2Container.each(function (index, item) {
        $(item).selectItemSearch('clearValues');
      });
    }
  };

  var handleGetValueSelect = function handleGetValueSelect() {
    var retValue = {};
    $filterSelect2Container.each(function (index, item) {
      var selectedValue = $(item).selectItemSearch('getValues');

      if (selectedValue) {
        retValue[selectedValue.type] = encodeURIComponent(selectedValue.value);
      }
    });
    return retValue;
  };

  var handleGetValueSelectIncludeItemAll = function handleGetValueSelectIncludeItemAll() {
    var retValue = {};
    $filterSelect2Container.each(function (index, item) {
      var selectedValue = $(item).selectItemSearch('getValuesIncludedItemAll');

      if (selectedValue) {
        retValue[selectedValue.type] = encodeURIComponent(selectedValue.value);
      }
    });
    return retValue;
  };

  var isCheckYearValid = function isCheckYearValid(date) {
    var currentDate = moment__WEBPACK_IMPORTED_MODULE_1___default()().format('YYYY');
    return true;
    //return parseInt(currentDate) - parseInt(date) >= 18;
  };

  var setHeightSameOfCard = function setHeightSameOfCard() {
    var $cardTitle = $('.js-card-title');

    if (!$cardTitle.length) {
      return;
    }

    $cardTitle.height('auto');
    var cardPerRow = 2;

    if (window.innerWidth >= 991) {
      cardPerRow = 3;
    }

    var cardGroups = [];

    if (cardPerRow > 1) {
      var curGroup;
      $cardTitle.each(function (index, el) {
        if (index % cardPerRow === 0) {
          curGroup = {
            items: []
          };
          cardGroups.push(curGroup);
        }

        curGroup.items.push(el);
      });
    }

    cardGroups.forEach(function (group, index) {
      var maxHeight = 0;
      group.items.forEach(function (item) {
        var heightCurrent = $(item).height();

        if (maxHeight < heightCurrent) {
          maxHeight = heightCurrent;
        }
      });
      group.items.forEach(function (item) {
        $(item).height(maxHeight);
      });
    });
  };

  function scrollToElement() {
    var $scrollElement = $searchPersonal;

    if ($scrollElement && $scrollElement.length > 0) {
      setTimeout(function () {
        var container = $('html, body');
        var top = $scrollElement.offset().top - 20;
        container.animate({
          scrollTop: top
        }, 'slow');
      }, 1000);
    }
  }

  var handleSuccessApi = function handleSuccessApi(response) {
    loading = false;
    $btnShowMoreProgrammes.removeClass('is-loading');
    var items = response.data.items;
    var page = parseInt(response.data.page);
    var pageCount = parseInt(response.data.pageCount);

    if (page === pageCount - 1) {
      $btnShowMoreProgrammes.addClass('hidden');
    } else {
      if (items.length <= PAGE_SIZE) {
        $btnShowMoreProgrammes.addClass('hidden');
      } else {
        $btnShowMoreProgrammes.removeClass('hidden');
      }
    }

    if (items.length === 0) {
      $listCardItem.addClass('hidden');
      $cardTitle.addClass('hidden');
      $findBelowEighteen.addClass('hidden');
      $cardsSkeleton.addClass('hidden');
      $btnShowMoreProgrammes.addClass('hidden');
      $findNoResult.removeClass('hidden');
      return;
    }

    //items.sort(function (a, b) {
    //  return a.title.toLowerCase().localeCompare(b.title.toLowerCase());
    //});
    var cardTemplate = items.map(function (item) {
      return renderTemplateCard(item);
    });
    $findBelowEighteen.addClass('hidden');
    $cardsSkeleton.addClass('hidden');
    $findNoResult.addClass('hidden');

    if (page === 0) {
      $listCardItem.html(cardTemplate);
    } else {
      $listCardItem.append(cardTemplate);
    }

    $listCardItem.removeClass('hidden');
    $cardTitle.removeClass('hidden');
    setHeightSameOfCard();
  };

  var handleCallApiFail = function handleCallApiFail(error) {
    loading = false;
    $btnShowMoreProgrammes.removeClass('is-loading'); // eslint-disable-next-line no-console

    console.log('error: ', error);
  };

  var handleCallApi = function handleCallApi(requestData) {
    loading = true;

    if (requestData.page === 0) {
      $listCardItem.addClass('hidden');
      $findNoResult.addClass('hidden');
      $findBelowEighteen.addClass('hidden');
      $cardTitle.removeClass('hidden');
      $cardsSkeleton.removeClass('hidden');
    }

    window.APICaller.getProgrammes(requestData, handleSuccessApi, handleCallApiFail);
  };

  var handleUrlQuery = function handleUrlQuery(valuesSelected) {
    var urlQuery = "".concat(programmeFinderUrl);

    for (var property in valuesSelected) {
      if (urlQuery.includes('?')) {
        urlQuery += "&".concat(property, "=").concat(valuesSelected[property]);
      } else {
        urlQuery += "?".concat(property, "=").concat(valuesSelected[property]);
      }
    }

    if (!Object.keys(valuesSelected).length) {
      urlQuery = "".concat(programmeFinderUrl, "?searchProgrammes=true");
    }

    return urlQuery;
  };

  var setFilterInfo = function setFilterInfo(data) {
    var year = data.year,
        cause = data.cause,
        way = data.way;
    $filterSelect2Container.each(function (index, item) {
      var type = $(item).data('type');

      if (year) {
        if (type === 'year') {
          $(item).selectItemSearch('render', year);
        }
      }

      if (cause) {
        if (type === 'cause') {
          $(item).selectItemSearch('render', cause);
        }
      }

      if (way) {
        if (type === 'way') {
          $(item).selectItemSearch('render', way);
        }
      }
    });
  };

  var getFilterInfoFromUrl = function getFilterInfoFromUrl() {
    var searchProgrammes = getParameterByName('searchProgrammes');
    var year = getParameterByName('year');
    var cause = getParameterByName('cause');
    var way = getParameterByName('way');

    if (searchProgrammes || year || cause || way) {
      scrollToElement();
    }

    var requestData = {
      page: page,
      pageSize: PAGE_SIZE
    };

    if (searchProgrammes) {
      requestData.searchProgrammes = searchProgrammes;
    }

    if (year) {
      requestData.year = year;
    }

    if (cause) {
      requestData.cause = cause.split(',');
    }

    if (way) {
      requestData.way = way.split(',');
    }

    return requestData;
  };

  var handleCallSearchApi = function handleCallSearchApi() {
    $btnShowMoreProgrammes.addClass('is-loading');
    var valuesSelected = handleGetValueSelect();

    if (isUrlParameter) {
      valuesSelected = handleGetValueSelectIncludeItemAll();
      window.location.href = handleUrlQuery(valuesSelected);
    } else {
      if (valuesSelected && valuesSelected.year) {
        var isYearValid = isCheckYearValid(valuesSelected.year);
        if (!isYearValid) {
          $findNoResult.addClass('hidden');
          $cardTitle.addClass('hidden');
          $listCardItem.addClass('hidden');
          $cardsSkeleton.addClass('hidden');
          $btnShowMoreProgrammes.addClass('hidden');
          $findBelowEighteen.removeClass('hidden');
          return;
        }
      }

      var requestData = {
        page: page,
        pageSize: PAGE_SIZE,
        filters: _objectSpread({}, valuesSelected)
      };
      handleCallApi(requestData);
    }
  };

  $buttonSearch.on('click', function (e) {
    e.preventDefault();
    page = 0;
    handleCallSearchApi();
  });
  $btnReset.on('click', function () {
    handleResetCard({
      refreshFilter: true
    });
  });
  $findNoResultReset.on('click', function () {
    handleResetCard({
      refreshFilter: true
    });
    $buttonSearch.trigger('click');
  });
  $showAllProgrammes.on('click', function () {
    if (isUrlParameter) {
      window.location.href = "".concat(programmeFinderUrl, "?searchProgrammes=true");
    } else {
      handleResetCard({
        refreshFilter: true
      });
      $buttonSearch.trigger('click');
    }
  });
  $btnShowMoreProgrammes.on('click', function () {
    if (loading) {
      return;
    }

    page++;
    handleCallSearchApi();
  });
  $(window).on('resize', function () {
    setHeightSameOfCard();
  });
  $filterSelect2Container.selectItemSearch();
  $filterSelect2Container.each(function (index, item) {
    $(item).selectItemSearch('clearValues');
  });

  if (!isUrlParameter) {
    setFilterInfo(getFilterInfoFromUrl());
    $buttonSearch.click();
  }
})(jQuery);

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 1,
	"./af.js": 1,
	"./ar": 2,
	"./ar-dz": 3,
	"./ar-dz.js": 3,
	"./ar-kw": 4,
	"./ar-kw.js": 4,
	"./ar-ly": 5,
	"./ar-ly.js": 5,
	"./ar-ma": 6,
	"./ar-ma.js": 6,
	"./ar-sa": 7,
	"./ar-sa.js": 7,
	"./ar-tn": 8,
	"./ar-tn.js": 8,
	"./ar.js": 2,
	"./az": 9,
	"./az.js": 9,
	"./be": 10,
	"./be.js": 10,
	"./bg": 11,
	"./bg.js": 11,
	"./bm": 12,
	"./bm.js": 12,
	"./bn": 13,
	"./bn-bd": 14,
	"./bn-bd.js": 14,
	"./bn.js": 13,
	"./bo": 15,
	"./bo.js": 15,
	"./br": 16,
	"./br.js": 16,
	"./bs": 17,
	"./bs.js": 17,
	"./ca": 18,
	"./ca.js": 18,
	"./cs": 19,
	"./cs.js": 19,
	"./cv": 20,
	"./cv.js": 20,
	"./cy": 21,
	"./cy.js": 21,
	"./da": 22,
	"./da.js": 22,
	"./de": 23,
	"./de-at": 24,
	"./de-at.js": 24,
	"./de-ch": 25,
	"./de-ch.js": 25,
	"./de.js": 23,
	"./dv": 26,
	"./dv.js": 26,
	"./el": 27,
	"./el.js": 27,
	"./en-au": 28,
	"./en-au.js": 28,
	"./en-ca": 29,
	"./en-ca.js": 29,
	"./en-gb": 30,
	"./en-gb.js": 30,
	"./en-ie": 31,
	"./en-ie.js": 31,
	"./en-il": 32,
	"./en-il.js": 32,
	"./en-in": 33,
	"./en-in.js": 33,
	"./en-nz": 34,
	"./en-nz.js": 34,
	"./en-sg": 35,
	"./en-sg.js": 35,
	"./eo": 36,
	"./eo.js": 36,
	"./es": 37,
	"./es-do": 38,
	"./es-do.js": 38,
	"./es-mx": 39,
	"./es-mx.js": 39,
	"./es-us": 40,
	"./es-us.js": 40,
	"./es.js": 37,
	"./et": 41,
	"./et.js": 41,
	"./eu": 42,
	"./eu.js": 42,
	"./fa": 43,
	"./fa.js": 43,
	"./fi": 44,
	"./fi.js": 44,
	"./fil": 45,
	"./fil.js": 45,
	"./fo": 46,
	"./fo.js": 46,
	"./fr": 47,
	"./fr-ca": 48,
	"./fr-ca.js": 48,
	"./fr-ch": 49,
	"./fr-ch.js": 49,
	"./fr.js": 47,
	"./fy": 50,
	"./fy.js": 50,
	"./ga": 51,
	"./ga.js": 51,
	"./gd": 52,
	"./gd.js": 52,
	"./gl": 53,
	"./gl.js": 53,
	"./gom-deva": 54,
	"./gom-deva.js": 54,
	"./gom-latn": 55,
	"./gom-latn.js": 55,
	"./gu": 56,
	"./gu.js": 56,
	"./he": 57,
	"./he.js": 57,
	"./hi": 58,
	"./hi.js": 58,
	"./hr": 59,
	"./hr.js": 59,
	"./hu": 60,
	"./hu.js": 60,
	"./hy-am": 61,
	"./hy-am.js": 61,
	"./id": 62,
	"./id.js": 62,
	"./is": 63,
	"./is.js": 63,
	"./it": 64,
	"./it-ch": 65,
	"./it-ch.js": 65,
	"./it.js": 64,
	"./ja": 66,
	"./ja.js": 66,
	"./jv": 67,
	"./jv.js": 67,
	"./ka": 68,
	"./ka.js": 68,
	"./kk": 69,
	"./kk.js": 69,
	"./km": 70,
	"./km.js": 70,
	"./kn": 71,
	"./kn.js": 71,
	"./ko": 72,
	"./ko.js": 72,
	"./ku": 73,
	"./ku.js": 73,
	"./ky": 74,
	"./ky.js": 74,
	"./lb": 75,
	"./lb.js": 75,
	"./lo": 76,
	"./lo.js": 76,
	"./lt": 77,
	"./lt.js": 77,
	"./lv": 78,
	"./lv.js": 78,
	"./me": 79,
	"./me.js": 79,
	"./mi": 80,
	"./mi.js": 80,
	"./mk": 81,
	"./mk.js": 81,
	"./ml": 82,
	"./ml.js": 82,
	"./mn": 83,
	"./mn.js": 83,
	"./mr": 84,
	"./mr.js": 84,
	"./ms": 85,
	"./ms-my": 86,
	"./ms-my.js": 86,
	"./ms.js": 85,
	"./mt": 87,
	"./mt.js": 87,
	"./my": 88,
	"./my.js": 88,
	"./nb": 89,
	"./nb.js": 89,
	"./ne": 90,
	"./ne.js": 90,
	"./nl": 91,
	"./nl-be": 92,
	"./nl-be.js": 92,
	"./nl.js": 91,
	"./nn": 93,
	"./nn.js": 93,
	"./oc-lnc": 94,
	"./oc-lnc.js": 94,
	"./pa-in": 95,
	"./pa-in.js": 95,
	"./pl": 96,
	"./pl.js": 96,
	"./pt": 97,
	"./pt-br": 98,
	"./pt-br.js": 98,
	"./pt.js": 97,
	"./ro": 99,
	"./ro.js": 99,
	"./ru": 100,
	"./ru.js": 100,
	"./sd": 101,
	"./sd.js": 101,
	"./se": 102,
	"./se.js": 102,
	"./si": 103,
	"./si.js": 103,
	"./sk": 104,
	"./sk.js": 104,
	"./sl": 105,
	"./sl.js": 105,
	"./sq": 106,
	"./sq.js": 106,
	"./sr": 107,
	"./sr-cyrl": 108,
	"./sr-cyrl.js": 108,
	"./sr.js": 107,
	"./ss": 109,
	"./ss.js": 109,
	"./sv": 110,
	"./sv.js": 110,
	"./sw": 111,
	"./sw.js": 111,
	"./ta": 112,
	"./ta.js": 112,
	"./te": 113,
	"./te.js": 113,
	"./tet": 114,
	"./tet.js": 114,
	"./tg": 115,
	"./tg.js": 115,
	"./th": 116,
	"./th.js": 116,
	"./tk": 117,
	"./tk.js": 117,
	"./tl-ph": 118,
	"./tl-ph.js": 118,
	"./tlh": 119,
	"./tlh.js": 119,
	"./tr": 120,
	"./tr.js": 120,
	"./tzl": 121,
	"./tzl.js": 121,
	"./tzm": 122,
	"./tzm-latn": 123,
	"./tzm-latn.js": 123,
	"./tzm.js": 122,
	"./ug-cn": 124,
	"./ug-cn.js": 124,
	"./uk": 125,
	"./uk.js": 125,
	"./ur": 126,
	"./ur.js": 126,
	"./uz": 127,
	"./uz-latn": 128,
	"./uz-latn.js": 128,
	"./uz.js": 127,
	"./vi": 129,
	"./vi.js": 129,
	"./x-pseudo": 130,
	"./x-pseudo.js": 130,
	"./yo": 131,
	"./yo.js": 131,
	"./zh-cn": 132,
	"./zh-cn.js": 132,
	"./zh-hk": 133,
	"./zh-hk.js": 133,
	"./zh-mo": 134,
	"./zh-mo.js": 134,
	"./zh-tw": 135,
	"./zh-tw.js": 135
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 147;

/***/ })
/******/ ]);
</script><script type="text/javascript" src="/ResourcePackages/Msf/assets/js/volunteer/ways-difference.min.js"></script> 
<div id="st-2" class=" st-sticky-share-buttons st-left st-toggleable st-has-labels "><div class="st-btn st-first" data-network="facebook" style="display: inline-block;">
  <img alt="facebook sharing button" src="https://platform-cdn.sharethis.com/img/facebook.svg">
  <span class="st-label">Share</span>
</div><div class="st-btn" data-network="linkedin" style="display: inline-block;">
  <img alt="linkedin sharing button" src="https://platform-cdn.sharethis.com/img/linkedin.svg">
  <span class="st-label">Share</span>
</div><div class="st-btn" data-network="gmail" style="display: inline-block;">
  <img alt="gmail sharing button" src="https://platform-cdn.sharethis.com/img/gmail.svg">
  <span class="st-label">Email</span>
</div><div class="st-btn st-last" data-network="copy" style="display: inline-block;">
  <img alt="copy sharing button" src="https://platform-cdn.sharethis.com/img/copy.svg">
  <span class="st-label">Share</span>
</div><div class="st-toggle">
  <div class="st-left">
    <img alt="arrow_left sharing button" src="https://platform-cdn.sharethis.com/img/arrow_left.svg">
  </div>
  <div class="st-right">
    <img alt="arrow_right sharing button" src="https://platform-cdn.sharethis.com/img/arrow_right.svg">
  </div>
</div></div><wog-sentiments class="needsclick hydrated"></wog-sentiments></body></html>